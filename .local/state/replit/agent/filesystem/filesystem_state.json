{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a laundry management system called \"Billtracky\" built as a full-stack web application. The system handles invoice creation, customer management, service configuration, and order tracking for laundry businesses. It provides employee authentication via access codes and supports different service types (wash, iron, both) with dynamic pricing.\n\n**Recent Updates (January 2025):**\n- ‚ú® **Landing Page Redise√±o Completo**: Transformaci√≥n total de la landing page con dise√±o moderno inspirado en las mejores aplicaciones SaaS\n- üé® **Nueva Paleta de Colores**: Actualizada para coincidir con el logo de \"Lavander√≠a Nueva Isabela\" (azul navy y turquesa)\n- üì± **UX/UI Moderna**: Hero section impactante, secciones de beneficios, caracter√≠sticas mejoradas, precios redise√±ados\n- üöÄ **Enfoque de Conversi√≥n**: Copywriting persuasivo y estructura optimizada para generar m√°s clientes potenciales\n- üè∑Ô∏è **Nuevo Logo BT**: Integrado logo oficial de Billtracky con dise√±o \"BT\" y percha, visible en header y footer\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: Shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query for server state and React hooks for local state\n- **Routing**: Wouter for client-side routing\n- **Forms**: React Hook Form with Zod validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Simple access code-based authentication for employees\n- **Storage**: In-memory storage implementation with interface for easy database migration\n- **API**: RESTful API with JSON responses\n\n## Data Models\n- **Employees**: Access code authentication with role-based permissions\n- **Customers**: Contact information with order history tracking\n- **Services**: Configurable pricing for wash, iron, and combination services\n- **Invoices**: Complete order records with customer details and line items\n- **Invoice Items**: Individual service entries with quantities and pricing\n\n## Development Setup\n- **Monorepo Structure**: Shared schema between client and server\n- **Type Safety**: End-to-end TypeScript with shared types\n- **Development**: Hot module replacement with Vite dev server\n- **Build**: Client builds to static files, server bundles with esbuild\n\n# External Dependencies\n\n## Database\n- **PostgreSQL**: Primary database using Neon serverless PostgreSQL\n- **Drizzle ORM**: Type-safe database operations and migrations\n- **Connection**: Environment-based DATABASE_URL configuration\n\n## UI Framework\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Lucide React**: Icon library for consistent iconography\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n\n## Development Tools\n- **Vite**: Development server and build tool with React plugin\n- **TypeScript**: Type checking and enhanced developer experience\n- **ESBuild**: Fast bundling for production server builds\n- **Replit Integration**: Development environment plugins and error handling","size_bytes":3328},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/billtracky-completo 1_1757469144818.tsx":{"content":"import React, { useState } from 'react';\nimport { \n  FileText, \n  User, \n  Plus, \n  Trash2, \n  Save, \n  DollarSign, \n  Calendar, \n  Phone, \n  Mail, \n  Package, \n  Search,\n  X,\n  Clock,\n  Check,\n  Users,\n  CreditCard,\n  Banknote,\n  Landmark,\n  ArrowLeft,\n  Eye, \n  Edit3, \n  Send, \n  Printer, \n  AlertCircle,\n  RefreshCw,\n  CheckCircle,\n  XCircle,\n  BarChart3,\n  Download,\n  Settings,\n  Building2,\n  MessageCircle\n} from 'lucide-react';\n\nconst BilltrackySistemaCompleto = () => {\n  const [codigoIngresado, setCodigoIngresado] = useState('');\n  const [empleadoLogueado, setEmpleadoLogueado] = useState(null);\n  const [showNumericKeypad, setShowNumericKeypad] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [vistaActual, setVistaActual] = useState('dashboard');\n  const [vistaConfiguracion, setVistaConfiguracion] = useState('menu');\n\n  // Estados para Nueva Factura\n  const [facturaActual, setFacturaActual] = useState({\n    numero: 'FAC-010',\n    fecha: new Date().toISOString().split('T')[0],\n    cliente: '',\n    telefono: '',\n    articulos: [],\n    total: 0\n  });\n\n  // Estados para √ìrdenes\n  const [orders] = useState([\n    {\n      id: 'INV-009',\n      numero: 'FAC-009',\n      cliente: 'Juan P√©rez',\n      telefono: '8091502025',\n      total: 378.00,\n      estado: 'Recibido',\n      fechaRecibido: '2025-09-04',\n      metodoPago: 'Pendiente',\n      pagado: false\n    },\n    {\n      id: 'INV-008',\n      numero: 'FAC-008',\n      cliente: 'Mar√≠a Garc√≠a',\n      telefono: '8095551234',\n      total: 290.00,\n      estado: 'En Proceso',\n      fechaRecibido: '2025-09-03',\n      metodoPago: 'Efectivo',\n      pagado: true\n    },\n    {\n      id: 'INV-007',\n      numero: 'FAC-007',\n      cliente: 'Pedro L√≥pez',\n      telefono: '8097779999',\n      total: 195.50,\n      estado: 'Listo',\n      fechaRecibido: '2025-09-02',\n      metodoPago: 'Tarjeta',\n      pagado: true\n    }\n  ]);\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n\n  // Base de datos\n  const employees = [\n    { id: 1, nombre: 'Juan Carlos', codigoAcceso: '1234', rol: 'gerente' },\n    { id: 2, nombre: 'Mar√≠a Fern√°ndez', codigoAcceso: '5678', rol: 'empleado' },\n    { id: 3, nombre: 'Pedro Gonz√°lez', codigoAcceso: '9999', rol: 'supervisor' }\n  ];\n\n  const preciosServicios = [\n    { id: 1, nombre: 'PANTALONES', precios: { lavado: 80, planchado: 60, lavadoYPlanchado: 110 } },\n    { id: 2, nombre: 'CAMISAS', precios: { lavado: 60, planchado: 40, lavadoYPlanchado: 85 } },\n    { id: 3, nombre: 'VESTIDOS', precios: { lavado: 150, planchado: 120, lavadoYPlanchado: 220 } }\n  ];\n\n  const formatCurrency = (amount) => `RD$${amount.toFixed(2)}`;\n\n  const openModal = (message) => {\n    setModalMessage(message);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalMessage('');\n  };\n\n  const loginEmpleado = () => {\n    if (!codigoIngresado) {\n      openModal(\"Por favor ingrese su c√≥digo de acceso.\");\n      return;\n    }\n\n    const empleado = employees.find(emp => emp.codigoAcceso === codigoIngresado);\n    \n    if (empleado) {\n      setEmpleadoLogueado(empleado);\n      setCodigoIngresado('');\n      openModal(`¬°Bienvenido, ${empleado.nombre}!`);\n    } else {\n      openModal(\"C√≥digo de acceso incorrecto.\");\n      setCodigoIngresado('');\n    }\n  };\n\n  const logout = () => {\n    setEmpleadoLogueado(null);\n    setCodigoIngresado('');\n    setVistaActual('dashboard');\n    openModal(\"Sesi√≥n cerrada correctamente.\");\n  };\n\n  const agregarNumero = (numero) => {\n    if (codigoIngresado.length < 6) {\n      setCodigoIngresado(codigoIngresado + numero);\n    }\n  };\n\n  const borrarNumero = () => {\n    setCodigoIngresado(codigoIngresado.slice(0, -1));\n  };\n\n  const agregarArticulo = () => {\n    const nuevoArticulo = {\n      id: Date.now(),\n      nombre: 'PANTALONES',\n      servicio: 'lavado',\n      cantidad: 1,\n      precio: 80\n    };\n    setFacturaActual({\n      ...facturaActual,\n      articulos: [...facturaActual.articulos, nuevoArticulo],\n      total: facturaActual.total + 80\n    });\n  };\n\n  const eliminarArticulo = (id) => {\n    const articulo = facturaActual.articulos.find(a => a.id === id);\n    setFacturaActual({\n      ...facturaActual,\n      articulos: facturaActual.articulos.filter(a => a.id !== id),\n      total: facturaActual.total - (articulo.cantidad * articulo.precio)\n    });\n  };\n\n  // Componente Modal\n  const Modal = () => {\n    if (!isModalOpen) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Check className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Billtracky</h3>\n            <p className=\"text-gray-600 mb-6\">{modalMessage}</p>\n            <button\n              onClick={closeModal}\n              className=\"w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n            >\n              Aceptar\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Componente Teclado Num√©rico\n  const NumericKeypad = () => {\n    if (!showNumericKeypad) return null;\n    \n    const numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-sm w-full p-6 shadow-2xl\">\n          <div className=\"text-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">Teclado Num√©rico</h3>\n            <div className=\"mt-4 p-4 bg-gray-100 rounded-lg\">\n              <span className=\"text-2xl font-mono tracking-widest\">\n                {codigoIngresado.replace(/./g, '‚Ä¢') || '______'}\n              </span>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-3 gap-3 mb-6\">\n            {numeros.map((num) => (\n              <button\n                key={num}\n                onClick={() => agregarNumero(num.toString())}\n                className=\"h-14 bg-gray-100 hover:bg-gray-200 rounded-lg text-xl font-semibold transition-colors\"\n              >\n                {num}\n              </button>\n            ))}\n            <button\n              onClick={() => agregarNumero('0')}\n              className=\"h-14 bg-gray-100 hover:bg-gray-200 rounded-lg text-xl font-semibold transition-colors\"\n            >\n              0\n            </button>\n            <button\n              onClick={borrarNumero}\n              className=\"h-14 bg-red-100 hover:bg-red-200 text-red-600 rounded-lg font-semibold transition-colors\"\n            >\n              ‚å´\n            </button>\n            <button\n              onClick={() => setCodigoIngresado('')}\n              className=\"h-14 bg-yellow-100 hover:bg-yellow-200 text-yellow-700 rounded-lg font-semibold transition-colors text-sm\"\n            >\n              Limpiar\n            </button>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-3\">\n            <button\n              onClick={() => setShowNumericKeypad(false)}\n              className=\"py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium transition-colors\"\n            >\n              Cancelar\n            </button>\n            <button\n              onClick={() => {\n                setShowNumericKeypad(false);\n                loginEmpleado();\n              }}\n              className=\"py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n            >\n              Ingresar\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Pantalla de Login\n  const LoginScreen = () => (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-600 to-purple-700 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-2xl shadow-xl max-w-md w-full p-8\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-20 h-20 bg-red-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <FileText className=\"w-10 h-10 text-white\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Billtracky</h1>\n          <p className=\"text-gray-600 mt-2\">CleanWash Lavander√≠a</p>\n          <p className=\"text-sm text-gray-500\">Sistema de Gesti√≥n Completo</p>\n        </div>\n\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">C√≥digo de Acceso</label>\n            <div className=\"relative\">\n              <input\n                type=\"password\"\n                value={codigoIngresado}\n                onChange={(e) => setCodigoIngresado(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && loginEmpleado()}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 pr-12\"\n                placeholder=\"Ingresa tu c√≥digo\"\n                maxLength={6}\n              />\n              <button\n                onClick={() => setShowNumericKeypad(true)}\n                className=\"absolute right-3 top-1/2 transform -translate-y-1/2 p-2 text-gray-400 hover:text-blue-600 transition-colors\"\n                title=\"Teclado num√©rico\"\n              >\n                <div className=\"w-6 h-6 grid grid-cols-3 gap-0.5\">\n                  {[...Array(9)].map((_, i) => (\n                    <div key={i} className=\"w-1 h-1 bg-current rounded-full\"></div>\n                  ))}\n                </div>\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-3\">\n            <button\n              onClick={() => setShowNumericKeypad(true)}\n              className=\"flex-1 bg-gray-100 text-gray-700 py-3 rounded-lg hover:bg-gray-200 font-medium flex items-center justify-center space-x-2\"\n            >\n              <div className=\"w-5 h-5 grid grid-cols-3 gap-0.5\">\n                {[...Array(9)].map((_, i) => (\n                  <div key={i} className=\"w-1 h-1 bg-current rounded-full\"></div>\n                ))}\n              </div>\n              <span>Teclado</span>\n            </button>\n            <button\n              onClick={loginEmpleado}\n              className=\"flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium\"\n            >\n              Iniciar Sesi√≥n\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"mt-6 text-center text-xs text-gray-500\">\n          <p><strong>C√≥digos de prueba:</strong></p>\n          <p>1234 (Gerente) | 5678 (Empleado) | 9999 (Supervisor)</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Panel principal despu√©s del login\n  const MainPanel = () => (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-white shadow-sm border-b px-6 py-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-red-600 rounded-lg flex items-center justify-center\">\n              <FileText className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">Billtracky</h1>\n              <p className=\"text-sm text-gray-500\">CleanWash Lavander√≠a</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            <div className=\"text-right\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <User className=\"w-4 h-4 text-green-500\" />\n                <span className=\"text-sm text-green-600 font-medium\">En l√≠nea</span>\n              </div>\n              <p className=\"text-sm font-medium text-gray-900\">{empleadoLogueado.nombre}</p>\n              <span className={`inline-block px-2 py-1 text-xs font-medium rounded-full mt-1 ${\n                empleadoLogueado.rol === 'gerente' \n                  ? 'bg-blue-100 text-blue-800' \n                  : 'bg-green-100 text-green-800'\n              }`}>\n                {empleadoLogueado.rol === 'gerente' ? 'Gerente' : empleadoLogueado.rol === 'supervisor' ? 'Supervisor' : 'Empleado'}\n              </span>\n            </div>\n            \n            <button\n              onClick={logout}\n              className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium text-sm transition-colors\"\n            >\n              Cerrar Sesi√≥n\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"p-8\">\n        <div className=\"bg-white rounded-xl shadow-sm border p-8 text-center\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <User className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">¬°Bienvenido, {empleadoLogueado.nombre}!</h2>\n          <p className=\"text-gray-600 mb-4\">Has iniciado sesi√≥n correctamente como {empleadoLogueado.rol}</p>\n          \n          <div className=\"mt-8 grid gap-4 md:grid-cols-4\">\n            <button\n              onClick={() => setVistaActual('nueva-factura')}\n              className=\"p-6 bg-blue-50 hover:bg-blue-100 rounded-lg border border-blue-200 transition-colors text-center\"\n            >\n              <FileText className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n              <h3 className=\"font-semibold text-blue-900 mb-1\">Nueva Factura</h3>\n              <p className=\"text-sm text-blue-700\">Crear nueva factura para cliente</p>\n            </button>\n            \n            <button\n              onClick={() => setVistaActual('gestion-ordenes')}\n              className=\"p-6 bg-green-50 hover:bg-green-100 rounded-lg border border-green-200 transition-colors text-center\"\n            >\n              <Search className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n              <h3 className=\"font-semibold text-green-900 mb-1\">Gesti√≥n de √ìrdenes</h3>\n              <p className=\"text-sm text-green-700\">Ver, filtrar y gestionar √≥rdenes</p>\n            </button>\n            \n            <button\n              onClick={() => setVistaActual('cierre-caja')}\n              className=\"p-6 bg-purple-50 hover:bg-purple-100 rounded-lg border border-purple-200 transition-colors text-center\"\n            >\n              <BarChart3 className=\"w-8 h-8 text-purple-600 mx-auto mb-2\" />\n              <h3 className=\"font-semibold text-purple-900 mb-1\">Cierre de Caja</h3>\n              <p className=\"text-sm text-purple-700\">Reportes y estad√≠sticas diarias</p>\n            </button>\n            \n            <button\n              onClick={() => setVistaActual('configuracion')}\n              className=\"p-6 bg-orange-50 hover:bg-orange-100 rounded-lg border border-orange-200 transition-colors text-center\"\n            >\n              <Settings className=\"w-8 h-8 text-orange-600 mx-auto mb-2\" />\n              <h3 className=\"font-semibold text-orange-900 mb-1\">Configuraci√≥n</h3>\n              <p className=\"text-sm text-orange-700\">Sistema, empresa y usuarios</p>\n            </button>\n          </div>\n          \n          <div className=\"mt-8 p-4 bg-blue-50 rounded-lg\">\n            <h3 className=\"font-semibold text-blue-900 mb-2\">Sistema Completo Integrado:</h3>\n            <ul className=\"text-sm text-blue-700 space-y-1\">\n              <li>‚úÖ Login System con teclado num√©rico</li>\n              <li>‚úÖ Nueva Factura con autocompletado</li>\n              <li>‚úÖ Gesti√≥n de √ìrdenes avanzada</li>\n              <li>‚úÖ Cierre de Caja con reportes</li>\n              <li>‚úÖ Centro de Configuraci√≥n (5 m√≥dulos)</li>\n              <li className=\"text-green-600 font-semibold\">üéâ 9 M√≥dulos Completamente Funcionales</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Componente Nueva Factura (Simplificado)\n  const NuevaFactura = () => (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-white shadow-sm border-b px-6 py-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => setVistaActual('dashboard')}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </button>\n            <div className=\"w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center\">\n              <FileText className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">Nueva Factura</h1>\n              <p className=\"text-sm text-gray-500\">Factura #{facturaActual.numero}</p>\n            </div>\n          </div>\n          \n          <div className=\"text-right\">\n            <p className=\"text-sm text-gray-500\">Empleado</p>\n            <p className=\"font-medium\">{empleadoLogueado.nombre}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Informaci√≥n del Cliente</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nombre Completo</label>\n                <input\n                  type=\"text\"\n                  value={facturaActual.cliente}\n                  onChange={(e) => setFacturaActual({ ...facturaActual, cliente: e.target.value })}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"Nombre del cliente\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tel√©fono</label>\n                <input\n                  type=\"tel\"\n                  value={facturaActual.telefono}\n                  onChange={(e) => setFacturaActual({ ...facturaActual, telefono: e.target.value })}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"809-000-0000\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Detalles del Pedido</h2>\n              <button\n                onClick={agregarArticulo}\n                className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium flex items-center space-x-2\"\n              >\n                <Plus className=\"w-5 h-5\" />\n                <span>A√±adir Art√≠culo</span>\n              </button>\n            </div>\n            \n            {facturaActual.articulos.length === 0 ? (\n              <div className=\"text-center py-12 text-gray-500 bg-gray-50 rounded-lg\">\n                <Package className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-lg mb-2\">A√∫n no se han a√±adido art√≠culos.</p>\n                <button\n                  onClick={agregarArticulo}\n                  className=\"mt-4 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\"\n                >\n                  A√±adir primer art√≠culo\n                </button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {facturaActual.articulos.map((articulo) => (\n                  <div key={articulo.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">{articulo.cantidad}x {articulo.nombre}</p>\n                      <p className=\"text-sm text-gray-600\">{articulo.servicio} - {formatCurrency(articulo.precio)}</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"font-bold text-green-600\">\n                        {formatCurrency(articulo.cantidad * articulo.precio)}\n                      </span>\n                      <button\n                        onClick={() => eliminarArticulo(articulo.id)}\n                        className=\"text-red-600 hover:text-red-900\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {facturaActual.articulos.length > 0 && (\n            <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Resumen</h2>\n              \n              <div className=\"flex justify-between items-center text-xl font-bold text-blue-600 border-t pt-3\">\n                <span>Total:</span>\n                <span>{formatCurrency(facturaActual.total)}</span>\n              </div>\n              \n              <div className=\"flex space-x-4 mt-6\">\n                <button\n                  onClick={() => openModal(`Factura ${facturaActual.numero} guardada exitosamente`)}\n                  className=\"flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium flex items-center justify-center space-x-2\"\n                >\n                  <Save className=\"w-5 h-5\" />\n                  <span>Guardar Factura</span>\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  // Componente Gesti√≥n de √ìrdenes (Simplificado)\n  const GestionOrdenes = () => (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-white shadow-sm border-b px-6 py-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => setVistaActual('dashboard')}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </button>\n            <div className=\"w-10 h-10 bg-green-600 rounded-lg flex items-center justify-center\">\n              <Search className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">Gesti√≥n de √ìrdenes</h1>\n              <p className=\"text-sm text-gray-500\">Lista, b√∫squeda y gesti√≥n</p>\n            </div>\n          </div>\n          \n          <div className=\"text-right\">\n            <p className=\"text-sm text-gray-500\">Total √≥rdenes</p>\n            <p className=\"text-2xl font-bold text-green-600\">{orders.length}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n            <div className=\"relative\">\n              <Search className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n              <input\n                type=\"text\"\n                placeholder=\"Buscar por factura, cliente o tel√©fono...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500\"\n              />\n            </div>\n          </div>\n\n          <div className=\"bg-white rounded-xl shadow-sm border overflow-hidden\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Factura</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Cliente</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Estado</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {orders.filter(order => \n                  order.numero.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                  order.cliente.toLowerCase().includes(searchTerm.toLowerCase())\n                ).map((order) => (\n                  <tr key={order.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 text-sm font-medium\">\n                      <div>\n                        <p className=\"font-semibold\">{order.numero}</p>\n                        <p className=\"text-xs text-gray-500\">#{order.id}</p>\n                      </div>\n                    </td>\n                    \n                    <td className=\"px-6 py-4 text-sm\">\n                      <div>\n                        <p className=\"font-medium\">{order.cliente}</p>\n                        <p className=\"text-xs text-gray-500\">{order.telefono}</p>\n                      </div>\n                    </td>\n                    \n                    <td className=\"px-6 py-4 text-center\">\n                      <span className={`px-3 py-1 text-xs font-medium rounded-full ${\n                        order.estado === 'Recibido' ? 'bg-blue-100 text-blue-800' :\n                        order.estado === 'En Proceso' ? 'bg-yellow-100 text-yellow-800' :\n                        order.estado === 'Listo' ? 'bg-purple-100 text-purple-800' :\n                        'bg-green-100 text-green-800'\n                      }`}>\n                        {order.estado}\n                      </span>\n                    </td>\n                    \n                    <td className=\"px-6 py-4 text-sm font-medium\">\n                      {formatCurrency(order.total)}\n                    </td>\n                    \n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <button \n                          onClick={() => setSelectedOrder(order)}\n                          className=\"text-cyan-600 hover:text-cyan-900\" \n                          title=\"Ver detalles\"\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </button>\n                        <button \n                          onClick={() => openModal(`WhatsApp enviado a ${order.cliente}`)}\n                          className=\"text-green-600 hover:text-green-900\"\n                          title=\"WhatsApp\"\n                        >\n                          <Send className=\"w-4 h-4\" />\n                        </button>\n                        <button \n                          onClick={() => openModal(`Imprimiendo recibo de ${order.numero}`)}\n                          className=\"text-blue-600 hover:text-blue-900\" \n                          title=\"Imprimir\"\n                        >\n                          <Printer className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Estad√≠sticas por estado */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-6\">\n            {['Recibido', 'En Proceso', 'Listo', 'Entregado'].map((estado, index) => {\n              const count = orders.filter(o => o.estado === estado).length;\n              const colors = ['blue', 'yellow', 'purple', 'green'];\n              \n              return (\n                <div key={estado} className=\"bg-white rounded-xl shadow-sm border p-4\">\n                  <div className=\"flex items-center\">\n                    <div className={`w-10 h-10 bg-${colors[index]}-100 rounded-lg flex items-center justify-center`}>\n                      <Package className={`w-5 h-5 text-${colors[index]}-600`} />\n                    </div>\n                    <div className=\"ml-3\">\n                      <p className=\"text-xs font-medium text-gray-500\">{estado}</p>\n                      <p className=\"text-lg font-bold text-gray-900\">{count}</p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Componente Cierre de Caja (Simplificado)\n  const CierreCaja = () => (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"bg-white shadow-sm border-b px-6 py-4\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-3\">\n            <button\n              onClick={() => setVistaActual('dashboard')}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </button>\n            <div className=\"w-10 h-10 bg-purple-600 rounded-lg flex items-center justify-center\">\n              <BarChart3 className=\"w-6 h-6 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-gray-900\">Cierre de Caja</h1>\n              <p className=\"text-sm text-gray-500\">Reportes y estad√≠sticas</p>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3\">\n            <button\n              onClick={() => openModal(\"Funci√≥n de impresi√≥n disponible\")}\n              className=\"px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 font-medium flex items-center space-x-2\"\n            >\n              <Printer className=\"w-4 h-4\" />\n              <span>Imprimir</span>\n            </button>\n            <button\n              onClick={() => openModal(\"Funci√≥n de exportar disponible\")}\n              className=\"px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 font-medium flex items-center space-x-2\"\n            >\n              <Download className=\"w-4 h-4\" />\n              <span>Exportar</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n            <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Ingresos Totales</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(1043.50)}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Facturas Totales</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{orders.length}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <CheckCircle className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Entregadas</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{orders.filter(o => o.estado === 'Entregado').length}</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"w-6 h-6 text-yellow-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-500\">Pendientes</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{orders.filter(o => !o.pagado).length}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Desglose Financiero</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">Subtotal:</span>\n                  <span className=\"font-medium\">{formatCurrency(884.32)}</span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-600\">ITBIS (18%):</span>\n                  <span className=\"font-medium\">{formatCurrency(159.18)}</span>\n                </div>\n                <div className=\"border-t pt-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-xl font-bold text-gray-900\">Total:</span>\n                    <span className=\"text-xl font-bold text-green-600\">{formatCurrency(1043.50)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">M√©todos de Pago</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center mr-3\">\n                      <Banknote className=\"w-4 h-4 text-green-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">Efectivo</p>\n                      <p className=\"text-sm text-gray-500\">1 transacci√≥n</p>\n                    </div>\n                  </div>\n                  <span className=\"font-bold text-gray-900\">{formatCurrency(378.00)}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center mr-3\">\n                      <CreditCard className=\"w-4 h-4 text-blue-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">Tarjeta</p>\n                      <p className=\"text-sm text-gray-500\">1 transacci√≥n</p>\n                    </div>\n                  </div>\n                  <span className=\"font-bold text-gray-900\">{formatCurrency(195.50)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Componente Configuraci√≥n\n  const Configuracion = () => {\n    const modulosConfiguracion = [\n      {\n        id: 'empresa',\n        titulo: 'Configuraci√≥n de Empresa',\n        descripcion: 'Datos generales, contacto y horarios',\n        icono: Building2,\n        color: 'blue'\n      },\n      {\n        id: 'metodos-pago',\n        titulo: 'M√©todos de Pago', \n        descripcion: 'Gestionar formas de pago disponibles',\n        icono: CreditCard,\n        color: 'green'\n      },\n      {\n        id: 'mensajes',\n        titulo: 'Mensajes WhatsApp',\n        descripcion: 'Plantillas y notificaciones autom√°ticas', \n        icono: MessageCircle,\n        color: 'purple'\n      },\n      {\n        id: 'servicios',\n        titulo: 'Servicios y Precios',\n        descripcion: 'Gesti√≥n de precios por categor√≠as',\n        icono: Package,\n        color: 'orange'\n      },\n      {\n        id: 'empleados',\n        titulo: 'Empleados y Roles',\n        descripcion: 'Sistema de usuarios y permisos',\n        icono: Users,\n        color: 'indigo'\n      }\n    ];\n\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"bg-white shadow-sm border-b px-6 py-4\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center space-x-3\">\n              <button\n                onClick={() => setVistaActual('dashboard')}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n              </button>\n              <div className=\"w-10 h-10 bg-orange-600 rounded-lg flex items-center justify-center\">\n                <Settings className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Configuraci√≥n del Sistema</h1>\n                <p className=\"text-sm text-gray-500\">Administraci√≥n y configuraci√≥n general</p>\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-500\">Empleado</p>\n              <p className=\"font-medium\">{empleadoLogueado.nombre}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"p-6\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Centro de Configuraci√≥n</h2>\n              <p className=\"text-gray-600 mb-6\">Personaliza y configura todos los aspectos del sistema</p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {modulosConfiguracion.map((modulo) => {\n                  const IconoModulo = modulo.icono;\n                  return (\n                    <button\n                      key={modulo.id}\n                      onClick={() => openModal(`M√≥dulo ${modulo.titulo} disponible para configuraci√≥n completa`)}\n                      className={`p-6 bg-${modulo.color}-50 hover:bg-${modulo.color}-100 rounded-xl border border-${modulo.color}-200 transition-all duration-200 text-left group`}\n                    >\n                      <div className=\"flex items-start space-x-4\">\n                        <div className={`w-12 h-12 bg-${modulo.color}-600 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform`}>\n                          <IconoModulo className=\"w-6 h-6 text-white\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <h3 className={`font-semibold text-${modulo.color}-900 mb-1`}>\n                            {modulo.titulo}\n                          </h3>\n                          <p className={`text-sm text-${modulo.color}-700`}>\n                            {modulo.descripcion}\n                          </p>\n                        </div>\n                      </div>\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <Building2 className=\"w-6 h-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Empresa</p>\n                    <p className=\"text-lg font-bold text-gray-900\">CleanWash</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <CreditCard className=\"w-6 h-6 text-green-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">M√©todos Pago</p>\n                    <p className=\"text-lg font-bold text-gray-900\">3 activos</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                    <Package className=\"w-6 h-6 text-orange-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Servicios</p>\n                    <p className=\"text-lg font-bold text-gray-900\">6 activos</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center\">\n                    <Users className=\"w-6 h-6 text-indigo-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-500\">Empleados</p>\n                    <p className=\"text-lg font-bold text-gray-900\">3 activos</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      {!empleadoLogueado ? (\n        <LoginScreen />\n      ) : vistaActual === 'nueva-factura' ? (\n        <NuevaFactura />\n      ) : vistaActual === 'gestion-ordenes' ? (\n        <GestionOrdenes />\n      ) : vistaActual === 'cierre-caja' ? (\n        <CierreCaja />\n      ) : vistaActual === 'configuracion' ? (\n        <Configuracion />\n      ) : (\n        <MainPanel />\n      )}\n      <NumericKeypad />\n      <Modal />\n    </div>\n  );\n};\n\nexport default BilltrackySistemaCompleto;","size_bytes":43518},"attached_assets/configuracion_empresa-7_1757470217530.tsx":{"content":"import React, { useState } from 'react';\nimport { \n  Building2, \n  Save, \n  X, \n  Check, \n  Mail, \n  Phone, \n  MapPin,\n  Globe,\n  Camera,\n  Upload,\n  Edit3,\n  Settings,\n  AlertCircle,\n  Eye,\n  EyeOff,\n  Copy,\n  RefreshCw\n} from 'lucide-react';\n\nconst ConfiguracionEmpresa = () => {\n  const [configuracionEmpresa, setConfiguracionEmpresa] = useState({\n    nombre: 'CleanWash Lavander√≠a',\n    nombreComercial: 'CleanWash',\n    email: 'admin@cleanwash.com',\n    telefono: '809-555-0123',\n    telefono2: '809-555-0124',\n    direccion: 'Av. Principal #123, Santo Domingo',\n    sucursal: 'Sucursal Centro',\n    ciudad: 'Santo Domingo',\n    provincia: 'Distrito Nacional',\n    codigoPostal: '10101',\n    rnc: '131-12345-6',\n    website: 'www.cleanwash.com',\n    redesSociales: {\n      facebook: '@cleanwashrd',\n      instagram: '@cleanwash_rd',\n      whatsapp: '8095550123'\n    },\n    horarios: {\n      lunes: { apertura: '08:00', cierre: '18:00', activo: true },\n      martes: { apertura: '08:00', cierre: '18:00', activo: true },\n      miercoles: { apertura: '08:00', cierre: '18:00', activo: true },\n      jueves: { apertura: '08:00', cierre: '18:00', activo: true },\n      viernes: { apertura: '08:00', cierre: '18:00', activo: true },\n      sabado: { apertura: '08:00', cierre: '16:00', activo: true },\n      domingo: { apertura: '09:00', cierre: '14:00', activo: false }\n    },\n    configuracionFactura: {\n      mostrarRnc: true,\n      mostrarDireccion: true,\n      mostrarTelefono: true,\n      mostrarEmail: true,\n      mensajePie: 'Gracias por preferirnos - CleanWash Lavander√≠a'\n    }\n  });\n\n  const [activeTab, setActiveTab] = useState('general');\n  const [modalMessage, setModalMessage] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [hasChanges, setHasChanges] = useState(false);\n  const [logoPreview, setLogoPreview] = useState(null);\n\n  const openModal = (message) => {\n    setModalMessage(message);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalMessage('');\n  };\n\n  const handleChange = (campo, valor, seccion = null) => {\n    setHasChanges(true);\n    if (seccion) {\n      setConfiguracionEmpresa(prev => ({\n        ...prev,\n        [seccion]: {\n          ...prev[seccion],\n          [campo]: valor\n        }\n      }));\n    } else {\n      setConfiguracionEmpresa(prev => ({\n        ...prev,\n        [campo]: valor\n      }));\n    }\n  };\n\n  const guardarConfiguracion = () => {\n    if (!configuracionEmpresa.nombre || !configuracionEmpresa.telefono) {\n      openModal(\"Complete al menos el nombre y tel√©fono de la empresa.\");\n      return;\n    }\n\n    setHasChanges(false);\n    openModal(\"Configuraci√≥n de empresa actualizada exitosamente.\");\n  };\n\n  const handleLogoUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) {\n        openModal(\"El archivo es muy grande. El tama√±o m√°ximo es 5MB.\");\n        return;\n      }\n      \n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setLogoPreview(e.target.result);\n        setHasChanges(true);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const diasSemana = {\n    lunes: 'Lunes',\n    martes: 'Martes',\n    miercoles: 'Mi√©rcoles',\n    jueves: 'Jueves',\n    viernes: 'Viernes',\n    sabado: 'S√°bado',\n    domingo: 'Domingo'\n  };\n\n  const tabs = [\n    { id: 'general', label: 'Informaci√≥n General', icon: Building2 },\n    { id: 'contacto', label: 'Contacto y Ubicaci√≥n', icon: Phone },\n    { id: 'horarios', label: 'Horarios de Atenci√≥n', icon: Settings },\n    { id: 'facturacion', label: 'Configuraci√≥n de Factura', icon: Settings }\n  ];\n\n  const Modal = () => {\n    if (!isModalOpen) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Check className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Configuraci√≥n de Empresa</h3>\n            <p className=\"text-gray-600 mb-6\">{modalMessage}</p>\n            <button\n              onClick={closeModal}\n              className=\"w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 font-medium transition-colors\"\n            >\n              Aceptar\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const FacturaPreview = () => {\n    if (!showPreview) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">Vista Previa de Factura</h3>\n            <button\n              onClick={() => setShowPreview(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"border rounded-lg p-4 bg-gray-50\">\n            <div className=\"text-center border-b pb-4 mb-4\">\n              <h2 className=\"text-xl font-bold\">{configuracionEmpresa.nombreComercial}</h2>\n              <p className=\"text-sm text-gray-600\">{configuracionEmpresa.nombre}</p>\n              {configuracionEmpresa.configuracionFactura.mostrarRnc && (\n                <p className=\"text-xs\">RNC: {configuracionEmpresa.rnc}</p>\n              )}\n            </div>\n            \n            <div className=\"space-y-1 text-xs\">\n              {configuracionEmpresa.configuracionFactura.mostrarDireccion && (\n                <p>{configuracionEmpresa.direccion}</p>\n              )}\n              {configuracionEmpresa.configuracionFactura.mostrarTelefono && (\n                <p>Tel: {configuracionEmpresa.telefono}</p>\n              )}\n              {configuracionEmpresa.configuracionFactura.mostrarEmail && (\n                <p>Email: {configuracionEmpresa.email}</p>\n              )}\n            </div>\n            \n            <div className=\"border-t pt-4 mt-4\">\n              <p className=\"text-xs font-medium\">FACTURA #FAC-001</p>\n              <p className=\"text-xs\">Cliente: Juan P√©rez</p>\n              <p className=\"text-xs\">Fecha: {new Date().toLocaleDateString()}</p>\n            </div>\n            \n            <div className=\"border-t pt-2 mt-4 text-center\">\n              <p className=\"text-xs italic\">{configuracionEmpresa.configuracionFactura.mensajePie}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center\">\n                <Building2 className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Configuraci√≥n de Empresa</h1>\n                <p className=\"text-gray-600\">Datos generales y configuraci√≥n del negocio</p>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowPreview(true)}\n                className=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 font-medium flex items-center space-x-2\"\n              >\n                <Eye className=\"w-4 h-4\" />\n                <span>Vista Previa</span>\n              </button>\n              <button\n                onClick={guardarConfiguracion}\n                disabled={!hasChanges}\n                className={`px-6 py-3 rounded-lg font-medium flex items-center space-x-2 ${\n                  hasChanges \n                    ? 'bg-blue-600 text-white hover:bg-blue-700' \n                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                }`}\n              >\n                <Save className=\"w-5 h-5\" />\n                <span>Guardar Cambios</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Pesta√±as */}\n        <div className=\"bg-white rounded-xl shadow-sm border mb-6\">\n          <div className=\"border-b\">\n            <nav className=\"flex space-x-8 px-6\">\n              {tabs.map((tab) => {\n                const IconComponent = tab.icon;\n                return (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`py-4 px-2 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                      activeTab === tab.id\n                        ? 'border-blue-500 text-blue-600'\n                        : 'border-transparent text-gray-500 hover:text-gray-700'\n                    }`}\n                  >\n                    <IconComponent className=\"w-4 h-4\" />\n                    <span>{tab.label}</span>\n                  </button>\n                );\n              })}\n            </nav>\n          </div>\n\n          <div className=\"p-6\">\n            {/* Pesta√±a Informaci√≥n General */}\n            {activeTab === 'general' && (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nombre de la Empresa *</label>\n                    <input\n                      type=\"text\"\n                      value={configuracionEmpresa.nombre}\n                      onChange={(e) => handleChange('nombre', e.target.value)}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Ej: CleanWash Lavander√≠a S.R.L.\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nombre Comercial</label>\n                    <input\n                      type=\"text\"\n                      value={configuracionEmpresa.nombreComercial}\n                      onChange={(e) => handleChange('nombreComercial', e.target.value)}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Ej: CleanWash\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">RNC</label>\n                    <input\n                      type=\"text\"\n                      value={configuracionEmpresa.rnc}\n                      onChange={(e) => handleChange('rnc', e.target.value)}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Ej: 131-12345-6\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Sitio Web</label>\n                    <input\n                      type=\"text\"\n                      value={configuracionEmpresa.website}\n                      onChange={(e) => handleChange('website', e.target.value)}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Ej: www.empresa.com\"\n                    />\n                  </div>\n                </div>\n\n                {/* Logo */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Logo de la Empresa</label>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-20 h-20 bg-gray-100 rounded-lg flex items-center justify-center border-2 border-dashed border-gray-300\">\n                      {logoPreview ? (\n                        <img src={logoPreview} alt=\"Logo\" className=\"w-full h-full object-contain rounded-lg\" />\n                      ) : (\n                        <Camera className=\"w-8 h-8 text-gray-400\" />\n                      )}\n                    </div>\n                    <div>\n                      <input\n                        type=\"file\"\n                        id=\"logo-upload\"\n                        accept=\"image/*\"\n                        onChange={handleLogoUpload}\n                        className=\"hidden\"\n                      />\n                      <label\n                        htmlFor=\"logo-upload\"\n                        className=\"px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 cursor-pointer flex items-center space-x-2\"\n                      >\n                        <Upload className=\"w-4 h-4\" />\n                        <span>Subir Logo</span>\n                      </label>\n                      <p className=\"text-xs text-gray-500 mt-1\">PNG, JPG hasta 5MB</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Pesta√±a Contacto y Ubicaci√≥n */}\n            {activeTab === 'contacto' && (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email Principal *</label>\n                    <div className=\"relative\">\n                      <Mail className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                      <input\n                        type=\"email\"\n                        value={configuracionEmpresa.email}\n                        onChange={(e) => handleChange('email', e.target.value)}\n                        className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"admin@empresa.com\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tel√©fono Principal *</label>\n                    <div className=\"relative\">\n                      <Phone className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                      <input\n                        type=\"tel\"\n                        value={configuracionEmpresa.telefono}\n                        onChange={(e) => handleChange('telefono', e.target.value)}\n                        className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"809-000-0000\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tel√©fono Secundario</label>\n                    <div className=\"relative\">\n                      <Phone className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                      <input\n                        type=\"tel\"\n                        value={configuracionEmpresa.telefono2}\n                        onChange={(e) => handleChange('telefono2', e.target.value)}\n                        className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"809-000-0001\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Sucursal</label>\n                    <input\n                      type=\"text\"\n                      value={configuracionEmpresa.sucursal}\n                      onChange={(e) => handleChange('sucursal', e.target.value)}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Ej: Sucursal Centro\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Direcci√≥n Completa</label>\n                  <div className=\"relative\">\n                    <MapPin className=\"w-5 h-5 text-gray-400 absolute left-3 top-3\" />\n                    <textarea\n                      value={configuracionEmpresa.direccion}\n                      onChange={(e) => handleChange('direccion', e.target.value)}\n                      rows={3}\n                      className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Av. Principal #123, Sector Centro, Santo Domingo\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Ciudad</label>\n                    <input\n                      type=\"text\"\n                      value={configuracionEmpresa.ciudad}\n                      onChange={(e) => handleChange('ciudad', e.target.value)}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Santo Domingo\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Provincia</label>\n                    <input\n                      type=\"text\"\n                      value={configuracionEmpresa.provincia}\n                      onChange={(e) => handleChange('provincia', e.target.value)}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Distrito Nacional\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">C√≥digo Postal</label>\n                    <input\n                      type=\"text\"\n                      value={configuracionEmpresa.codigoPostal}\n                      onChange={(e) => handleChange('codigoPostal', e.target.value)}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"10101\"\n                    />\n                  </div>\n                </div>\n\n                {/* Redes Sociales */}\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Redes Sociales</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Facebook</label>\n                      <input\n                        type=\"text\"\n                        value={configuracionEmpresa.redesSociales.facebook}\n                        onChange={(e) => handleChange('facebook', e.target.value, 'redesSociales')}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"@empresa\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Instagram</label>\n                      <input\n                        type=\"text\"\n                        value={configuracionEmpresa.redesSociales.instagram}\n                        onChange={(e) => handleChange('instagram', e.target.value, 'redesSociales')}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"@empresa\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">WhatsApp Business</label>\n                      <input\n                        type=\"text\"\n                        value={configuracionEmpresa.redesSociales.whatsapp}\n                        onChange={(e) => handleChange('whatsapp', e.target.value, 'redesSociales')}\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                        placeholder=\"8095550000\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Pesta√±a Horarios */}\n            {activeTab === 'horarios' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Horarios de Atenci√≥n</h3>\n                  <div className=\"space-y-4\">\n                    {Object.entries(configuracionEmpresa.horarios).map(([dia, horario]) => (\n                      <div key={dia} className=\"flex items-center space-x-4 p-4 bg-gray-50 rounded-lg\">\n                        <div className=\"w-24\">\n                          <span className=\"font-medium text-gray-900\">{diasSemana[dia]}</span>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2\">\n                          <input\n                            type=\"checkbox\"\n                            checked={horario.activo}\n                            onChange={(e) => {\n                              const nuevosHorarios = {\n                                ...configuracionEmpresa.horarios,\n                                [dia]: { ...horario, activo: e.target.checked }\n                              };\n                              handleChange('horarios', nuevosHorarios);\n                            }}\n                            className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                          />\n                          <span className=\"text-sm text-gray-600\">Abierto</span>\n                        </div>\n                        \n                        {horario.activo && (\n                          <>\n                            <div>\n                              <label className=\"block text-xs text-gray-600 mb-1\">Apertura</label>\n                              <input\n                                type=\"time\"\n                                value={horario.apertura}\n                                onChange={(e) => {\n                                  const nuevosHorarios = {\n                                    ...configuracionEmpresa.horarios,\n                                    [dia]: { ...horario, apertura: e.target.value }\n                                  };\n                                  handleChange('horarios', nuevosHorarios);\n                                }}\n                                className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm\"\n                              />\n                            </div>\n                            \n                            <div>\n                              <label className=\"block text-xs text-gray-600 mb-1\">Cierre</label>\n                              <input\n                                type=\"time\"\n                                value={horario.cierre}\n                                onChange={(e) => {\n                                  const nuevosHorarios = {\n                                    ...configuracionEmpresa.horarios,\n                                    [dia]: { ...horario, cierre: e.target.value }\n                                  };\n                                  handleChange('horarios', nuevosHorarios);\n                                }}\n                                className=\"px-3 py-2 border border-gray-300 rounded-lg text-sm\"\n                              />\n                            </div>\n                          </>\n                        )}\n                        \n                        {!horario.activo && (\n                          <span className=\"text-red-600 text-sm font-medium\">Cerrado</span>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Pesta√±a Configuraci√≥n de Factura */}\n            {activeTab === 'facturacion' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Configuraci√≥n de Factura</h3>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">Mostrar RNC en facturas</p>\n                        <p className=\"text-sm text-gray-600\">Incluir n√∫mero de RNC en las facturas impresas</p>\n                      </div>\n                      <label className=\"flex items-center cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={configuracionEmpresa.configuracionFactura.mostrarRnc}\n                          onChange={(e) => handleChange('mostrarRnc', e.target.checked, 'configuracionFactura')}\n                          className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                        />\n                      </label>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">Mostrar direcci√≥n en facturas</p>\n                        <p className=\"text-sm text-gray-600\">Incluir direcci√≥n completa en las facturas</p>\n                      </div>\n                      <label className=\"flex items-center cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={configuracionEmpresa.configuracionFactura.mostrarDireccion}\n                          onChange={(e) => handleChange('mostrarDireccion', e.target.checked, 'configuracionFactura')}\n                          className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                        />\n                      </label>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">Mostrar tel√©fono en facturas</p>\n                        <p className=\"text-sm text-gray-600\">Incluir n√∫mero de tel√©fono en las facturas</p>\n                      </div>\n                      <label className=\"flex items-center cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={configuracionEmpresa.configuracionFactura.mostrarTelefono}\n                          onChange={(e) => handleChange('mostrarTelefono', e.target.checked, 'configuracionFactura')}\n                          className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                        />\n                      </label>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-gray-900\">Mostrar email en facturas</p>\n                        <p className=\"text-sm text-gray-600\">Incluir direcci√≥n de email en las facturas</p>\n                      </div>\n                      <label className=\"flex items-center cursor-pointer\">\n                        <input\n                          type=\"checkbox\"\n                          checked={configuracionEmpresa.configuracionFactura.mostrarEmail}\n                          onChange={(e) => handleChange('mostrarEmail', e.target.checked, 'configuracionFactura')}\n                          className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n                        />\n                      </label>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Mensaje al pie de factura</label>\n                    <textarea\n                      value={configuracionEmpresa.configuracionFactura.mensajePie}\n                      onChange={(e) => handleChange('mensajePie', e.target.value, 'configuracionFactura')}\n                      rows={3}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                      placeholder=\"Mensaje que aparecer√° al final de cada factura\"\n                    />\n                    <p className=\"text-xs text-gray-500 mt-1\">Este mensaje aparecer√° al final de todas las facturas impresas</p>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Informaci√≥n adicional */}\n        {hasChanges && (\n          <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4\">\n            <div className=\"flex\">\n              <AlertCircle className=\"w-5 h-5 text-yellow-600 mr-3 mt-0.5\" />\n              <div>\n                <h3 className=\"text-sm font-medium text-yellow-800\">Cambios sin guardar</h3>\n                <p className=\"text-sm text-yellow-700 mt-1\">\n                  Has realizado cambios en la configuraci√≥n. No olvides guardar para aplicar los cambios.\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Modales */}\n      <Modal />\n      <FacturaPreview />\n    </div>\n  );\n};\n\nexport default ConfiguracionEmpresa;","size_bytes":30862},"attached_assets/configuracion_mensajes-9_1757470217527.tsx":{"content":"import React, { useState } from 'react';\nimport { ArrowLeft, Save, MessageCircle, Send, Eye, Copy, RotateCcw, Settings, FileText, Clock, CheckCircle, User, Phone, Calendar, DollarSign, Package } from 'lucide-react';\n\nconst ConfiguracionMensajes = () => {\n  const [configuracion, setConfiguracion] = useState({\n    pedidoListo: {\n      activo: true,\n      titulo: \"üéâ ¬°Tu pedido est√° listo!\",\n      mensaje: `Hola {cliente_nombre}! üëã\n\n¬°Excelentes noticias! Tu pedido #{factura_numero} est√° listo para recoger.\n\nüìã *Detalles del pedido:*\n‚Ä¢ Fecha de entrega: {fecha_entrega}\n‚Ä¢ Total de prendas: {total_prendas}\n‚Ä¢ Total a pagar: RD$ {total_pagar}\n\nüè™ *Informaci√≥n de recogida:*\n‚Ä¢ Direcci√≥n: {empresa_direccion}\n‚Ä¢ Horario: {empresa_horario}\n‚Ä¢ Tel√©fono: {empresa_telefono}\n\n¬°Gracias por confiar en nosotros! ‚ú®\n\n_{empresa_nombre}_`,\n      envioAutomatico: true,\n      horaEnvio: \"09:00\"\n    },\n    facturaWhatsApp: {\n      activo: true,\n      titulo: \"üìÑ Factura de tu pedido\",\n      mensaje: `Hola {cliente_nombre}! üëã\n\nAqu√≠ tienes la factura de tu pedido #{factura_numero}\n\nüìã *Resumen del pedido:*\n‚Ä¢ Fecha: {fecha_factura}\n‚Ä¢ Prendas: {total_prendas}\n‚Ä¢ Subtotal: RD$ {subtotal}\n‚Ä¢ ITBIS (18%): RD$ {itbis}\n‚Ä¢ *Total: RD$ {total}*\n\nüí≥ *Estado del pago:* {estado_pago}\nüìÖ *Fecha de entrega:* {fecha_entrega}\n\n{detalles_articulos}\n\n¬°Gracias por elegirnos! üôè\n\n_{empresa_nombre}_\nüìç {empresa_direccion}\nüìû {empresa_telefono}`,\n      incluirDetalles: true,\n      formatoDetalles: \"‚Ä¢ {cantidad}x {prenda} - {servicio} - RD$ {precio}\"\n    },\n    recordatorios: {\n      activo: true,\n      diasAntes: 1,\n      titulo: \"‚è∞ Recordatorio de entrega\",\n      mensaje: `Hola {cliente_nombre}! üëã\n\nTe recordamos que ma√±ana {fecha_entrega} es la fecha de entrega de tu pedido #{factura_numero}\n\nüìã *Detalles:*\n‚Ä¢ Total de prendas: {total_prendas}\n‚Ä¢ Total: RD$ {total_pagar}\n‚Ä¢ Estado: {estado_pedido}\n\nüè™ *Horario de atenci√≥n:*\n{empresa_horario}\n\n¬°Te esperamos! üòä\n\n_{empresa_nombre}_`\n    },\n    pagosPendientes: {\n      activo: false,\n      diasRecordatorio: 3,\n      titulo: \"üí∞ Recordatorio de pago pendiente\",\n      mensaje: `Hola {cliente_nombre}! üëã\n\nTienes un pago pendiente por tu pedido #{factura_numero}\n\nüí≥ *Detalles del pago:*\n‚Ä¢ Monto pendiente: RD$ {monto_pendiente}\n‚Ä¢ Fecha del pedido: {fecha_factura}\n‚Ä¢ D√≠as pendiente: {dias_pendiente}\n\nüè™ Puedes realizar el pago en:\nüìç {empresa_direccion}\nüìû {empresa_telefono}\n\n¬°Gracias por tu comprensi√≥n! üôè\n\n_{empresa_nombre}_`\n    }\n  });\n\n  const [tipoMensaje, setTipoMensaje] = useState('pedidoListo');\n  const [vistaPrevia, setVistaPrevia] = useState(false);\n  const [mensajePreview, setMensajePreview] = useState('');\n\n  const variables = {\n    cliente_nombre: \"Mar√≠a Gonz√°lez\",\n    factura_numero: \"FAC-2024-001234\",\n    fecha_entrega: \"15 de Enero, 2024\",\n    fecha_factura: \"12 de Enero, 2024\",\n    total_prendas: \"8\",\n    total_pagar: \"850.00\",\n    total: \"850.00\",\n    subtotal: \"720.34\",\n    itbis: \"129.66\",\n    estado_pago: \"Pagado ‚úÖ\",\n    estado_pedido: \"Listo para entrega\",\n    monto_pendiente: \"425.00\",\n    dias_pendiente: \"3\",\n    empresa_nombre: \"Lavander√ça Express\",\n    empresa_direccion: \"Av. 27 de Febrero #123, Santo Domingo\",\n    empresa_telefono: \"(809) 555-0123\",\n    empresa_horario: \"Lun-Vie: 8:00 AM - 6:00 PM\\nS√°b: 8:00 AM - 2:00 PM\",\n    detalles_articulos: \"‚Ä¢ 2x Camisa - Lavado y Planchado - RD$ 120.00\\n‚Ä¢ 1x Pantal√≥n - Lavado y Planchado - RD$ 80.00\\n‚Ä¢ 3x Camiseta - Solo Lavado - RD$ 150.00\\n‚Ä¢ 2x Vestido - Completo - RD$ 500.00\"\n  };\n\n  const plantillasMessages = {\n    pedidoListo: {\n      simple: `Hola {cliente_nombre}! Tu pedido #{factura_numero} est√° listo para recoger. Total: RD$ {total_pagar}. {empresa_nombre}`,\n      profesional: `Estimado/a {cliente_nombre}, le informamos que su pedido #{factura_numero} est√° listo para ser retirado. Monto total: RD$ {total_pagar}. Horario: {empresa_horario}. {empresa_nombre}`,\n      amigable: `¬°Hola {cliente_nombre}! üéâ ¬°Tu ropa est√° lista y te qued√≥ incre√≠ble! Pedido #{factura_numero} - Total: RD$ {total_pagar}. ¬°Te esperamos! ‚ú® {empresa_nombre}`\n    },\n    facturaWhatsApp: {\n      simple: `Factura #{factura_numero} - {cliente_nombre}. Total: RD$ {total} - {estado_pago}. {empresa_nombre}`,\n      profesional: `Estimado/a {cliente_nombre}, adjuntamos la factura #{factura_numero} por un monto de RD$ {total}. Estado: {estado_pago}. {empresa_nombre}`,\n      detallado: `Factura #{factura_numero}\\nCliente: {cliente_nombre}\\nPrendas: {total_prendas}\\nSubtotal: RD$ {subtotal}\\nITBIS: RD$ {itbis}\\nTotal: RD$ {total}\\nEstado: {estado_pago}\\n{empresa_nombre}`\n    }\n  };\n\n  const reemplazarVariables = (mensaje) => {\n    let resultado = mensaje;\n    Object.keys(variables).forEach(variable => {\n      const regex = new RegExp(`{${variable}}`, 'g');\n      resultado = resultado.replace(regex, variables[variable]);\n    });\n    return resultado;\n  };\n\n  const mostrarVistaPrevia = () => {\n    const mensaje = configuracion[tipoMensaje].mensaje;\n    setMensajePreview(reemplazarVariables(mensaje));\n    setVistaPrevia(true);\n  };\n\n  const aplicarPlantilla = (plantilla) => {\n    setConfiguracion({\n      ...configuracion,\n      [tipoMensaje]: {\n        ...configuracion[tipoMensaje],\n        mensaje: plantilla\n      }\n    });\n  };\n\n  const copiarMensaje = () => {\n    navigator.clipboard.writeText(mensajePreview);\n    alert('Mensaje copiado al portapapeles');\n  };\n\n  const enviarPruebaWhatsApp = () => {\n    const numeroEjemplo = \"18091234567\";\n    const mensaje = encodeURIComponent(mensajePreview);\n    const url = `https://wa.me/${numeroEjemplo}?text=${mensaje}`;\n    window.open(url, '_blank');\n  };\n\n  const restaurarDefecto = () => {\n    if (confirm('¬øEst√°s seguro de que quieres restaurar el mensaje por defecto?')) {\n      // Aqu√≠ ir√≠a la l√≥gica para restaurar los valores por defecto\n      alert('Mensaje restaurado por defecto');\n    }\n  };\n\n  const guardarConfiguracion = () => {\n    console.log('Configuraci√≥n guardada:', configuracion);\n    alert('Configuraci√≥n de mensajes guardada exitosamente');\n  };\n\n  const tiposMenu = [\n    { key: 'pedidoListo', label: 'Pedido Listo', icon: CheckCircle, color: 'text-green-600' },\n    { key: 'facturaWhatsApp', label: 'Factura WhatsApp', icon: FileText, color: 'text-blue-600' },\n    { key: 'recordatorios', label: 'Recordatorios', icon: Clock, color: 'text-orange-600' },\n    { key: 'pagosPendientes', label: 'Pagos Pendientes', icon: DollarSign, color: 'text-red-600' }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <button className=\"text-gray-600 hover:text-gray-900\">\n                <ArrowLeft className=\"w-6 h-6\" />\n              </button>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Configuraci√≥n de Mensajes</h1>\n                <p className=\"text-sm text-gray-600\">WhatsApp y notificaciones autom√°ticas</p>\n              </div>\n            </div>\n            <button\n              onClick={guardarConfiguracion}\n              className=\"bg-green-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 hover:bg-green-700\"\n            >\n              <Save className=\"w-5 h-5\" />\n              <span>Guardar Cambios</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Menu Lateral */}\n          <div className=\"bg-white rounded-lg shadow-sm p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Tipos de Mensaje</h3>\n            <div className=\"space-y-2\">\n              {tiposMenu.map((tipo) => {\n                const IconoTipo = tipo.icon;\n                return (\n                  <button\n                    key={tipo.key}\n                    onClick={() => setTipoMensaje(tipo.key)}\n                    className={`w-full flex items-center space-x-3 px-3 py-2 rounded-lg text-left transition-colors ${\n                      tipoMensaje === tipo.key\n                        ? 'bg-blue-50 text-blue-700 border border-blue-200'\n                        : 'text-gray-600 hover:bg-gray-50'\n                    }`}\n                  >\n                    <IconoTipo className={`w-5 h-5 ${tipo.color}`} />\n                    <span className=\"text-sm font-medium\">{tipo.label}</span>\n                    {configuracion[tipo.key].activo && (\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full ml-auto\"></div>\n                    )}\n                  </button>\n                );\n              })}\n            </div>\n\n            {/* Variables Disponibles */}\n            <div className=\"mt-8\">\n              <h4 className=\"text-sm font-semibold text-gray-900 mb-3\">Variables Disponibles</h4>\n              <div className=\"space-y-1 max-h-60 overflow-y-auto\">\n                {Object.keys(variables).map((variable) => (\n                  <div\n                    key={variable}\n                    className=\"text-xs bg-gray-100 px-2 py-1 rounded cursor-pointer hover:bg-gray-200\"\n                    onClick={() => {\n                      navigator.clipboard.writeText(`{${variable}}`);\n                      alert(`Variable {${variable}} copiada`);\n                    }}\n                  >\n                    <code>{`{${variable}}`}</code>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Contenido Principal */}\n          <div className=\"lg:col-span-3 space-y-6\">\n            {/* Configuraci√≥n del Mensaje Actual */}\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\n              <div className=\"flex items-center justify-between mb-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">\n                  {tiposMenu.find(t => t.key === tipoMensaje)?.label}\n                </h3>\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"activo\"\n                    checked={configuracion[tipoMensaje].activo}\n                    onChange={(e) => setConfiguracion({\n                      ...configuracion,\n                      [tipoMensaje]: {\n                        ...configuracion[tipoMensaje],\n                        activo: e.target.checked\n                      }\n                    })}\n                    className=\"rounded\"\n                  />\n                  <label htmlFor=\"activo\" className=\"text-sm text-gray-700\">Activo</label>\n                </div>\n              </div>\n\n              {/* Configuraciones espec√≠ficas */}\n              <div className=\"space-y-4 mb-6\">\n                {/* T√≠tulo del mensaje */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    T√≠tulo del mensaje\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={configuracion[tipoMensaje].titulo}\n                    onChange={(e) => setConfiguracion({\n                      ...configuracion,\n                      [tipoMensaje]: {\n                        ...configuracion[tipoMensaje],\n                        titulo: e.target.value\n                      }\n                    })}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  />\n                </div>\n\n                {/* Configuraciones espec√≠ficas por tipo */}\n                {tipoMensaje === 'pedidoListo' && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"envioAutomatico\"\n                        checked={configuracion.pedidoListo.envioAutomatico}\n                        onChange={(e) => setConfiguracion({\n                          ...configuracion,\n                          pedidoListo: {\n                            ...configuracion.pedidoListo,\n                            envioAutomatico: e.target.checked\n                          }\n                        })}\n                        className=\"rounded\"\n                      />\n                      <label htmlFor=\"envioAutomatico\" className=\"text-sm text-gray-700\">\n                        Env√≠o autom√°tico\n                      </label>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        Hora de env√≠o\n                      </label>\n                      <input\n                        type=\"time\"\n                        value={configuracion.pedidoListo.horaEnvio}\n                        onChange={(e) => setConfiguracion({\n                          ...configuracion,\n                          pedidoListo: {\n                            ...configuracion.pedidoListo,\n                            horaEnvio: e.target.value\n                          }\n                        })}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {tipoMensaje === 'facturaWhatsApp' && (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"incluirDetalles\"\n                        checked={configuracion.facturaWhatsApp.incluirDetalles}\n                        onChange={(e) => setConfiguracion({\n                          ...configuracion,\n                          facturaWhatsApp: {\n                            ...configuracion.facturaWhatsApp,\n                            incluirDetalles: e.target.checked\n                          }\n                        })}\n                        className=\"rounded\"\n                      />\n                      <label htmlFor=\"incluirDetalles\" className=\"text-sm text-gray-700\">\n                        Incluir detalles de art√≠culos\n                      </label>\n                    </div>\n                    {configuracion.facturaWhatsApp.incluirDetalles && (\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                          Formato de detalles\n                        </label>\n                        <input\n                          type=\"text\"\n                          value={configuracion.facturaWhatsApp.formatoDetalles}\n                          onChange={(e) => setConfiguracion({\n                            ...configuracion,\n                            facturaWhatsApp: {\n                              ...configuracion.facturaWhatsApp,\n                              formatoDetalles: e.target.value\n                            }\n                          })}\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                          placeholder=\"‚Ä¢ {cantidad}x {prenda} - {servicio} - RD$ {precio}\"\n                        />\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {tipoMensaje === 'recordatorios' && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      D√≠as antes de la entrega\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={configuracion.recordatorios.diasAntes}\n                      onChange={(e) => setConfiguracion({\n                        ...configuracion,\n                        recordatorios: {\n                          ...configuracion.recordatorios,\n                          diasAntes: parseInt(e.target.value) || 1\n                        }\n                      })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      min=\"1\"\n                      max=\"7\"\n                    />\n                  </div>\n                )}\n\n                {tipoMensaje === 'pagosPendientes' && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      D√≠as para recordatorio de pago\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={configuracion.pagosPendientes.diasRecordatorio}\n                      onChange={(e) => setConfiguracion({\n                        ...configuracion,\n                        pagosPendientes: {\n                          ...configuracion.pagosPendientes,\n                          diasRecordatorio: parseInt(e.target.value) || 3\n                        }\n                      })}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                      min=\"1\"\n                      max=\"30\"\n                    />\n                  </div>\n                )}\n              </div>\n\n              {/* Plantillas R√°pidas */}\n              {plantillasMessages[tipoMensaje] && (\n                <div className=\"mb-6\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Plantillas r√°pidas\n                  </label>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n                    {Object.entries(plantillasMessages[tipoMensaje]).map(([tipo, plantilla]) => (\n                      <button\n                        key={tipo}\n                        onClick={() => aplicarPlantilla(plantilla)}\n                        className=\"px-3 py-2 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 capitalize\"\n                      >\n                        {tipo}\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Editor de Mensaje */}\n              <div>\n                <div className=\"flex items-center justify-between mb-2\">\n                  <label className=\"block text-sm font-medium text-gray-700\">\n                    Mensaje\n                  </label>\n                  <div className=\"flex space-x-2\">\n                    <button\n                      onClick={restaurarDefecto}\n                      className=\"text-sm text-gray-500 hover:text-gray-700 flex items-center space-x-1\"\n                    >\n                      <RotateCcw className=\"w-4 h-4\" />\n                      <span>Restaurar</span>\n                    </button>\n                  </div>\n                </div>\n                <textarea\n                  value={configuracion[tipoMensaje].mensaje}\n                  onChange={(e) => setConfiguracion({\n                    ...configuracion,\n                    [tipoMensaje]: {\n                      ...configuracion[tipoMensaje],\n                      mensaje: e.target.value\n                    }\n                  })}\n                  rows={12}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm\"\n                  placeholder=\"Escribe tu mensaje aqu√≠...\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Usa variables como {`{cliente_nombre}, {factura_numero}, {total_pagar}`} para personalizar el mensaje\n                </p>\n              </div>\n\n              {/* Botones de Acci√≥n */}\n              <div className=\"flex flex-wrap gap-3 mt-6\">\n                <button\n                  onClick={mostrarVistaPrevia}\n                  className=\"bg-blue-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2 hover:bg-blue-700\"\n                >\n                  <Eye className=\"w-4 h-4\" />\n                  <span>Vista Previa</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Modal de Vista Previa */}\n      {vistaPrevia && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg max-w-md w-full max-h-screen overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-900\">Vista Previa del Mensaje</h3>\n                <button\n                  onClick={() => setVistaPrevia(false)}\n                  className=\"text-gray-400 hover:text-gray-600\"\n                >\n                  ‚úï\n                </button>\n              </div>\n\n              {/* Simulaci√≥n de WhatsApp */}\n              <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-4\">\n                <div className=\"flex items-center space-x-2 mb-3\">\n                  <MessageCircle className=\"w-5 h-5 text-green-600\" />\n                  <span className=\"text-sm font-medium text-green-800\">WhatsApp Preview</span>\n                </div>\n                <div className=\"bg-white rounded-lg p-3 shadow-sm\">\n                  <pre className=\"whitespace-pre-wrap text-sm text-gray-900 font-sans\">\n                    {mensajePreview}\n                  </pre>\n                  <div className=\"flex justify-end mt-2\">\n                    <span className=\"text-xs text-gray-500\">\n                      {new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-3\">\n                <button\n                  onClick={copiarMensaje}\n                  className=\"flex items-center space-x-2 px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200\"\n                >\n                  <Copy className=\"w-4 h-4\" />\n                  <span>Copiar</span>\n                </button>\n                <button\n                  onClick={enviarPruebaWhatsApp}\n                  className=\"flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700\"\n                >\n                  <Send className=\"w-4 h-4\" />\n                  <span>Enviar Prueba</span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ConfiguracionMensajes;","size_bytes":23214},"attached_assets/configuracion_metodos_pago-10_1757470217522.tsx":{"content":"import React, { useState } from 'react';\nimport { Save, Plus, Edit2, Trash2, CreditCard, Smartphone, Building, DollarSign, ToggleLeft, ToggleRight, Eye } from 'lucide-react';\n\nconst ConfiguracionMetodosPago = () => {\n  const [metodosPago, setMetodosPago] = useState([\n    {\n      id: 1,\n      nombre: 'Efectivo',\n      icono: 'üíµ',\n      activo: true,\n      requiereReferencia: false,\n      comision: 0,\n      descripcion: 'Pago en efectivo',\n      mostrarEnFactura: true,\n      color: '#10B981'\n    },\n    {\n      id: 2,\n      nombre: 'Tarjeta de Cr√©dito',\n      icono: 'üí≥',\n      activo: true,\n      requiereReferencia: true,\n      comision: 3.5,\n      descripcion: 'Visa, Mastercard, American Express',\n      mostrarEnFactura: true,\n      color: '#3B82F6'\n    },\n    {\n      id: 3,\n      nombre: 'Tarjeta de D√©bito',\n      icono: 'üèß',\n      activo: true,\n      requiereReferencia: true,\n      comision: 2.0,\n      descripcion: 'D√©bito bancario',\n      mostrarEnFactura: true,\n      color: '#8B5CF6'\n    },\n    {\n      id: 4,\n      nombre: 'Transferencia Bancaria',\n      icono: 'üè¶',\n      activo: true,\n      requiereReferencia: true,\n      comision: 0,\n      descripcion: 'Transferencia entre cuentas',\n      mostrarEnFactura: true,\n      color: '#F59E0B'\n    },\n    {\n      id: 5,\n      nombre: 'Pago M√≥vil',\n      icono: 'üì±',\n      activo: false,\n      requiereReferencia: true,\n      comision: 1.5,\n      descripcion: 'Pagos por celular',\n      mostrarEnFactura: true,\n      color: '#EF4444'\n    }\n  ]);\n\n  const [modalAbierto, setModalAbierto] = useState(false);\n  const [metodoEditando, setMetodoEditando] = useState(null);\n  const [busqueda, setBusqueda] = useState('');\n  const [filtroActivo, setFiltroActivo] = useState('todos');\n\n  const iconosDisponibles = [\n    { emoji: 'üíµ', nombre: 'Efectivo' },\n    { emoji: 'üí≥', nombre: 'Tarjeta' },\n    { emoji: 'üèß', nombre: 'D√©bito' },\n    { emoji: 'üè¶', nombre: 'Banco' },\n    { emoji: 'üì±', nombre: 'M√≥vil' },\n    { emoji: 'üí∞', nombre: 'Dinero' },\n    { emoji: 'üé´', nombre: 'Vale' },\n    { emoji: 'üîó', nombre: 'Enlace' },\n    { emoji: '‚ö°', nombre: 'R√°pido' },\n    { emoji: 'üåê', nombre: 'Online' }\n  ];\n\n  const coloresDisponibles = [\n    '#10B981', '#3B82F6', '#8B5CF6', '#F59E0B', \n    '#EF4444', '#6B7280', '#EC4899', '#14B8A6'\n  ];\n\n  const abrirModal = (metodo = null) => {\n    setMetodoEditando(metodo || {\n      id: Date.now(),\n      nombre: '',\n      icono: 'üí≥',\n      activo: true,\n      requiereReferencia: false,\n      comision: 0,\n      descripcion: '',\n      mostrarEnFactura: true,\n      color: '#3B82F6'\n    });\n    setModalAbierto(true);\n  };\n\n  const guardarMetodo = () => {\n    if (!metodoEditando.nombre) return;\n\n    if (metodoEditando.id && metodosPago.find(m => m.id === metodoEditando.id)) {\n      setMetodosPago(metodosPago.map(m => \n        m.id === metodoEditando.id ? metodoEditando : m\n      ));\n    } else {\n      setMetodosPago([...metodosPago, { ...metodoEditando, id: Date.now() }]);\n    }\n    \n    setModalAbierto(false);\n    setMetodoEditando(null);\n  };\n\n  const eliminarMetodo = (id) => {\n    if (confirm('¬øEst√° seguro de eliminar este m√©todo de pago?')) {\n      setMetodosPago(metodosPago.filter(m => m.id !== id));\n    }\n  };\n\n  const toggleActivo = (id) => {\n    setMetodosPago(metodosPago.map(m => \n      m.id === id ? { ...m, activo: !m.activo } : m\n    ));\n  };\n\n  const metodosFiltrados = metodosPago.filter(metodo => {\n    const cumpleBusqueda = metodo.nombre.toLowerCase().includes(busqueda.toLowerCase()) ||\n                          metodo.descripcion.toLowerCase().includes(busqueda.toLowerCase());\n    \n    const cumpleFiltro = filtroActivo === 'todos' || \n                        (filtroActivo === 'activos' && metodo.activo) ||\n                        (filtroActivo === 'inactivos' && !metodo.activo);\n    \n    return cumpleBusqueda && cumpleFiltro;\n  });\n\n  const estadisticas = {\n    total: metodosPago.length,\n    activos: metodosPago.filter(m => m.activo).length,\n    inactivos: metodosPago.filter(m => !m.activo).length,\n    conComision: metodosPago.filter(m => m.comision > 0).length\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 bg-gray-50 min-h-screen\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow-md p-6 mb-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-800 flex items-center gap-3\">\n              <CreditCard className=\"text-blue-600\" size={32} />\n              Configuraci√≥n de M√©todos de Pago\n            </h1>\n            <p className=\"text-gray-600 mt-2\">Gestiona los m√©todos de pago disponibles en el sistema</p>\n          </div>\n          <button\n            onClick={() => abrirModal()}\n            className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2\"\n          >\n            <Plus size={20} />\n            Agregar M√©todo\n          </button>\n        </div>\n      </div>\n\n      {/* Estad√≠sticas */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <div className=\"bg-white p-4 rounded-lg shadow-md\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"bg-blue-100 p-3 rounded-lg\">\n              <CreditCard className=\"text-blue-600\" size={24} />\n            </div>\n            <div>\n              <p className=\"text-gray-600 text-sm\">Total M√©todos</p>\n              <p className=\"text-2xl font-bold text-gray-800\">{estadisticas.total}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-4 rounded-lg shadow-md\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"bg-green-100 p-3 rounded-lg\">\n              <ToggleRight className=\"text-green-600\" size={24} />\n            </div>\n            <div>\n              <p className=\"text-gray-600 text-sm\">Activos</p>\n              <p className=\"text-2xl font-bold text-green-600\">{estadisticas.activos}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-4 rounded-lg shadow-md\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"bg-red-100 p-3 rounded-lg\">\n              <ToggleLeft className=\"text-red-600\" size={24} />\n            </div>\n            <div>\n              <p className=\"text-gray-600 text-sm\">Inactivos</p>\n              <p className=\"text-2xl font-bold text-red-600\">{estadisticas.inactivos}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white p-4 rounded-lg shadow-md\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"bg-orange-100 p-3 rounded-lg\">\n              <DollarSign className=\"text-orange-600\" size={24} />\n            </div>\n            <div>\n              <p className=\"text-gray-600 text-sm\">Con Comisi√≥n</p>\n              <p className=\"text-2xl font-bold text-orange-600\">{estadisticas.conComision}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filtros y b√∫squeda */}\n      <div className=\"bg-white rounded-lg shadow-md p-4 mb-6\">\n        <div className=\"flex flex-col md:flex-row gap-4\">\n          <div className=\"flex-1\">\n            <input\n              type=\"text\"\n              placeholder=\"Buscar m√©todos de pago...\"\n              value={busqueda}\n              onChange={(e) => setBusqueda(e.target.value)}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setFiltroActivo('todos')}\n              className={`px-4 py-2 rounded-lg transition-colors ${\n                filtroActivo === 'todos' ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              Todos ({estadisticas.total})\n            </button>\n            <button\n              onClick={() => setFiltroActivo('activos')}\n              className={`px-4 py-2 rounded-lg transition-colors ${\n                filtroActivo === 'activos' ? 'bg-green-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              Activos ({estadisticas.activos})\n            </button>\n            <button\n              onClick={() => setFiltroActivo('inactivos')}\n              className={`px-4 py-2 rounded-lg transition-colors ${\n                filtroActivo === 'inactivos' ? 'bg-red-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n              }`}\n            >\n              Inactivos ({estadisticas.inactivos})\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Lista de m√©todos de pago */}\n      <div className=\"bg-white rounded-lg shadow-md overflow-hidden\">\n        {metodosFiltrados.length === 0 ? (\n          <div className=\"p-8 text-center\">\n            <CreditCard className=\"mx-auto text-gray-400 mb-4\" size={64} />\n            <h3 className=\"text-xl font-semibold text-gray-600 mb-2\">No hay m√©todos de pago</h3>\n            <p className=\"text-gray-500 mb-4\">\n              {busqueda ? 'No se encontraron m√©todos que coincidan con la b√∫squeda' : 'A√∫n no has agregado m√©todos de pago'}\n            </p>\n            <button\n              onClick={() => abrirModal()}\n              className=\"bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              Agregar Primer M√©todo\n            </button>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">M√©todo</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Estado</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Comisi√≥n</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Referencia</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Factura</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {metodosFiltrados.map((metodo) => (\n                  <tr key={metodo.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center gap-3\">\n                        <div \n                          className=\"w-10 h-10 rounded-lg flex items-center justify-center text-white text-lg\"\n                          style={{ backgroundColor: metodo.color }}\n                        >\n                          {metodo.icono}\n                        </div>\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">{metodo.nombre}</div>\n                          <div className=\"text-sm text-gray-500\">{metodo.descripcion}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <button\n                        onClick={() => toggleActivo(metodo.id)}\n                        className={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-xs font-medium transition-colors ${\n                          metodo.activo \n                            ? 'bg-green-100 text-green-800 hover:bg-green-200' \n                            : 'bg-red-100 text-red-800 hover:bg-red-200'\n                        }`}\n                      >\n                        {metodo.activo ? <ToggleRight size={14} /> : <ToggleLeft size={14} />}\n                        {metodo.activo ? 'Activo' : 'Inactivo'}\n                      </button>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                        metodo.comision > 0 ? 'bg-orange-100 text-orange-800' : 'bg-green-100 text-green-800'\n                      }`}>\n                        {metodo.comision}%\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                        metodo.requiereReferencia ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'\n                      }`}>\n                        {metodo.requiereReferencia ? 'Requerida' : 'No requerida'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                        metodo.mostrarEnFactura ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'\n                      }`}>\n                        {metodo.mostrarEnFactura ? 'Visible' : 'Oculto'}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <div className=\"flex items-center gap-2\">\n                        <button\n                          onClick={() => abrirModal(metodo)}\n                          className=\"text-blue-600 hover:text-blue-900 p-1 rounded\"\n                          title=\"Editar\"\n                        >\n                          <Edit2 size={16} />\n                        </button>\n                        <button\n                          onClick={() => eliminarMetodo(metodo.id)}\n                          className=\"text-red-600 hover:text-red-900 p-1 rounded\"\n                          title=\"Eliminar\"\n                        >\n                          <Trash2 size={16} />\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n\n      {/* Modal para agregar/editar m√©todo */}\n      {modalAbierto && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-screen overflow-y-auto\">\n            <div className=\"p-6\">\n              <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">\n                {metodoEditando.id && metodosPago.find(m => m.id === metodoEditando.id) ? 'Editar' : 'Agregar'} M√©todo de Pago\n              </h2>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {/* Informaci√≥n b√°sica */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Nombre del m√©todo *\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={metodoEditando.nombre}\n                      onChange={(e) => setMetodoEditando({...metodoEditando, nombre: e.target.value})}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Ej: Tarjeta de Cr√©dito\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Descripci√≥n\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={metodoEditando.descripcion}\n                      onChange={(e) => setMetodoEditando({...metodoEditando, descripcion: e.target.value})}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"Ej: Visa, Mastercard, American Express\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Comisi√≥n (%)\n                    </label>\n                    <input\n                      type=\"number\"\n                      step=\"0.1\"\n                      min=\"0\"\n                      max=\"100\"\n                      value={metodoEditando.comision}\n                      onChange={(e) => setMetodoEditando({...metodoEditando, comision: parseFloat(e.target.value) || 0})}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                      placeholder=\"0.0\"\n                    />\n                  </div>\n                </div>\n\n                {/* Configuraciones */}\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Icono\n                    </label>\n                    <div className=\"grid grid-cols-5 gap-2\">\n                      {iconosDisponibles.map((icono) => (\n                        <button\n                          key={icono.emoji}\n                          onClick={() => setMetodoEditando({...metodoEditando, icono: icono.emoji})}\n                          className={`p-3 rounded-lg border-2 text-xl hover:bg-gray-50 transition-colors ${\n                            metodoEditando.icono === icono.emoji ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n                          }`}\n                          title={icono.nombre}\n                        >\n                          {icono.emoji}\n                        </button>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Color\n                    </label>\n                    <div className=\"grid grid-cols-4 gap-2\">\n                      {coloresDisponibles.map((color) => (\n                        <button\n                          key={color}\n                          onClick={() => setMetodoEditando({...metodoEditando, color})}\n                          className={`w-12 h-12 rounded-lg border-2 transition-colors ${\n                            metodoEditando.color === color ? 'border-gray-800' : 'border-gray-200'\n                          }`}\n                          style={{ backgroundColor: color }}\n                        />\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <label className=\"flex items-center gap-3\">\n                      <input\n                        type=\"checkbox\"\n                        checked={metodoEditando.activo}\n                        onChange={(e) => setMetodoEditando({...metodoEditando, activo: e.target.checked})}\n                        className=\"w-4 h-4 text-blue-600\"\n                      />\n                      <span className=\"text-sm font-medium text-gray-700\">M√©todo activo</span>\n                    </label>\n\n                    <label className=\"flex items-center gap-3\">\n                      <input\n                        type=\"checkbox\"\n                        checked={metodoEditando.requiereReferencia}\n                        onChange={(e) => setMetodoEditando({...metodoEditando, requiereReferencia: e.target.checked})}\n                        className=\"w-4 h-4 text-blue-600\"\n                      />\n                      <span className=\"text-sm font-medium text-gray-700\">Requiere referencia</span>\n                    </label>\n\n                    <label className=\"flex items-center gap-3\">\n                      <input\n                        type=\"checkbox\"\n                        checked={metodoEditando.mostrarEnFactura}\n                        onChange={(e) => setMetodoEditando({...metodoEditando, mostrarEnFactura: e.target.checked})}\n                        className=\"w-4 h-4 text-blue-600\"\n                      />\n                      <span className=\"text-sm font-medium text-gray-700\">Mostrar en factura</span>\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              {/* Vista previa */}\n              <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n                <h3 className=\"text-sm font-medium text-gray-700 mb-3\">Vista previa:</h3>\n                <div className=\"flex items-center gap-3\">\n                  <div \n                    className=\"w-10 h-10 rounded-lg flex items-center justify-center text-white text-lg\"\n                    style={{ backgroundColor: metodoEditando.color }}\n                  >\n                    {metodoEditando.icono}\n                  </div>\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900\">{metodoEditando.nombre || 'Nombre del m√©todo'}</div>\n                    <div className=\"text-sm text-gray-500\">{metodoEditando.descripcion || 'Descripci√≥n del m√©todo'}</div>\n                  </div>\n                  {metodoEditando.comision > 0 && (\n                    <span className=\"ml-auto bg-orange-100 text-orange-800 text-xs font-medium px-2.5 py-0.5 rounded-full\">\n                      {metodoEditando.comision}%\n                    </span>\n                  )}\n                </div>\n              </div>\n\n              {/* Botones */}\n              <div className=\"flex justify-end gap-3 mt-6\">\n                <button\n                  onClick={() => setModalAbierto(false)}\n                  className=\"px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors\"\n                >\n                  Cancelar\n                </button>\n                <button\n                  onClick={guardarMetodo}\n                  disabled={!metodoEditando.nombre}\n                  className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center gap-2\"\n                >\n                  <Save size={16} />\n                  Guardar\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ConfiguracionMetodosPago;","size_bytes":22948},"attached_assets/configuracion_servicios-6_1757470217532.tsx":{"content":"import React, { useState } from 'react';\nimport { \n  Settings, \n  Plus, \n  Edit3, \n  Trash2, \n  Save, \n  X, \n  Check, \n  Package, \n  DollarSign,\n  Wrench,\n  Copy,\n  RefreshCw,\n  AlertCircle,\n  FileText,\n  Calculator,\n  TrendingUp,\n  Eye,\n  EyeOff\n} from 'lucide-react';\n\nconst ConfiguracionServicios = () => {\n  const [servicios, setServicios] = useState([\n    { \n      id: 1, \n      nombre: 'PANTALONES', \n      precios: { lavado: 80, planchado: 60, lavadoYPlanchado: 110 },\n      activo: true,\n      categoria: 'Ropa B√°sica',\n      fechaCreacion: '2024-01-15'\n    },\n    { \n      id: 2, \n      nombre: 'CAMISAS', \n      precios: { lavado: 60, planchado: 40, lavadoYPlanchado: 85 },\n      activo: true,\n      categoria: 'Ropa B√°sica',\n      fechaCreacion: '2024-01-15'\n    },\n    { \n      id: 3, \n      nombre: 'VESTIDOS', \n      precios: { lavado: 150, planchado: 120, lavadoYPlanchado: 220 },\n      activo: true,\n      categoria: 'Ropa Especial',\n      fechaCreacion: '2024-01-15'\n    },\n    { \n      id: 4, \n      nombre: 'BLUSAS', \n      precios: { lavado: 60, planchado: 40, lavadoYPlanchado: 85 },\n      activo: true,\n      categoria: 'Ropa B√°sica',\n      fechaCreacion: '2024-01-15'\n    },\n    { \n      id: 5, \n      nombre: 'S√ÅBANAS', \n      precios: { lavado: 100, planchado: 80, lavadoYPlanchado: 150 },\n      activo: true,\n      categoria: 'Hogar',\n      fechaCreacion: '2024-01-15'\n    },\n    { \n      id: 6, \n      nombre: 'TOALLAS (GRANDE)', \n      precios: { lavado: 40, planchado: 30, lavadoYPlanchado: 60 },\n      activo: true,\n      categoria: 'Hogar',\n      fechaCreacion: '2024-01-15'\n    }\n  ]);\n\n  const [showServiceModal, setShowServiceModal] = useState(false);\n  const [showBulkEditModal, setShowBulkEditModal] = useState(false);\n  const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);\n  const [selectedService, setSelectedService] = useState(null);\n  const [serviceToDelete, setServiceToDelete] = useState(null);\n  const [modalMessage, setModalMessage] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterCategory, setFilterCategory] = useState('all');\n  const [showInactive, setShowInactive] = useState(false);\n\n  const [servicioForm, setServicioForm] = useState({\n    nombre: '',\n    categoria: 'Ropa B√°sica',\n    lavado: 0,\n    planchado: 0,\n    lavadoYPlanchado: 0\n  });\n\n  const [bulkUpdateForm, setBulkUpdateForm] = useState({\n    tipo: 'porcentaje',\n    valor: 0,\n    categoria: 'all',\n    servicio: 'all'\n  });\n\n  const categorias = [\n    'Ropa B√°sica',\n    'Ropa Especial', \n    'Hogar',\n    'Delicados',\n    'Tintorer√≠a'\n  ];\n\n  const formatCurrency = (amount) => `RD$${amount.toFixed(2)}`;\n\n  const openModal = (message) => {\n    setModalMessage(message);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalMessage('');\n  };\n\n  const openServiceModal = (service = null) => {\n    if (service) {\n      setSelectedService(service);\n      setServicioForm({\n        nombre: service.nombre,\n        categoria: service.categoria,\n        lavado: service.precios.lavado,\n        planchado: service.precios.planchado,\n        lavadoYPlanchado: service.precios.lavadoYPlanchado\n      });\n    } else {\n      setSelectedService(null);\n      setServicioForm({\n        nombre: '',\n        categoria: 'Ropa B√°sica',\n        lavado: 0,\n        planchado: 0,\n        lavadoYPlanchado: 0\n      });\n    }\n    setShowServiceModal(true);\n  };\n\n  const saveService = () => {\n    if (!servicioForm.nombre || servicioForm.lavado <= 0) {\n      openModal(\"Complete el nombre y al menos el precio de lavado.\");\n      return;\n    }\n\n    const precios = {\n      lavado: servicioForm.lavado,\n      planchado: servicioForm.planchado || servicioForm.lavado * 0.75,\n      lavadoYPlanchado: servicioForm.lavadoYPlanchado || servicioForm.lavado * 1.4\n    };\n\n    if (selectedService) {\n      setServicios(servicios.map(serv => \n        serv.id === selectedService.id \n          ? { \n              ...serv, \n              nombre: servicioForm.nombre.toUpperCase(),\n              categoria: servicioForm.categoria,\n              precios\n            }\n          : serv\n      ));\n      openModal(\"Servicio actualizado exitosamente.\");\n    } else {\n      const newService = {\n        id: Math.max(...servicios.map(s => s.id)) + 1,\n        nombre: servicioForm.nombre.toUpperCase(),\n        categoria: servicioForm.categoria,\n        precios,\n        activo: true,\n        fechaCreacion: new Date().toISOString().split('T')[0]\n      };\n      setServicios([...servicios, newService]);\n      openModal(`Servicio \"${newService.nombre}\" creado exitosamente.`);\n    }\n\n    setShowServiceModal(false);\n    setSelectedService(null);\n  };\n\n  const toggleServiceStatus = (serviceId) => {\n    setServicios(servicios.map(serv => \n      serv.id === serviceId \n        ? { ...serv, activo: !serv.activo }\n        : serv\n    ));\n    \n    const service = servicios.find(serv => serv.id === serviceId);\n    openModal(`Servicio ${service.activo ? 'desactivado' : 'activado'} exitosamente.`);\n  };\n\n  const deleteService = () => {\n    if (!serviceToDelete) return;\n    \n    setServicios(servicios.filter(serv => serv.id !== serviceToDelete.id));\n    openModal(\"Servicio eliminado exitosamente.\");\n    setShowDeleteConfirmModal(false);\n    setServiceToDelete(null);\n  };\n\n  const duplicateService = (service) => {\n    const newService = {\n      id: Math.max(...servicios.map(s => s.id)) + 1,\n      nombre: `${service.nombre} (COPIA)`,\n      categoria: service.categoria,\n      precios: { ...service.precios },\n      activo: true,\n      fechaCreacion: new Date().toISOString().split('T')[0]\n    };\n    setServicios([...servicios, newService]);\n    openModal(`Servicio \"${newService.nombre}\" duplicado exitosamente.`);\n  };\n\n  const applyBulkPriceUpdate = () => {\n    if (bulkUpdateForm.valor <= 0) {\n      openModal(\"Ingrese un valor v√°lido mayor a 0.\");\n      return;\n    }\n\n    let serviciosActualizados = [...servicios];\n    let serviciosAfectados = 0;\n\n    serviciosActualizados = serviciosActualizados.map(servicio => {\n      if (bulkUpdateForm.categoria !== 'all' && servicio.categoria !== bulkUpdateForm.categoria) {\n        return servicio;\n      }\n\n      serviciosAfectados++;\n      const nuevosPrecios = { ...servicio.precios };\n\n      const serviciosAActualizar = bulkUpdateForm.servicio === 'all' \n        ? ['lavado', 'planchado', 'lavadoYPlanchado']\n        : [bulkUpdateForm.servicio];\n\n      serviciosAActualizar.forEach(tipoServicio => {\n        if (bulkUpdateForm.tipo === 'porcentaje') {\n          nuevosPrecios[tipoServicio] = Math.round(\n            nuevosPrecios[tipoServicio] * (1 + bulkUpdateForm.valor / 100)\n          );\n        } else {\n          nuevosPrecios[tipoServicio] = Math.round(\n            nuevosPrecios[tipoServicio] + bulkUpdateForm.valor\n          );\n        }\n      });\n\n      return { ...servicio, precios: nuevosPrecios };\n    });\n\n    setServicios(serviciosActualizados);\n    setShowBulkEditModal(false);\n    openModal(`Precios actualizados en ${serviciosAfectados} servicios.`);\n  };\n\n  const filteredServices = servicios.filter(service => {\n    const matchesSearch = service.nombre.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = filterCategory === 'all' || service.categoria === filterCategory;\n    const matchesStatus = showInactive || service.activo;\n    return matchesSearch && matchesCategory && matchesStatus;\n  });\n\n  const stats = {\n    total: servicios.length,\n    activos: servicios.filter(s => s.activo).length,\n    inactivos: servicios.filter(s => !s.activo).length,\n    categorias: [...new Set(servicios.map(s => s.categoria))].length,\n    promedioLavado: servicios.reduce((sum, s) => sum + s.precios.lavado, 0) / servicios.length,\n    promedioCompleto: servicios.reduce((sum, s) => sum + s.precios.lavadoYPlanchado, 0) / servicios.length\n  };\n\n  const Modal = () => {\n    if (!isModalOpen) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Check className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Configuraci√≥n de Servicios</h3>\n            <p className=\"text-gray-600 mb-6\">{modalMessage}</p>\n            <button\n              onClick={closeModal}\n              className=\"w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 font-medium transition-colors\"\n            >\n              Aceptar\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const ServiceModal = () => {\n    if (!showServiceModal) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">\n              {selectedService ? 'Editar Servicio' : 'Nuevo Servicio'}\n            </h3>\n            <button\n              onClick={() => setShowServiceModal(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nombre del Servicio *</label>\n              <input\n                type=\"text\"\n                value={servicioForm.nombre}\n                onChange={(e) => setServicioForm({...servicioForm, nombre: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500\"\n                placeholder=\"Ej: CHAQUETAS\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Categor√≠a *</label>\n              <select\n                value={servicioForm.categoria}\n                onChange={(e) => setServicioForm({...servicioForm, categoria: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500\"\n              >\n                {categorias.map((categoria) => (\n                  <option key={categoria} value={categoria}>\n                    {categoria}\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <div className=\"grid grid-cols-1 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Precio Lavado *</label>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={servicioForm.lavado}\n                  onChange={(e) => setServicioForm({...servicioForm, lavado: parseFloat(e.target.value) || 0})}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500\"\n                  placeholder=\"0.00\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Precio Planchado</label>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={servicioForm.planchado}\n                  onChange={(e) => setServicioForm({...servicioForm, planchado: parseFloat(e.target.value) || 0})}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500\"\n                  placeholder=\"Auto-calculado si se deja vac√≠o\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Precio Completo</label>\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  step=\"0.01\"\n                  value={servicioForm.lavadoYPlanchado}\n                  onChange={(e) => setServicioForm({...servicioForm, lavadoYPlanchado: parseFloat(e.target.value) || 0})}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500\"\n                  placeholder=\"Auto-calculado si se deja vac√≠o\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <h4 className=\"font-semibold text-blue-900 mb-2\">Vista Previa de Precios:</h4>\n              <div className=\"space-y-1 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span>Lavado:</span>\n                  <span className=\"font-medium\">{formatCurrency(servicioForm.lavado)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Planchado:</span>\n                  <span className=\"font-medium\">\n                    {formatCurrency(servicioForm.planchado || servicioForm.lavado * 0.75)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Completo:</span>\n                  <span className=\"font-medium\">\n                    {formatCurrency(servicioForm.lavadoYPlanchado || servicioForm.lavado * 1.4)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 mt-6\">\n            <button\n              onClick={() => setShowServiceModal(false)}\n              className=\"flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium\"\n            >\n              Cancelar\n            </button>\n            <button\n              onClick={saveService}\n              className=\"flex-1 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 font-medium\"\n            >\n              {selectedService ? 'Actualizar' : 'Crear'} Servicio\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const BulkEditModal = () => {\n    if (!showBulkEditModal) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">Actualizaci√≥n Masiva de Precios</h3>\n            <button\n              onClick={() => setShowBulkEditModal(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tipo de Ajuste</label>\n              <select\n                value={bulkUpdateForm.tipo}\n                onChange={(e) => setBulkUpdateForm({...bulkUpdateForm, tipo: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"porcentaje\">Aumento/Descuento Porcentual</option>\n                <option value=\"fijo\">Aumento/Descuento Fijo</option>\n              </select>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Valor {bulkUpdateForm.tipo === 'porcentaje' ? '(%)' : '(RD$)'}\n              </label>\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                value={bulkUpdateForm.valor}\n                onChange={(e) => setBulkUpdateForm({...bulkUpdateForm, valor: parseFloat(e.target.value) || 0})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                placeholder={bulkUpdateForm.tipo === 'porcentaje' ? \"Ej: 10 (para 10%)\" : \"Ej: 5.00\"}\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Categor√≠a</label>\n              <select\n                value={bulkUpdateForm.categoria}\n                onChange={(e) => setBulkUpdateForm({...bulkUpdateForm, categoria: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"all\">Todas las categor√≠as</option>\n                {categorias.map((categoria) => (\n                  <option key={categoria} value={categoria}>\n                    {categoria}\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tipo de Servicio</label>\n              <select\n                value={bulkUpdateForm.servicio}\n                onChange={(e) => setBulkUpdateForm({...bulkUpdateForm, servicio: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"all\">Todos los servicios</option>\n                <option value=\"lavado\">Solo Lavado</option>\n                <option value=\"planchado\">Solo Planchado</option>\n                <option value=\"lavadoYPlanchado\">Solo Completo</option>\n              </select>\n            </div>\n            \n            <div className=\"bg-yellow-50 p-4 rounded-lg\">\n              <div className=\"flex\">\n                <AlertCircle className=\"w-5 h-5 text-yellow-600 mr-2 mt-0.5\" />\n                <div className=\"text-sm text-yellow-700\">\n                  <p className=\"font-medium\">Vista previa del cambio:</p>\n                  <p>\n                    {bulkUpdateForm.tipo === 'porcentaje' \n                      ? `${bulkUpdateForm.valor > 0 ? 'Aumentar' : 'Reducir'} precios en ${Math.abs(bulkUpdateForm.valor)}%`\n                      : `${bulkUpdateForm.valor > 0 ? 'Aumentar' : 'Reducir'} precios en ${formatCurrency(Math.abs(bulkUpdateForm.valor))}`\n                    }\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 mt-6\">\n            <button\n              onClick={() => setShowBulkEditModal(false)}\n              className=\"flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium\"\n            >\n              Cancelar\n            </button>\n            <button\n              onClick={applyBulkPriceUpdate}\n              className=\"flex-1 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\"\n            >\n              Aplicar Cambios\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const DeleteConfirmModal = () => {\n    if (!showDeleteConfirmModal) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <AlertCircle className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Eliminar Servicio</h3>\n            <p className=\"text-gray-600 mb-6\">\n              ¬øEst√° seguro que desea eliminar el servicio <strong>{serviceToDelete?.nombre}</strong>? \n              Esta acci√≥n no se puede deshacer.\n            </p>\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowDeleteConfirmModal(false)}\n                className=\"flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium\"\n              >\n                Cancelar\n              </button>\n              <button\n                onClick={deleteService}\n                className=\"flex-1 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium\"\n              >\n                Eliminar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-purple-600 rounded-xl flex items-center justify-center\">\n                <Settings className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Configuraci√≥n de Servicios</h1>\n                <p className=\"text-gray-600\">Gestiona precios y servicios de la lavander√≠a</p>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowBulkEditModal(true)}\n                className=\"px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 font-medium flex items-center space-x-2\"\n              >\n                <Calculator className=\"w-4 h-4\" />\n                <span>Actualizaci√≥n Masiva</span>\n              </button>\n              <button\n                onClick={() => openServiceModal()}\n                className=\"px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 font-medium flex items-center space-x-2\"\n              >\n                <Plus className=\"w-5 h-5\" />\n                <span>Nuevo Servicio</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Estad√≠sticas */}\n        <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4 mb-6\">\n          <div className=\"bg-white rounded-xl shadow-sm border p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Package className=\"w-5 h-5 text-blue-600\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-xs font-medium text-gray-500\">Total</p>\n                <p className=\"text-lg font-bold text-gray-900\">{stats.total}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                <Check className=\"w-5 h-5 text-green-600\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-xs font-medium text-gray-500\">Activos</p>\n                <p className=\"text-lg font-bold text-gray-900\">{stats.activos}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                <X className=\"w-5 h-5 text-red-600\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-xs font-medium text-gray-500\">Inactivos</p>\n                <p className=\"text-lg font-bold text-gray-900\">{stats.inactivos}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <Wrench className=\"w-5 h-5 text-purple-600\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-xs font-medium text-gray-500\">Categor√≠as</p>\n                <p className=\"text-lg font-bold text-gray-900\">{stats.categorias}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\n                <DollarSign className=\"w-5 h-5 text-orange-600\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-xs font-medium text-gray-500\">Prom. Lavado</p>\n                <p className=\"text-lg font-bold text-gray-900\">{formatCurrency(stats.promedioLavado)}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"w-10 h-10 bg-indigo-100 rounded-lg flex items-center justify-center\">\n                <TrendingUp className=\"w-5 h-5 text-indigo-600\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-xs font-medium text-gray-500\">Prom. Completo</p>\n                <p className=\"text-lg font-bold text-gray-900\">{formatCurrency(stats.promedioCompleto)}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Filtros y b√∫squeda */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"md:col-span-2\">\n              <div className=\"relative\">\n                <Package className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Buscar servicio por nombre...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <select\n                value={filterCategory}\n                onChange={(e) => setFilterCategory(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500\"\n              >\n                <option value=\"all\">Todas las categor√≠as</option>\n                {categorias.map((categoria) => (\n                  <option key={categoria} value={categoria}>{categoria}</option>\n                ))}\n              </select>\n            </div>\n            \n            <div className=\"flex items-center\">\n              <label className=\"flex items-center space-x-2 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={showInactive}\n                  onChange={(e) => setShowInactive(e.target.checked)}\n                  className=\"w-4 h-4 text-purple-600 border-gray-300 rounded focus:ring-purple-500\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">Mostrar inactivos</span>\n              </label>\n            </div>\n          </div>\n        </div>\n\n        {/* Lista de servicios */}\n        <div className=\"bg-white rounded-xl shadow-sm border overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gradient-to-r from-gray-50 to-gray-100\">\n                <tr className=\"border-b\">\n                  <th className=\"text-left py-4 px-6 text-sm font-semibold text-gray-700\">Servicio</th>\n                  <th className=\"text-center py-4 px-4 text-sm font-semibold text-gray-700\">Lavado</th>\n                  <th className=\"text-center py-4 px-4 text-sm font-semibold text-gray-700\">Planchado</th>\n                  <th className=\"text-center py-4 px-4 text-sm font-semibold text-gray-700\">Completo</th>\n                  <th className=\"text-center py-4 px-4 text-sm font-semibold text-gray-700\">Estado</th>\n                  <th className=\"text-center py-4 px-4 text-sm font-semibold text-gray-700\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody>\n                {filteredServices.map((servicio, index) => (\n                  <tr key={servicio.id} className={`border-b hover:bg-gray-50 ${index % 2 === 0 ? 'bg-white' : 'bg-gray-25'} ${!servicio.activo ? 'opacity-60' : ''}`}>\n                    <td className=\"py-4 px-6\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center mr-3\">\n                          <Package className=\"w-5 h-5 text-purple-600\" />\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-900\">{servicio.nombre}</span>\n                          <p className=\"text-sm text-gray-500\">{servicio.categoria}</p>\n                        </div>\n                      </div>\n                    </td>\n                    \n                    <td className=\"py-4 px-4 text-center\">\n                      <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800\">\n                        {formatCurrency(servicio.precios.lavado)}\n                      </span>\n                    </td>\n                    \n                    <td className=\"py-4 px-4 text-center\">\n                      <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800\">\n                        {formatCurrency(servicio.precios.planchado)}\n                      </span>\n                    </td>\n                    \n                    <td className=\"py-4 px-4 text-center\">\n                      <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800\">\n                        {formatCurrency(servicio.precios.lavadoYPlanchado)}\n                      </span>\n                    </td>\n                    \n                    <td className=\"py-4 px-4 text-center\">\n                      <button\n                        onClick={() => toggleServiceStatus(servicio.id)}\n                        className={`px-3 py-1 text-xs font-medium rounded-full cursor-pointer hover:opacity-80 ${\n                          servicio.activo \n                            ? 'bg-green-100 text-green-800' \n                            : 'bg-red-100 text-red-800'\n                        }`}\n                      >\n                        {servicio.activo ? 'Activo' : 'Inactivo'}\n                      </button>\n                    </td>\n                    \n                    <td className=\"py-4 px-4 text-center\">\n                      <div className=\"flex items-center justify-center space-x-2\">\n                        <button\n                          onClick={() => openServiceModal(servicio)}\n                          className=\"text-blue-600 hover:text-blue-900\"\n                          title=\"Editar servicio\"\n                        >\n                          <Edit3 className=\"w-4 h-4\" />\n                        </button>\n                        \n                        <button\n                          onClick={() => duplicateService(servicio)}\n                          className=\"text-green-600 hover:text-green-900\"\n                          title=\"Duplicar servicio\"\n                        >\n                          <Copy className=\"w-4 h-4\" />\n                        </button>\n                        \n                        <button\n                          onClick={() => {\n                            setServiceToDelete(servicio);\n                            setShowDeleteConfirmModal(true);\n                          }}\n                          className=\"text-red-600 hover:text-red-900\"\n                          title=\"Eliminar servicio\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          \n          {filteredServices.length === 0 && (\n            <div className=\"text-center py-12 text-gray-500\">\n              <Package className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p>No se encontraron servicios con los filtros aplicados</p>\n              <button\n                onClick={() => openServiceModal()}\n                className=\"mt-4 text-purple-600 hover:text-purple-800 font-medium\"\n              >\n                Crear primer servicio\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* Resumen por categor√≠as */}\n        <div className=\"mt-6 bg-white rounded-xl shadow-sm border p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Resumen por Categor√≠as</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {categorias.map((categoria) => {\n              const serviciosCategoria = servicios.filter(s => s.categoria === categoria && s.activo);\n              const promedioLavado = serviciosCategoria.length > 0 \n                ? serviciosCategoria.reduce((sum, s) => sum + s.precios.lavado, 0) / serviciosCategoria.length \n                : 0;\n              const promedioCompleto = serviciosCategoria.length > 0 \n                ? serviciosCategoria.reduce((sum, s) => sum + s.precios.lavadoYPlanchado, 0) / serviciosCategoria.length \n                : 0;\n              \n              return (\n                <div key={categoria} className=\"p-4 bg-gray-50 rounded-lg\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">{categoria}</h4>\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Servicios:</span>\n                      <span className=\"font-medium\">{serviciosCategoria.length}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Prom. Lavado:</span>\n                      <span className=\"font-medium\">{formatCurrency(promedioLavado)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Prom. Completo:</span>\n                      <span className=\"font-medium\">{formatCurrency(promedioCompleto)}</span>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Modales */}\n      <Modal />\n      <ServiceModal />\n      <BulkEditModal />\n      <DeleteConfirmModal />\n    </div>\n  );\n};\n\nexport default ConfiguracionServicios;","size_bytes":35546},"attached_assets/gestion_ordenes-4_1757470217534.tsx":{"content":"import React, { useState } from 'react';\nimport { \n  FileText, \n  Search, \n  Filter, \n  Eye, \n  Edit3, \n  DollarSign, \n  Send, \n  Printer, \n  X, \n  Check, \n  Clock, \n  Package, \n  AlertCircle,\n  Phone,\n  Mail,\n  Calendar,\n  User,\n  CreditCard,\n  Banknote,\n  Landmark,\n  RefreshCw,\n  CheckCircle,\n  XCircle,\n  PlayCircle\n} from 'lucide-react';\n\nconst GestionOrdenes = () => {\n  // Estados principales\n  const [orders, setOrders] = useState([\n    {\n      id: 'INV-009',\n      numero: 'FAC-009',\n      cliente: 'Juan P√©rez',\n      telefono: '8091502025',\n      correo: 'juan@email.com',\n      total: 378.00,\n      subtotal: 320.34,\n      itbis: 57.66,\n      estado: 'Recibido',\n      fechaRecibido: '2025-09-04',\n      fechaRetiro: '2025-09-06',\n      horaRecibido: '16:53',\n      metodoPago: 'Pendiente',\n      empleado: 'Sistema',\n      pagado: false,\n      entregado: false,\n      articulos: [\n        { nombre: 'CAMISAS', servicio: 'lavadoYPlanchado', cantidad: 2, precio: 85 },\n        { nombre: 'PANTALONES', servicio: 'lavado', cantidad: 1, precio: 80 }\n      ]\n    },\n    {\n      id: 'INV-008',\n      numero: 'FAC-008',\n      cliente: 'Mar√≠a Garc√≠a',\n      telefono: '8095551234',\n      correo: 'maria@email.com',\n      total: 378.00,\n      subtotal: 320.34,\n      itbis: 57.66,\n      estado: 'En Proceso',\n      fechaRecibido: '2025-09-03',\n      fechaRetiro: '2025-09-05',\n      horaRecibido: '19:21',\n      metodoPago: 'Efectivo',\n      empleado: 'Mar√≠a Fern√°ndez',\n      pagado: true,\n      entregado: false,\n      articulos: [\n        { nombre: 'VESTIDOS', servicio: 'lavadoYPlanchado', cantidad: 1, precio: 220 },\n        { nombre: 'BLUSAS', servicio: 'planchado', cantidad: 2, precio: 40 }\n      ]\n    },\n    {\n      id: 'INV-007',\n      numero: 'FAC-007',\n      cliente: 'Pedro L√≥pez',\n      telefono: '8097779999',\n      correo: '',\n      total: 290.00,\n      subtotal: 245.76,\n      itbis: 44.24,\n      estado: 'Listo',\n      fechaRecibido: '2025-09-02',\n      fechaRetiro: '2025-09-04',\n      horaRecibido: '17:38',\n      metodoPago: 'Tarjeta',\n      empleado: 'Juan Carlos',\n      pagado: true,\n      entregado: false,\n      articulos: [\n        { nombre: 'S√ÅBANAS', servicio: 'lavadoYPlanchado', cantidad: 1, precio: 150 },\n        { nombre: 'TOALLAS (GRANDE)', servicio: 'lavado', cantidad: 3, precio: 40 }\n      ]\n    },\n    {\n      id: 'INV-006',\n      numero: 'FAC-006',\n      cliente: 'Ana Rodr√≠guez',\n      telefono: '8094445555',\n      correo: 'ana@email.com',\n      total: 195.50,\n      subtotal: 165.68,\n      itbis: 29.82,\n      estado: 'Entregado',\n      fechaRecibido: '2025-09-01',\n      fechaRetiro: '2025-09-03',\n      horaRecibido: '14:30',\n      metodoPago: 'Transferencia Bancaria',\n      empleado: 'Pedro Gonz√°lez',\n      pagado: true,\n      entregado: true,\n      fechaEntrega: '2025-09-03',\n      horaEntrega: '16:45',\n      articulos: [\n        { nombre: 'PANTALONES', servicio: 'lavadoYPlanchado', cantidad: 1, precio: 110 },\n        { nombre: 'CAMISAS', servicio: 'planchado', cantidad: 2, precio: 40 }\n      ]\n    },\n    {\n      id: 'INV-005',\n      numero: 'FAC-005',\n      cliente: 'Carlos Mendoza',\n      telefono: '8096667777',\n      correo: '',\n      total: 85.00,\n      subtotal: 72.03,\n      itbis: 12.97,\n      estado: 'Cancelado',\n      fechaRecibido: '2025-08-31',\n      fechaRetiro: '2025-09-02',\n      horaRecibido: '11:15',\n      metodoPago: 'Efectivo',\n      empleado: 'Mar√≠a Fern√°ndez',\n      pagado: false,\n      entregado: false,\n      fechaCancelacion: '2025-09-01',\n      motivoCancelacion: 'Cliente no recogi√≥ a tiempo',\n      articulos: [\n        { nombre: 'CAMISAS', servicio: 'lavado', cantidad: 1, precio: 60 }\n      ]\n    }\n  ]);\n\n  // Estados de modales y filtros\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterPayment, setFilterPayment] = useState('all');\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showStatusModal, setShowStatusModal] = useState(false);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [showCancelModal, setShowCancelModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [cancelReason, setCancelReason] = useState('');\n\n  // Configuraci√≥n de estados y m√©todos de pago\n  const estados = [\n    { id: 'Recibido', nombre: 'Recibido', color: 'blue', icon: Package },\n    { id: 'En Proceso', nombre: 'En Proceso', color: 'yellow', icon: RefreshCw },\n    { id: 'Listo', nombre: 'Listo', color: 'purple', icon: CheckCircle },\n    { id: 'Entregado', nombre: 'Entregado', color: 'green', icon: Check },\n    { id: 'Cancelado', nombre: 'Cancelado', color: 'red', icon: XCircle }\n  ];\n\n  const metodosPago = [\n    { id: 'Efectivo', nombre: 'Efectivo', icon: Banknote, color: 'green' },\n    { id: 'Tarjeta', nombre: 'Tarjeta', icon: CreditCard, color: 'blue' },\n    { id: 'Transferencia Bancaria', nombre: 'Transferencia Bancaria', icon: Landmark, color: 'indigo' },\n    { id: 'Pendiente', nombre: 'Pendiente', icon: Clock, color: 'yellow' }\n  ];\n\n  // Empleado logueado simulado\n  const empleadoLogueado = {\n    nombre: 'Juan Carlos',\n    rol: 'gerente'\n  };\n\n  // Funciones utilitarias\n  const formatCurrency = (amount) => `RD$${amount.toFixed(2)}`;\n\n  const openModal = (message) => {\n    setModalMessage(message);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalMessage('');\n  };\n\n  const getStatusColor = (estado) => {\n    const statusConfig = estados.find(s => s.id === estado);\n    return statusConfig ? statusConfig.color : 'gray';\n  };\n\n  const getPaymentColor = (metodoPago) => {\n    const paymentConfig = metodosPago.find(m => m.id === metodoPago);\n    return paymentConfig ? paymentConfig.color : 'gray';\n  };\n\n  // Funciones de filtrado\n  const filteredOrders = orders.filter(order => {\n    const matchesSearch = order.numero.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.cliente.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.telefono.includes(searchTerm);\n    \n    const matchesStatus = filterStatus === 'all' || order.estado === filterStatus;\n    const matchesPayment = filterPayment === 'all' || \n                          (filterPayment === 'paid' && order.pagado) ||\n                          (filterPayment === 'pending' && !order.pagado);\n    \n    return matchesSearch && matchesStatus && matchesPayment;\n  });\n\n  // Funciones de acciones\n  const verDetalles = (order) => {\n    setSelectedOrder(order);\n    setShowDetailsModal(true);\n  };\n\n  const cambiarEstado = (order, nuevoEstado) => {\n    if (nuevoEstado === 'Entregado' && !order.pagado) {\n      openModal(\"No se puede entregar sin cobrar. Cobre primero el pedido.\");\n      return;\n    }\n\n    const ordenesActualizadas = orders.map(o => \n      o.id === order.id \n        ? { \n            ...o, \n            estado: nuevoEstado,\n            ...(nuevoEstado === 'Entregado' && {\n              entregado: true,\n              fechaEntrega: new Date().toISOString().split('T')[0],\n              horaEntrega: new Date().toLocaleTimeString('es-ES', { hour: '2-digit', minute: '2-digit' })\n            })\n          }\n        : o\n    );\n    \n    setOrders(ordenesActualizadas);\n    setShowStatusModal(false);\n    openModal(`Estado cambiado a \"${nuevoEstado}\" exitosamente.`);\n  };\n\n  const cobrarPago = (order, metodoPago) => {\n    const ordenesActualizadas = orders.map(o => \n      o.id === order.id \n        ? { ...o, pagado: true, metodoPago: metodoPago }\n        : o\n    );\n    \n    setOrders(ordenesActualizadas);\n    setShowPaymentModal(false);\n    openModal(`Pago cobrado: ${metodoPago}`);\n  };\n\n  const cancelarOrden = () => {\n    if (!cancelReason.trim()) {\n      openModal(\"Debe proporcionar un motivo de cancelaci√≥n.\");\n      return;\n    }\n\n    if (empleadoLogueado.rol !== 'gerente') {\n      openModal(\"Solo los gerentes pueden cancelar √≥rdenes.\");\n      return;\n    }\n\n    const ordenesActualizadas = orders.map(o => \n      o.id === selectedOrder.id \n        ? { \n            ...o, \n            estado: 'Cancelado',\n            fechaCancelacion: new Date().toISOString().split('T')[0],\n            motivoCancelacion: cancelReason,\n            canceladoPor: empleadoLogueado.nombre\n          }\n        : o\n    );\n    \n    setOrders(ordenesActualizadas);\n    setShowCancelModal(false);\n    setCancelReason('');\n    openModal(`Orden ${selectedOrder.numero} cancelada exitosamente.`);\n  };\n\n  const enviarWhatsApp = (order) => {\n    const mensaje = `¬°Hola ${order.cliente}! Su pedido ${order.numero} est√° ${order.estado.toLowerCase()}. Total: ${formatCurrency(order.total)}. ¬°Gracias por confiar en nosotros!`;\n    const url = `https://wa.me/${order.telefono}?text=${encodeURIComponent(mensaje)}`;\n    window.open(url, '_blank');\n  };\n\n  const imprimirRecibo = (order) => {\n    const printWindow = window.open('', '_blank');\n    printWindow.document.write(`\n      <html>\n        <head>\n          <title>Recibo - ${order.numero}</title>\n          <style>\n            body { font-family: Arial, sans-serif; max-width: 400px; margin: 0; padding: 20px; }\n            .header { text-align: center; border-bottom: 2px solid #000; padding-bottom: 10px; margin-bottom: 20px; }\n            .section { margin: 15px 0; }\n            .item { display: flex; justify-content: space-between; margin: 5px 0; }\n            .total { font-weight: bold; font-size: 1.1em; border-top: 2px solid #000; padding-top: 10px; margin-top: 15px; }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h2>BILLTRACKY</h2>\n            <h3>RECIBO DE LAVANDER√çA</h3>\n            <p>Factura: ${order.numero}</p>\n          </div>\n          \n          <div class=\"section\">\n            <h4>DATOS DEL CLIENTE</h4>\n            <div class=\"item\"><span>Cliente:</span><span>${order.cliente}</span></div>\n            <div class=\"item\"><span>Tel√©fono:</span><span>${order.telefono}</span></div>\n            <div class=\"item\"><span>Recibido:</span><span>${order.fechaRecibido} ${order.horaRecibido}</span></div>\n            <div class=\"item\"><span>Entrega:</span><span>${order.fechaRetiro}</span></div>\n          </div>\n          \n          <div class=\"section\">\n            <h4>ART√çCULOS</h4>\n            ${order.articulos.map(art => \n              `<div class=\"item\"><span>${art.cantidad}x ${art.nombre} (${art.servicio})</span><span>${formatCurrency(art.cantidad * art.precio)}</span></div>`\n            ).join('')}\n          </div>\n          \n          <div class=\"section\">\n            <div class=\"item\"><span>Subtotal:</span><span>${formatCurrency(order.subtotal)}</span></div>\n            <div class=\"item\"><span>ITBIS (18%):</span><span>${formatCurrency(order.itbis)}</span></div>\n            <div class=\"total\">\n              <div class=\"item\"><span>TOTAL:</span><span>${formatCurrency(order.total)}</span></div>\n            </div>\n          </div>\n          \n          <div style=\"text-align: center; margin-top: 30px; font-size: 0.9em;\">\n            <p>Estado: ${order.estado}</p>\n            <p>M√©todo de Pago: ${order.metodoPago}</p>\n            <p>Atendido por: ${order.empleado}</p>\n          </div>\n        </body>\n      </html>\n    `);\n    printWindow.document.close();\n    printWindow.print();\n  };\n\n  // Componente Modal principal\n  const Modal = () => {\n    if (!isModalOpen) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Check className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Gesti√≥n de √ìrdenes</h3>\n            <p className=\"text-gray-600 mb-6\">{modalMessage}</p>\n            <button\n              onClick={closeModal}\n              className=\"w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n            >\n              Aceptar\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Modal de detalles de orden\n  const DetailsModal = () => {\n    if (!showDetailsModal || !selectedOrder) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-2xl w-full max-h-96 overflow-y-auto p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">Detalles de Orden</h3>\n            <button\n              onClick={() => setShowDetailsModal(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Informaci√≥n General</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Factura:</span>\n                    <span className=\"font-medium\">{selectedOrder.numero}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Cliente:</span>\n                    <span className=\"font-medium\">{selectedOrder.cliente}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Tel√©fono:</span>\n                    <span className=\"font-medium\">{selectedOrder.telefono}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Empleado:</span>\n                    <span className=\"font-medium\">{selectedOrder.empleado}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Fechas</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Recibido:</span>\n                    <span className=\"font-medium\">{selectedOrder.fechaRecibido} {selectedOrder.horaRecibido}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Entrega:</span>\n                    <span className=\"font-medium\">{selectedOrder.fechaRetiro}</span>\n                  </div>\n                  {selectedOrder.entregado && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Entregado:</span>\n                      <span className=\"font-medium text-green-600\">{selectedOrder.fechaEntrega} {selectedOrder.horaEntrega}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Estado y Pago</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Estado:</span>\n                    <span className={`px-3 py-1 text-xs font-medium rounded-full bg-${getStatusColor(selectedOrder.estado)}-100 text-${getStatusColor(selectedOrder.estado)}-800`}>\n                      {selectedOrder.estado}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-600\">Pago:</span>\n                    <span className={`px-3 py-1 text-xs font-medium rounded-full bg-${getPaymentColor(selectedOrder.metodoPago)}-100 text-${getPaymentColor(selectedOrder.metodoPago)}-800`}>\n                      {selectedOrder.metodoPago}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Pagado:</span>\n                    <span className={`font-medium ${selectedOrder.pagado ? 'text-green-600' : 'text-red-600'}`}>\n                      {selectedOrder.pagado ? 'S√≠' : 'No'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Totales</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Subtotal:</span>\n                    <span className=\"font-medium\">{formatCurrency(selectedOrder.subtotal)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">ITBIS:</span>\n                    <span className=\"font-medium\">{formatCurrency(selectedOrder.itbis)}</span>\n                  </div>\n                  <div className=\"flex justify-between border-t pt-2\">\n                    <span className=\"font-semibold\">Total:</span>\n                    <span className=\"font-bold text-blue-600\">{formatCurrency(selectedOrder.total)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-6\">\n            <h4 className=\"font-semibold text-gray-900 mb-3\">Art√≠culos</h4>\n            <div className=\"space-y-2\">\n              {selectedOrder.articulos.map((articulo, index) => (\n                <div key={index} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <span className=\"font-medium\">{articulo.cantidad}x {articulo.nombre}</span>\n                    <span className=\"text-sm text-gray-600 ml-2\">({articulo.servicio})</span>\n                  </div>\n                  <span className=\"font-medium\">{formatCurrency(articulo.cantidad * articulo.precio)}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {selectedOrder.estado === 'Cancelado' && selectedOrder.motivoCancelacion && (\n            <div className=\"mt-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <h4 className=\"font-semibold text-red-900 mb-2\">Motivo de Cancelaci√≥n</h4>\n              <p className=\"text-sm text-red-700\">{selectedOrder.motivoCancelacion}</p>\n              <p className=\"text-xs text-red-600 mt-1\">Cancelado el {selectedOrder.fechaCancelacion}</p>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  // Modal de cambio de estado\n  const StatusModal = () => {\n    if (!showStatusModal || !selectedOrder) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">Cambiar Estado</h3>\n            <button\n              onClick={() => setShowStatusModal(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {estados.filter(estado => estado.id !== 'Cancelado').map((estado) => {\n              const IconComponent = estado.icon;\n              return (\n                <button\n                  key={estado.id}\n                  onClick={() => cambiarEstado(selectedOrder, estado.id)}\n                  disabled={selectedOrder.estado === estado.id}\n                  className={`w-full p-4 rounded-lg border-2 transition-all duration-200 flex items-center space-x-3 ${\n                    selectedOrder.estado === estado.id\n                      ? 'border-gray-300 bg-gray-100 cursor-not-allowed'\n                      : `border-gray-200 hover:border-${estado.color}-500 hover:bg-${estado.color}-50`\n                  }`}\n                >\n                  <IconComponent className={`w-6 h-6 text-${estado.color}-600`} />\n                  <span className=\"font-medium text-gray-900\">{estado.nombre}</span>\n                  {selectedOrder.estado === estado.id && (\n                    <span className=\"ml-auto text-xs text-gray-500\">Actual</span>\n                  )}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Modal de cobro\n  const PaymentModal = () => {\n    if (!showPaymentModal || !selectedOrder) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">Cobrar Pago</h3>\n            <button\n              onClick={() => setShowPaymentModal(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"text-center mb-6\">\n            <p className=\"text-gray-600\">Total a cobrar:</p>\n            <p className=\"text-2xl font-bold text-blue-600\">{formatCurrency(selectedOrder.total)}</p>\n          </div>\n          \n          <div className=\"space-y-3\">\n            {metodosPago.filter(metodo => metodo.id !== 'Pendiente').map((metodo) => {\n              const IconComponent = metodo.icon;\n              return (\n                <button\n                  key={metodo.id}\n                  onClick={() => cobrarPago(selectedOrder, metodo.nombre)}\n                  className={`w-full p-4 rounded-lg border-2 border-gray-200 hover:border-${metodo.color}-500 hover:bg-${metodo.color}-50 transition-all duration-200 flex items-center space-x-3`}\n                >\n                  <IconComponent className={`w-6 h-6 text-${metodo.color}-600`} />\n                  <span className=\"font-medium text-gray-900\">{metodo.nombre}</span>\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Modal de cancelaci√≥n\n  const CancelModal = () => {\n    if (!showCancelModal || !selectedOrder) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">Cancelar Orden</h3>\n            <button\n              onClick={() => setShowCancelModal(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"text-center mb-6\">\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <AlertCircle className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <p className=\"text-gray-600\">\n              ¬øEst√° seguro que desea cancelar la orden <strong>{selectedOrder.numero}</strong>?\n            </p>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Motivo de cancelaci√≥n *</label>\n              <textarea\n                value={cancelReason}\n                onChange={(e) => setCancelReason(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500\"\n                rows={3}\n                placeholder=\"Ej: Cliente no recogi√≥ a tiempo, problema con la prenda, etc.\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 mt-6\">\n            <button\n              onClick={() => setShowCancelModal(false)}\n              className=\"flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium\"\n            >\n              Cancelar\n            </button>\n            <button\n              onClick={cancelarOrden}\n              className=\"flex-1 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium\"\n            >\n              Confirmar Cancelaci√≥n\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center\">\n                <FileText className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Gesti√≥n de √ìrdenes</h1>\n                <p className=\"text-gray-600\">Lista, b√∫squeda, estados y acciones</p>\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-500\">Total √≥rdenes</p>\n              <p className=\"text-2xl font-bold text-blue-600\">{filteredOrders.length}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Filtros y b√∫squeda */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"md:col-span-2\">\n              <div className=\"relative\">\n                <Search className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Buscar por factura, cliente o tel√©fono...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <select\n                value={filterStatus}\n                onChange={(e) => setFilterStatus(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"all\">Todos los estados</option>\n                {estados.map((estado) => (\n                  <option key={estado.id} value={estado.id}>{estado.nombre}</option>\n                ))}\n              </select>\n            </div>\n            \n            <div>\n              <select\n                value={filterPayment}\n                onChange={(e) => setFilterPayment(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"all\">Todos los pagos</option>\n                <option value=\"paid\">Pagados</option>\n                <option value=\"pending\">Pendientes</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        {/* Lista de √≥rdenes */}\n        <div className=\"bg-white rounded-xl shadow-sm border overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Factura</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Cliente</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Recibido</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Entrega</th>\n                  <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">Estado</th>\n                  <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase\">Pago</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Total</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredOrders.map((order) => (\n                  <tr key={order.id} className={`hover:bg-gray-50 ${order.estado === 'Cancelado' ? 'bg-red-50' : ''}`}>\n                    <td className=\"px-6 py-4 text-sm font-medium\">\n                      <div>\n                        <p className=\"font-semibold\">{order.numero}</p>\n                        <p className=\"text-xs text-gray-500\">#{order.id}</p>\n                      </div>\n                    </td>\n                    \n                    <td className=\"px-6 py-4 text-sm\">\n                      <div>\n                        <p className=\"font-medium\">{order.cliente}</p>\n                        <p className=\"text-xs text-gray-500\">{order.telefono}</p>\n                        {order.correo && (\n                          <p className=\"text-xs text-gray-500\">{order.correo}</p>\n                        )}\n                      </div>\n                    </td>\n                    \n                    <td className=\"px-6 py-4 text-sm\">\n                      <div>\n                        <p>{new Date(order.fechaRecibido).toLocaleDateString()}</p>\n                        <p className=\"text-xs text-gray-500\">{order.horaRecibido}</p>\n                      </div>\n                    </td>\n                    \n                    <td className=\"px-6 py-4 text-sm\">\n                      <div>\n                        <p>{new Date(order.fechaRetiro).toLocaleDateString()}</p>\n                        {order.entregado && order.horaEntrega && (\n                          <p className=\"text-xs text-green-600\">\n                            Entregado: {order.horaEntrega}\n                          </p>\n                        )}\n                      </div>\n                    </td>\n                    \n                    <td className=\"px-6 py-4 text-center\">\n                      <button\n                        onClick={() => {\n                          if (order.estado === 'Cancelado') return;\n                          setSelectedOrder(order);\n                          setShowStatusModal(true);\n                        }}\n                        disabled={order.estado === 'Cancelado'}\n                        className={`px-3 py-1 text-xs font-medium rounded-full cursor-pointer hover:opacity-80 transition-opacity ${\n                          order.estado === 'Cancelado' ? 'cursor-not-allowed' : ''\n                        } bg-${getStatusColor(order.estado)}-100 text-${getStatusColor(order.estado)}-800`}\n                      >\n                        {order.estado}\n                      </button>\n                    </td>\n                    \n                    <td className=\"px-6 py-4 text-center\">\n                      <span className={`px-3 py-1 text-xs font-medium rounded-full bg-${getPaymentColor(order.metodoPago)}-100 text-${getPaymentColor(order.metodoPago)}-800`}>\n                        {order.metodoPago}\n                      </span>\n                    </td>\n                    \n                    <td className=\"px-6 py-4 text-sm font-medium\">\n                      {formatCurrency(order.total)}\n                    </td>\n                    \n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        {!order.pagado && order.estado !== 'Cancelado' && (\n                          <button \n                            onClick={() => {\n                              setSelectedOrder(order);\n                              setShowPaymentModal(true);\n                            }}\n                            className=\"text-green-600 hover:text-green-900\"\n                            title=\"Cobrar\"\n                          >\n                            <DollarSign className=\"w-4 h-4\" />\n                          </button>\n                        )}\n                        \n                        {order.estado !== 'Cancelado' && (\n                          <>\n                            <button \n                              onClick={() => enviarWhatsApp(order)}\n                              className=\"text-green-600 hover:text-green-900\"\n                              title=\"WhatsApp\"\n                            >\n                              <Send className=\"w-4 h-4\" />\n                            </button>\n                            \n                            <button \n                              onClick={() => imprimirRecibo(order)}\n                              className=\"text-blue-600 hover:text-blue-900\" \n                              title=\"Imprimir\"\n                            >\n                              <Printer className=\"w-4 h-4\" />\n                            </button>\n                          </>\n                        )}\n                        \n                        <button \n                          onClick={() => verDetalles(order)}\n                          className=\"text-cyan-600 hover:text-cyan-900\" \n                          title=\"Ver detalles\"\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </button>\n                        \n                        {empleadoLogueado.rol === 'gerente' && order.estado !== 'Cancelado' && order.estado !== 'Entregado' && (\n                          <button \n                            onClick={() => {\n                              setSelectedOrder(order);\n                              setShowCancelModal(true);\n                            }}\n                            className=\"text-red-600 hover:text-red-900\" \n                            title=\"Cancelar orden (Solo Gerente)\"\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </button>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          \n          {filteredOrders.length === 0 && (\n            <div className=\"text-center py-12 text-gray-500\">\n              <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n              <p>No se encontraron √≥rdenes con los filtros aplicados</p>\n            </div>\n          )}\n        </div>\n\n        {/* Estad√≠sticas r√°pidas */}\n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 mt-6\">\n          {estados.map((estado) => {\n            const count = orders.filter(o => o.estado === estado.id).length;\n            const IconComponent = estado.icon;\n            \n            return (\n              <div key={estado.id} className=\"bg-white rounded-xl shadow-sm border p-4\">\n                <div className=\"flex items-center\">\n                  <div className={`w-10 h-10 bg-${estado.color}-100 rounded-lg flex items-center justify-center`}>\n                    <IconComponent className={`w-5 h-5 text-${estado.color}-600`} />\n                  </div>\n                  <div className=\"ml-3\">\n                    <p className=\"text-xs font-medium text-gray-500\">{estado.nombre}</p>\n                    <p className=\"text-lg font-bold text-gray-900\">{count}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Modales */}\n      <Modal />\n      <DetailsModal />\n      <StatusModal />\n      <PaymentModal />\n      <CancelModal />\n    </div>\n  );\n};\n\nexport default GestionOrdenes;\n            ","size_bytes":36789},"attached_assets/nueva_factura 2_1757470217536.tsx":{"content":"import React, { useState } from 'react';\nimport { \n  FileText, \n  Plus, \n  Trash2, \n  Save, \n  DollarSign, \n  Calendar, \n  User, \n  Phone, \n  Mail, \n  Package, \n  Search,\n  X,\n  Clock,\n  Check,\n  Users,\n  CreditCard,\n  Banknote,\n  Landmark\n} from 'lucide-react';\n\nconst NuevaFactura = () => {\n  const [facturaActual, setFacturaActual] = useState({\n    numero: 'FAC-010',\n    fecha: new Date().toISOString().split('T')[0],\n    cliente: '',\n    telefono: '',\n    correo: '',\n    diaEntrega: '',\n    articulos: [],\n    subtotal: 0,\n    itbis: 0,\n    total: 0,\n    metodoPago: 'Efectivo'\n  });\n\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [showDateTimeSelector, setShowDateTimeSelector] = useState(false);\n  const [showClientesPanel, setShowClientesPanel] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [filtroCliente, setFiltroCliente] = useState('');\n  const [clienteSugerido, setClienteSugerido] = useState(null);\n  const [selectedDateTime, setSelectedDateTime] = useState({\n    fecha: '',\n    hora: '12:00'\n  });\n\n  const clientesFrecuentes = [\n    { id: 1, nombre: 'Juan P√©rez', telefono: '8091502025', correo: 'juan@email.com', totalCompras: 5 },\n    { id: 2, nombre: 'Mar√≠a Garc√≠a', telefono: '8097779999', correo: 'maria@email.com', totalCompras: 3 },\n    { id: 3, nombre: 'Pedro L√≥pez', telefono: '8095551234', correo: '', totalCompras: 8 }\n  ];\n\n  const preciosServicios = [\n    { id: 1, nombre: 'PANTALONES', precios: { lavado: 80, planchado: 60, lavadoYPlanchado: 110 } },\n    { id: 2, nombre: 'CAMISAS', precios: { lavado: 60, planchado: 40, lavadoYPlanchado: 85 } },\n    { id: 3, nombre: 'VESTIDOS', precios: { lavado: 150, planchado: 120, lavadoYPlanchado: 220 } },\n    { id: 4, nombre: 'BLUSAS', precios: { lavado: 60, planchado: 40, lavadoYPlanchado: 85 } },\n    { id: 5, nombre: 'S√ÅBANAS', precios: { lavado: 100, planchado: 80, lavadoYPlanchado: 150 } },\n    { id: 6, nombre: 'TOALLAS (GRANDE)', precios: { lavado: 40, planchado: 30, lavadoYPlanchado: 60 } }\n  ];\n\n  const metodosPago = [\n    { id: 'efectivo', nombre: 'Efectivo', icon: Banknote },\n    { id: 'tarjeta', nombre: 'Tarjeta', icon: CreditCard },\n    { id: 'transferencia', nombre: 'Transferencia Bancaria', icon: Landmark },\n    { id: 'pendiente', nombre: 'Pago Pendiente', icon: Clock }\n  ];\n\n  const formatCurrency = (amount) => `RD$${amount.toFixed(2)}`;\n\n  const openModal = (message) => {\n    setModalMessage(message);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalMessage('');\n  };\n\n  const calcularTotales = (articulos) => {\n    const subtotal = articulos.reduce((acc, item) => acc + (item.cantidad * item.precio), 0);\n    const itbis = subtotal * 0.18;\n    const total = subtotal + itbis;\n    return { subtotal, itbis, total };\n  };\n\n  const manejarCambioTelefono = (valor) => {\n    setFacturaActual({ ...facturaActual, telefono: valor });\n    \n    if (valor.length >= 4) {\n      const clienteEncontrado = clientesFrecuentes.find(cliente => \n        cliente.telefono.includes(valor) || cliente.telefono.replace(/\\D/g, '').includes(valor)\n      );\n      \n      if (clienteEncontrado) {\n        setClienteSugerido(clienteEncontrado);\n      } else {\n        setClienteSugerido(null);\n      }\n    }\n  };\n\n  const seleccionarClienteSugerido = (cliente) => {\n    setFacturaActual({ \n      ...facturaActual, \n      cliente: cliente.nombre,\n      telefono: cliente.telefono,\n      correo: cliente.correo || ''\n    });\n    setClienteSugerido(null);\n  };\n\n  const seleccionarClienteDelPanel = (cliente) => {\n    setFacturaActual({ \n      ...facturaActual, \n      cliente: cliente.nombre,\n      telefono: cliente.telefono,\n      correo: cliente.correo || ''\n    });\n    setShowClientesPanel(false);\n  };\n\n  const agregarArticulo = () => {\n    const primerPrenda = preciosServicios[0];\n    const nuevoArticulo = {\n      id: Date.now(),\n      nombre: primerPrenda.nombre,\n      servicio: 'lavado',\n      cantidad: 1,\n      precio: primerPrenda.precios.lavado\n    };\n    const nuevosArticulos = [...facturaActual.articulos, nuevoArticulo];\n    const { subtotal, itbis, total } = calcularTotales(nuevosArticulos);\n    setFacturaActual({ ...facturaActual, articulos: nuevosArticulos, subtotal, itbis, total });\n  };\n\n  const eliminarArticulo = (id) => {\n    const nuevosArticulos = facturaActual.articulos.filter(item => item.id !== id);\n    const { subtotal, itbis, total } = calcularTotales(nuevosArticulos);\n    setFacturaActual({ ...facturaActual, articulos: nuevosArticulos, subtotal, itbis, total });\n  };\n\n  const manejarCambioArticulo = (id, campo, valor) => {\n    const nuevosArticulos = facturaActual.articulos.map(item => {\n      if (item.id === id) {\n        const updatedItem = { ...item, [campo]: valor };\n        const prenda = preciosServicios.find(p => p.nombre === updatedItem.nombre);\n        if (prenda && (campo === 'nombre' || campo === 'servicio')) {\n          updatedItem.precio = prenda.precios[updatedItem.servicio] || 0;\n        }\n        return updatedItem;\n      }\n      return item;\n    });\n    const { subtotal, itbis, total } = calcularTotales(nuevosArticulos);\n    setFacturaActual({ ...facturaActual, articulos: nuevosArticulos, subtotal, itbis, total });\n  };\n\n  const abrirSelectorFechaHora = () => {\n    setSelectedDateTime({\n      fecha: facturaActual.diaEntrega || new Date().toISOString().split('T')[0],\n      hora: '12:00'\n    });\n    setShowDateTimeSelector(true);\n  };\n\n  const confirmarFechaHora = () => {\n    setFacturaActual({\n      ...facturaActual,\n      diaEntrega: selectedDateTime.fecha\n    });\n    setShowDateTimeSelector(false);\n  };\n\n  const ajustarFecha = (dias) => {\n    const nuevaFecha = new Date(selectedDateTime.fecha);\n    nuevaFecha.setDate(nuevaFecha.getDate() + dias);\n    setSelectedDateTime({\n      ...selectedDateTime,\n      fecha: nuevaFecha.toISOString().split('T')[0]\n    });\n  };\n\n  const guardarFactura = (esPendiente = false) => {\n    if (!facturaActual.cliente || !facturaActual.telefono) {\n      openModal(\"Complete los datos del cliente.\");\n      return;\n    }\n\n    if (facturaActual.articulos.length === 0) {\n      openModal(\"Agregue al menos un art√≠culo.\");\n      return;\n    }\n\n    if (!facturaActual.diaEntrega) {\n      openModal(\"Seleccione la fecha de entrega.\");\n      return;\n    }\n\n    const metodoPago = esPendiente ? 'Pendiente' : facturaActual.metodoPago;\n    \n    openModal(`Factura ${facturaActual.numero} guardada exitosamente. M√©todo de pago: ${metodoPago}`);\n    \n    setFacturaActual({\n      numero: `FAC-${String(parseInt(facturaActual.numero.split('-')[1]) + 1).padStart(3, '0')}`,\n      fecha: new Date().toISOString().split('T')[0],\n      cliente: '',\n      telefono: '',\n      correo: '',\n      diaEntrega: '',\n      articulos: [],\n      subtotal: 0,\n      itbis: 0,\n      total: 0,\n      metodoPago: 'Efectivo'\n    });\n    \n    setShowPaymentModal(false);\n  };\n\n  const Modal = () => {\n    if (!isModalOpen) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Check className=\"w-8 h-8 text-green-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Billtracky</h3>\n            <p className=\"text-gray-600 mb-6\">{modalMessage}</p>\n            <button\n              onClick={closeModal}\n              className=\"w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 font-medium transition-colors\"\n            >\n              Aceptar\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const PaymentMethodModal = () => {\n    if (!showPaymentModal) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center mb-6\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <DollarSign className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900\">M√©todo de Pago</h3>\n            <p className=\"text-gray-600 mt-2\">Total: {formatCurrency(facturaActual.total)}</p>\n          </div>\n          \n          <div className=\"space-y-3 mb-6\">\n            {metodosPago.map((metodo) => {\n              const IconComponent = metodo.icon;\n              return (\n                <button\n                  key={metodo.id}\n                  onClick={() => {\n                    setFacturaActual({ ...facturaActual, metodoPago: metodo.nombre });\n                    guardarFactura(false);\n                  }}\n                  className=\"w-full p-4 rounded-lg border-2 border-gray-200 hover:border-blue-500 hover:bg-blue-50 transition-all duration-200 flex items-center space-x-3\"\n                >\n                  <IconComponent className=\"w-6 h-6 text-blue-600\" />\n                  <span className=\"font-medium text-gray-900\">{metodo.nombre}</span>\n                </button>\n              );\n            })}\n          </div>\n          \n          <div className=\"flex space-x-3\">\n            <button\n              onClick={() => setShowPaymentModal(false)}\n              className=\"flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium\"\n            >\n              Cancelar\n            </button>\n            <button\n              onClick={() => guardarFactura(true)}\n              className=\"flex-1 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 font-medium\"\n            >\n              Pago Pendiente\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const DateTimeSelector = () => {\n    if (!showDateTimeSelector) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center mb-6\">\n            <Calendar className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-bold text-gray-900\">Fecha de Entrega</h3>\n          </div>\n          \n          <div className=\"space-y-4 mb-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Fecha</label>\n              <input\n                type=\"date\"\n                value={selectedDateTime.fecha}\n                onChange={(e) => setSelectedDateTime({...selectedDateTime, fecha: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                min={new Date().toISOString().split('T')[0]}\n              />\n            </div>\n            \n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() => ajustarFecha(-1)}\n                className=\"flex-1 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 text-sm\"\n              >\n                -1 d√≠a\n              </button>\n              <button\n                onClick={() => ajustarFecha(1)}\n                className=\"flex-1 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 text-sm\"\n              >\n                +1 d√≠a\n              </button>\n              <button\n                onClick={() => ajustarFecha(2)}\n                className=\"flex-1 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 text-sm\"\n              >\n                +2 d√≠as\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3\">\n            <button\n              onClick={() => setShowDateTimeSelector(false)}\n              className=\"flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium\"\n            >\n              Cancelar\n            </button>\n            <button\n              onClick={confirmarFechaHora}\n              className=\"flex-1 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\"\n            >\n              Confirmar\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const ClientesPanel = () => {\n    if (!showClientesPanel) return null;\n    \n    const clientesFiltrados = clientesFrecuentes.filter(cliente =>\n      cliente.nombre.toLowerCase().includes(filtroCliente.toLowerCase()) ||\n      cliente.telefono.includes(filtroCliente)\n    );\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full max-h-96 shadow-2xl\">\n          <div className=\"p-6 border-b\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-xl font-bold text-gray-900\">Clientes Frecuentes</h3>\n              <button\n                onClick={() => setShowClientesPanel(false)}\n                className=\"text-gray-400 hover:text-gray-600\"\n              >\n                <X className=\"w-6 h-6\" />\n              </button>\n            </div>\n            \n            <div className=\"relative\">\n              <Search className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n              <input\n                type=\"text\"\n                placeholder=\"Buscar cliente...\"\n                value={filtroCliente}\n                onChange={(e) => setFiltroCliente(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"max-h-64 overflow-y-auto p-4\">\n            {clientesFiltrados.map((cliente) => (\n              <button\n                key={cliente.id}\n                onClick={() => seleccionarClienteDelPanel(cliente)}\n                className=\"w-full p-3 text-left hover:bg-gray-50 rounded-lg mb-2 border border-gray-200\"\n              >\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{cliente.nombre}</p>\n                    <p className=\"text-sm text-gray-600\">{cliente.telefono}</p>\n                    {cliente.correo && (\n                      <p className=\"text-xs text-gray-500\">{cliente.correo}</p>\n                    )}\n                  </div>\n                  <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full\">\n                    {cliente.totalCompras} compras\n                  </span>\n                </div>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center\">\n                <FileText className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Nueva Factura</h1>\n                <p className=\"text-gray-600\">Factura #{facturaActual.numero}</p>\n              </div>\n            </div>\n            \n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-500\">Fecha</p>\n              <p className=\"font-medium\">{new Date(facturaActual.fecha).toLocaleDateString()}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Informaci√≥n del Cliente */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n              <User className=\"w-5 h-5 mr-2\" />\n              Informaci√≥n del Cliente\n            </h2>\n            <button\n              onClick={() => setShowClientesPanel(true)}\n              className=\"px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 text-sm font-medium flex items-center space-x-2\"\n            >\n              <Users className=\"w-4 h-4\" />\n              <span>Clientes Frecuentes</span>\n            </button>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nombre Completo</label>\n              <input\n                type=\"text\"\n                value={facturaActual.cliente}\n                onChange={(e) => setFacturaActual({ ...facturaActual, cliente: e.target.value })}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Nombre del cliente\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Tel√©fono</label>\n              <div className=\"relative\">\n                <Phone className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                <input\n                  type=\"tel\"\n                  value={facturaActual.telefono}\n                  onChange={(e) => manejarCambioTelefono(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"809-000-0000\"\n                />\n              </div>\n              \n              {clienteSugerido && (\n                <div className=\"mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <p className=\"text-sm text-blue-700 mb-1\">Cliente encontrado:</p>\n                  <button\n                    onClick={() => seleccionarClienteSugerido(clienteSugerido)}\n                    className=\"text-sm font-medium text-blue-800 hover:text-blue-900\"\n                  >\n                    {clienteSugerido.nombre} - {clienteSugerido.telefono}\n                  </button>\n                </div>\n              )}\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Correo (Opcional)</label>\n              <div className=\"relative\">\n                <Mail className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                <input\n                  type=\"email\"\n                  value={facturaActual.correo}\n                  onChange={(e) => setFacturaActual({ ...facturaActual, correo: e.target.value })}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"cliente@email.com\"\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mt-4\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Fecha de Entrega</label>\n            <button\n              onClick={abrirSelectorFechaHora}\n              className=\"w-full md:w-auto px-4 py-3 bg-gray-100 border border-gray-300 rounded-lg hover:bg-gray-200 text-left flex items-center space-x-2\"\n            >\n              <Calendar className=\"w-5 h-5 text-gray-600\" />\n              <span>{facturaActual.diaEntrega ? new Date(facturaActual.diaEntrega).toLocaleDateString() : 'Seleccionar fecha'}</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Detalles del Pedido */}\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900\">Detalles del Pedido</h2>\n            <button\n              onClick={agregarArticulo}\n              className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium flex items-center space-x-2 shadow-lg\"\n            >\n              <Plus className=\"w-5 h-5\" />\n              <span>A√±adir Cesta</span>\n            </button>\n          </div>\n          \n          {facturaActual.articulos.length === 0 ? (\n            <div className=\"text-center py-12 text-gray-500 bg-gray-50 rounded-lg\">\n              <Package className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-lg mb-2\">A√∫n no se han a√±adido cestas.</p>\n              <button\n                onClick={agregarArticulo}\n                className=\"mt-4 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\"\n              >\n                A√±adir primera cesta\n              </button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Header de columnas */}\n              <div className=\"grid grid-cols-12 gap-4 pb-3 border-b border-gray-200\">\n                <div className=\"col-span-1 flex items-center justify-center\">\n                  <Package className=\"w-5 h-5 text-orange-600\" />\n                </div>\n                <div className=\"col-span-4\">\n                  <span className=\"text-sm font-semibold text-gray-700\">Cesta</span>\n                </div>\n                <div className=\"col-span-2 text-center\">\n                  <span className=\"text-sm font-semibold text-gray-700 flex items-center justify-center\">\n                    <span className=\"w-4 h-4 bg-blue-100 rounded mr-2\"></span>\n                    Cantidad\n                  </span>\n                </div>\n                <div className=\"col-span-3 text-center\">\n                  <span className=\"text-sm font-semibold text-gray-700 flex items-center justify-center\">\n                    <span className=\"w-4 h-4 bg-purple-100 rounded mr-2\"></span>\n                    Servicios\n                  </span>\n                </div>\n                <div className=\"col-span-1 text-center\">\n                  <span className=\"text-sm font-semibold text-gray-700 flex items-center justify-center\">\n                    <span className=\"w-4 h-4 bg-green-100 rounded mr-2\"></span>\n                    Total\n                  </span>\n                </div>\n                <div className=\"col-span-1\"></div>\n              </div>\n\n              {/* Lista de art√≠culos */}\n              {facturaActual.articulos.map((articulo, index) => (\n                <div key={articulo.id} className=\"grid grid-cols-12 gap-4 p-4 bg-gray-50 rounded-lg border border-gray-200 hover:shadow-md transition-shadow\">\n                  <div className=\"col-span-1 flex items-center justify-center\">\n                    <div className=\"w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center\">\n                      <Package className=\"w-4 h-4 text-orange-600\" />\n                    </div>\n                  </div>\n                  \n                  <div className=\"col-span-4\">\n                    <select\n                      value={articulo.nombre}\n                      onChange={(e) => manejarCambioArticulo(articulo.id, 'nombre', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 bg-white\"\n                    >\n                      {preciosServicios.map((prenda) => (\n                        <option key={prenda.id} value={prenda.nombre}>\n                          {prenda.nombre}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  \n                  <div className=\"col-span-2 flex items-center justify-center\">\n                    <div className=\"flex items-center bg-white rounded-lg border border-gray-300\">\n                      <button\n                        onClick={() => manejarCambioArticulo(articulo.id, 'cantidad', Math.max(1, articulo.cantidad - 1))}\n                        className=\"px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-l-lg\"\n                      >\n                        -\n                      </button>\n                      <input\n                        type=\"number\"\n                        min=\"1\"\n                        value={articulo.cantidad}\n                        onChange={(e) => manejarCambioArticulo(articulo.id, 'cantidad', parseInt(e.target.value) || 1)}\n                        className=\"w-16 px-2 py-2 text-center border-0 focus:ring-0 text-sm\"\n                      />\n                      <button\n                        onClick={() => manejarCambioArticulo(articulo.id, 'cantidad', articulo.cantidad + 1)}\n                        className=\"px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-r-lg\"\n                      >\n                        +\n                      </button>\n                    </div>\n                  </div>\n                  \n                  <div className=\"col-span-3 flex items-center justify-center\">\n                    <select\n                      value={articulo.servicio}\n                      onChange={(e) => manejarCambioArticulo(articulo.id, 'servicio', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-purple-500 bg-white\"\n                    >\n                      <option value=\"lavado\">üß∫ Lavado - {formatCurrency(preciosServicios.find(p => p.nombre === articulo.nombre)?.precios.lavado || 0)}</option>\n                      <option value=\"planchado\">üëî Planchado - {formatCurrency(preciosServicios.find(p => p.nombre === articulo.nombre)?.precios.planchado || 0)}</option>\n                      <option value=\"lavadoYPlanchado\">‚ú® Completo - {formatCurrency(preciosServicios.find(p => p.nombre === articulo.nombre)?.precios.lavadoYPlanchado || 0)}</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"col-span-1 flex items-center justify-center\">\n                    <div className=\"bg-green-100 text-green-800 px-3 py-2 rounded-lg font-semibold text-sm\">\n                      {formatCurrency(articulo.cantidad * articulo.precio)}\n                    </div>\n                  </div>\n                  \n                  <div className=\"col-span-1 flex items-center justify-center\">\n                    <button\n                      onClick={() => eliminarArticulo(articulo.id)}\n                      className=\"w-8 h-8 bg-red-100 text-red-600 rounded-full hover:bg-red-200 flex items-center justify-center transition-colors\"\n                      title=\"Eliminar art√≠culo\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Totales y botones de acci√≥n */}\n        {facturaActual.articulos.length > 0 && (\n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Resumen</h2>\n            \n            <div className=\"space-y-3 mb-6\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600\">Subtotal:</span>\n                <span className=\"font-medium\">{formatCurrency(facturaActual.subtotal)}</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-gray-600\">ITBIS (18%):</span>\n                <span className=\"font-medium\">{formatCurrency(facturaActual.itbis)}</span>\n              </div>\n              <div className=\"border-t pt-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-xl font-bold text-gray-900\">Total:</span>\n                  <span className=\"text-xl font-bold text-blue-600\">{formatCurrency(facturaActual.total)}</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-4\">\n              <button\n                onClick={() => setShowPaymentModal(true)}\n                className=\"flex-1 bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium flex items-center justify-center space-x-2\"\n              >\n                <Save className=\"w-5 h-5\" />\n                <span>Guardar y Cobrar</span>\n              </button>\n              <button\n                onClick={() => guardarFactura(true)}\n                className=\"flex-1 bg-yellow-600 text-white py-3 rounded-lg hover:bg-yellow-700 font-medium flex items-center justify-center space-x-2\"\n              >\n                <Clock className=\"w-5 h-5\" />\n                <span>Guardar Pendiente</span>\n              </button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Modales */}\n      <Modal />\n      <PaymentMethodModal />\n      <DateTimeSelector />\n      <ClientesPanel />\n    </div>\n  );\n};\n\nexport default NuevaFactura;","size_bytes":29325},"attached_assets/sistema_roles-3_1757470217535.tsx":{"content":"import React, { useState } from 'react';\nimport { \n  Users, \n  Plus, \n  Edit3, \n  Trash2, \n  Shield, \n  Key, \n  User, \n  Crown, \n  UserCheck,\n  Eye,\n  EyeOff,\n  Save,\n  X,\n  Check,\n  AlertCircle,\n  Settings,\n  Lock,\n  Unlock\n} from 'lucide-react';\n\nconst SistemaRoles = () => {\n  const [employees, setEmployees] = useState([\n    { \n      id: 1, \n      nombre: 'Juan Carlos', \n      puesto: 'Gerente General', \n      codigoAcceso: '1234', \n      rol: 'gerente',\n      activo: true,\n      fechaCreacion: '2024-01-15',\n      ultimoAcceso: '2024-09-04'\n    },\n    { \n      id: 2, \n      nombre: 'Mar√≠a Fern√°ndez', \n      puesto: 'Operadora Principal', \n      codigoAcceso: '5678', \n      rol: 'empleado',\n      activo: true,\n      fechaCreacion: '2024-02-20',\n      ultimoAcceso: '2024-09-03'\n    },\n    { \n      id: 3, \n      nombre: 'Pedro Gonz√°lez', \n      puesto: 'Supervisor de Turno', \n      codigoAcceso: '9999', \n      rol: 'supervisor',\n      activo: true,\n      fechaCreacion: '2024-03-10',\n      ultimoAcceso: '2024-09-02'\n    },\n    { \n      id: 4, \n      nombre: 'Ana L√≥pez', \n      puesto: 'Cajera', \n      codigoAcceso: '4567', \n      rol: 'empleado',\n      activo: false,\n      fechaCreacion: '2024-01-20',\n      ultimoAcceso: '2024-08-28'\n    }\n  ]);\n\n  const [showEmployeeModal, setShowEmployeeModal] = useState(false);\n  const [showRolePermissionsModal, setShowRolePermissionsModal] = useState(false);\n  const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [employeeToDelete, setEmployeeToDelete] = useState(null);\n  const [modalMessage, setModalMessage] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterRole, setFilterRole] = useState('all');\n  const [showPassword, setShowPassword] = useState({});\n\n  const [empleadoForm, setEmpleadoForm] = useState({\n    nombre: '',\n    puesto: '',\n    codigoAcceso: '',\n    rol: 'empleado'\n  });\n\n  const roles = {\n    gerente: {\n      nombre: 'Gerente',\n      color: 'blue',\n      icon: Crown,\n      permisos: [\n        'Crear y editar facturas',\n        'Cancelar √≥rdenes',\n        'Ver cierre de caja',\n        'Gestionar empleados',\n        'Configurar servicios',\n        'Acceso a reportes completos',\n        'Gestionar m√©todos de pago',\n        'Configuraci√≥n del sistema'\n      ]\n    },\n    supervisor: {\n      nombre: 'Supervisor',\n      color: 'purple',\n      icon: Shield,\n      permisos: [\n        'Crear y editar facturas',\n        'Cambiar estados de √≥rdenes',\n        'Ver cierre de caja',\n        'Gestionar servicios b√°sicos',\n        'Acceso a reportes b√°sicos',\n        'Cobrar pagos pendientes'\n      ]\n    },\n    empleado: {\n      nombre: 'Empleado',\n      color: 'green',\n      icon: User,\n      permisos: [\n        'Crear facturas b√°sicas',\n        'Ver √≥rdenes asignadas',\n        'Cambiar estados b√°sicos',\n        'Cobrar pagos'\n      ]\n    }\n  };\n\n  const empleadoLogueado = {\n    nombre: 'Juan Carlos',\n    rol: 'gerente'\n  };\n\n  const openModal = (message) => {\n    setModalMessage(message);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalMessage('');\n  };\n\n  const generateRandomCode = () => {\n    return Math.floor(1000 + Math.random() * 9000).toString();\n  };\n\n  const openEmployeeModal = (employee = null) => {\n    if (employee) {\n      setSelectedEmployee(employee);\n      setEmpleadoForm({\n        nombre: employee.nombre,\n        puesto: employee.puesto,\n        codigoAcceso: employee.codigoAcceso,\n        rol: employee.rol\n      });\n    } else {\n      setSelectedEmployee(null);\n      setEmpleadoForm({\n        nombre: '',\n        puesto: '',\n        codigoAcceso: generateRandomCode(),\n        rol: 'empleado'\n      });\n    }\n    setShowEmployeeModal(true);\n  };\n\n  const saveEmployee = () => {\n    if (!empleadoForm.nombre || !empleadoForm.puesto || !empleadoForm.codigoAcceso) {\n      openModal(\"Complete todos los campos obligatorios.\");\n      return;\n    }\n\n    const existingEmployee = employees.find(emp => \n      emp.codigoAcceso === empleadoForm.codigoAcceso && \n      emp.id !== selectedEmployee?.id\n    );\n\n    if (existingEmployee) {\n      openModal(\"El c√≥digo de acceso ya est√° en uso. Genere uno nuevo.\");\n      return;\n    }\n\n    if (selectedEmployee) {\n      setEmployees(employees.map(emp => \n        emp.id === selectedEmployee.id \n          ? { ...emp, ...empleadoForm }\n          : emp\n      ));\n      openModal(\"Empleado actualizado exitosamente.\");\n    } else {\n      const newEmployee = {\n        id: employees.length + 1,\n        ...empleadoForm,\n        activo: true,\n        fechaCreacion: new Date().toISOString().split('T')[0],\n        ultimoAcceso: 'Nunca'\n      };\n      setEmployees([...employees, newEmployee]);\n      openModal(\"Empleado creado exitosamente.\");\n    }\n\n    setShowEmployeeModal(false);\n    setSelectedEmployee(null);\n  };\n\n  const toggleEmployeeStatus = (employeeId) => {\n    setEmployees(employees.map(emp => \n      emp.id === employeeId \n        ? { ...emp, activo: !emp.activo }\n        : emp\n    ));\n    \n    const employee = employees.find(emp => emp.id === employeeId);\n    openModal(`Empleado ${employee.activo ? 'desactivado' : 'activado'} exitosamente.`);\n  };\n\n  const deleteEmployee = () => {\n    if (!employeeToDelete) return;\n    \n    setEmployees(employees.filter(emp => emp.id !== employeeToDelete.id));\n    openModal(\"Empleado eliminado exitosamente.\");\n    setShowDeleteConfirmModal(false);\n    setEmployeeToDelete(null);\n  };\n\n  const togglePasswordVisibility = (employeeId) => {\n    setShowPassword(prev => ({\n      ...prev,\n      [employeeId]: !prev[employeeId]\n    }));\n  };\n\n  const filteredEmployees = employees.filter(employee => {\n    const matchesSearch = employee.nombre.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         employee.puesto.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = filterRole === 'all' || employee.rol === filterRole;\n    return matchesSearch && matchesRole;\n  });\n\n  const Modal = () => {\n    if (!isModalOpen) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Check className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Sistema de Roles</h3>\n            <p className=\"text-gray-600 mb-6\">{modalMessage}</p>\n            <button\n              onClick={closeModal}\n              className=\"w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n            >\n              Aceptar\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const EmployeeModal = () => {\n    if (!showEmployeeModal) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">\n              {selectedEmployee ? 'Editar Empleado' : 'Nuevo Empleado'}\n            </h3>\n            <button\n              onClick={() => setShowEmployeeModal(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nombre Completo *</label>\n              <input\n                type=\"text\"\n                value={empleadoForm.nombre}\n                onChange={(e) => setEmpleadoForm({...empleadoForm, nombre: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Ej: Juan P√©rez\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Puesto de Trabajo *</label>\n              <input\n                type=\"text\"\n                value={empleadoForm.puesto}\n                onChange={(e) => setEmpleadoForm({...empleadoForm, puesto: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Ej: Cajero Principal\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">C√≥digo de Acceso *</label>\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"text\"\n                  value={empleadoForm.codigoAcceso}\n                  onChange={(e) => setEmpleadoForm({...empleadoForm, codigoAcceso: e.target.value})}\n                  className=\"flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"C√≥digo de 4 d√≠gitos\"\n                  maxLength={4}\n                />\n                <button\n                  onClick={() => setEmpleadoForm({...empleadoForm, codigoAcceso: generateRandomCode()})}\n                  className=\"px-4 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center\"\n                  title=\"Generar c√≥digo aleatorio\"\n                >\n                  <Key className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Rol del Sistema *</label>\n              <select\n                value={empleadoForm.rol}\n                onChange={(e) => setEmpleadoForm({...empleadoForm, rol: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                {Object.entries(roles).map(([key, role]) => (\n                  <option key={key} value={key}>\n                    {role.nombre}\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Permisos del Rol:</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                {roles[empleadoForm.rol]?.permisos.map((permiso, index) => (\n                  <li key={index} className=\"flex items-center\">\n                    <Check className=\"w-3 h-3 text-green-600 mr-2\" />\n                    {permiso}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 mt-6\">\n            <button\n              onClick={() => setShowEmployeeModal(false)}\n              className=\"flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium\"\n            >\n              Cancelar\n            </button>\n            <button\n              onClick={saveEmployee}\n              className=\"flex-1 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\"\n            >\n              {selectedEmployee ? 'Actualizar' : 'Crear'} Empleado\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const DeleteConfirmModal = () => {\n    if (!showDeleteConfirmModal) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <AlertCircle className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Eliminar Empleado</h3>\n            <p className=\"text-gray-600 mb-6\">\n              ¬øEst√° seguro que desea eliminar a <strong>{employeeToDelete?.nombre}</strong>? \n              Esta acci√≥n no se puede deshacer.\n            </p>\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowDeleteConfirmModal(false)}\n                className=\"flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium\"\n              >\n                Cancelar\n              </button>\n              <button\n                onClick={deleteEmployee}\n                className=\"flex-1 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium\"\n              >\n                Eliminar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const RolePermissionsModal = () => {\n    if (!showRolePermissionsModal) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-2xl w-full p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">Permisos por Rol</h3>\n            <button\n              onClick={() => setShowRolePermissionsModal(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-6\">\n            {Object.entries(roles).map(([key, role]) => {\n              const IconComponent = role.icon;\n              return (\n                <div key={key} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center mb-3\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                      <IconComponent className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <h4 className=\"text-lg font-semibold text-gray-900\">{role.nombre}</h4>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {role.permisos.map((permiso, index) => (\n                      <div key={index} className=\"flex items-center text-sm text-gray-600\">\n                        <Check className=\"w-3 h-3 text-green-600 mr-2\" />\n                        {permiso}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Gesti√≥n de Empleados</h1>\n                <p className=\"text-gray-600\">Sistema de roles y permisos</p>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowRolePermissionsModal(true)}\n                className=\"px-4 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 font-medium flex items-center space-x-2\"\n              >\n                <Shield className=\"w-4 h-4\" />\n                <span>Ver Permisos</span>\n              </button>\n              <button\n                onClick={() => openEmployeeModal()}\n                className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium flex items-center space-x-2\"\n              >\n                <Plus className=\"w-5 h-5\" />\n                <span>Nuevo Empleado</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"md:col-span-2\">\n              <div className=\"relative\">\n                <Users className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Buscar empleado por nombre o puesto...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <select\n                value={filterRole}\n                onChange={(e) => setFilterRole(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"all\">Todos los roles</option>\n                {Object.entries(roles).map(([key, role]) => (\n                  <option key={key} value={key}>{role.nombre}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm border overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Empleado</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Rol</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">C√≥digo</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Estado</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">√öltimo Acceso</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredEmployees.map((employee) => {\n                  const role = roles[employee.rol];\n                  const IconComponent = role?.icon || User;\n                  \n                  return (\n                    <tr key={employee.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                            <IconComponent className=\"w-5 h-5 text-blue-600\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-900\">{employee.nombre}</p>\n                            <p className=\"text-sm text-gray-500\">{employee.puesto}</p>\n                          </div>\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <span className=\"px-3 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\">\n                          {role?.nombre}\n                        </span>\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <code className=\"px-2 py-1 bg-gray-100 rounded text-sm font-mono\">\n                            {showPassword[employee.id] ? employee.codigoAcceso : '‚Ä¢‚Ä¢‚Ä¢‚Ä¢'}\n                          </code>\n                          <button\n                            onClick={() => togglePasswordVisibility(employee.id)}\n                            className=\"text-gray-400 hover:text-gray-600\"\n                          >\n                            {showPassword[employee.id] ? (\n                              <EyeOff className=\"w-4 h-4\" />\n                            ) : (\n                              <Eye className=\"w-4 h-4\" />\n                            )}\n                          </button>\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center\">\n                          {employee.activo ? (\n                            <div className=\"flex items-center\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                              <span className=\"text-green-700 text-sm font-medium\">Activo</span>\n                            </div>\n                          ) : (\n                            <div className=\"flex items-center\">\n                              <div className=\"w-2 h-2 bg-red-500 rounded-full mr-2\"></div>\n                              <span className=\"text-red-700 text-sm font-medium\">Inactivo</span>\n                            </div>\n                          )}\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-6 py-4 text-sm text-gray-500\">\n                        {employee.ultimoAcceso === 'Nunca' ? 'Nunca' : new Date(employee.ultimoAcceso).toLocaleDateString()}\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <button\n                            onClick={() => openEmployeeModal(employee)}\n                            className=\"text-blue-600 hover:text-blue-900\"\n                            title=\"Editar empleado\"\n                          >\n                            <Edit3 className=\"w-4 h-4\" />\n                          </button>\n                          \n                          <button\n                            onClick={() => toggleEmployeeStatus(employee.id)}\n                            className={`${employee.activo ? 'text-red-600 hover:text-red-900' : 'text-green-600 hover:text-green-900'}`}\n                            title={employee.activo ? 'Desactivar' : 'Activar'}\n                          >\n                            {employee.activo ? <Lock className=\"w-4 h-4\" /> : <Unlock className=\"w-4 h-4\" />}\n                          </button>\n                          \n                          {empleadoLogueado.rol === 'gerente' && employee.id !== 1 && (\n                            <button\n                              onClick={() => {\n                                setEmployeeToDelete(employee);\n                                setShowDeleteConfirmModal(true);\n                              }}\n                              className=\"text-red-600 hover:text-red-900\"\n                              title=\"Eliminar empleado\"\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </button>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mt-6\">\n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Total Empleados</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{employees.length}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <UserCheck className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Activos</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{employees.filter(e => e.activo).length}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <Crown className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Gerentes</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{employees.filter(e => e.rol === 'gerente').length}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                <Shield className=\"w-6 h-6 text-orange-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Supervisores</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{employees.filter(e => e.rol === 'supervisor').length}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Modal />\n      <EmployeeModal />\n      <DeleteConfirmModal />\n      <RolePermissionsModal />\n    </div>\n  );\n};\n\nexport default SistemaRoles;","size_bytes":26589},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 5, // Limit concurrent connections\n  idleTimeoutMillis: 30000, // 30 seconds idle timeout\n  connectionTimeoutMillis: 2000, // 2 seconds connection timeout\n  maxUses: 7500, // Close connection after 7500 queries\n});\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":705},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { storage } from \"./storage\";\nimport { AirtableSyncWorker } from \"./airtable-sync-worker\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"‚Ä¶\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Initialize Airtable sync worker\n  const syncWorker = new AirtableSyncWorker(storage);\n  \n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Start Airtable sync worker after server is ready\n    syncWorker.start();\n  });\n  \n  // Graceful shutdown handling\n  process.on('SIGTERM', () => {\n    log('Received SIGTERM, shutting down gracefully...');\n    syncWorker.stop();\n    server.close(() => {\n      log('Server closed');\n    });\n  });\n  \n  process.on('SIGINT', () => {\n    log('Received SIGINT, shutting down gracefully...');\n    syncWorker.stop();\n    server.close(() => {\n      log('Server closed');\n    });\n  });\n})();\n","size_bytes":2739},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertCustomerSchema, insertServiceSchema, insertInvoiceSchema, insertInvoiceItemSchema, insertPaymentMethodSchema, insertCompanySettingsSchema, insertMessageTemplateSchema, insertEmployeeSchema, patchEmployeeSchema, updateEmployeeSchema, patchOrderStatusSchema, patchOrderPaymentSchema, patchOrderCancelSchema, patchInvoicePaySchema, insertWhatsappConfigSchema, createCashClosureSchema, insertCashClosurePaymentSchema, metricsQuerySchema, cashClosuresQuerySchema, insertAirtableConfigSchema, insertAirtableSyncQueueSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport type { WhatsappConfig } from \"@shared/schema\";\n\n// WhatsApp utility function\nasync function sendWhatsAppMessage(phone: string, message: string, config: WhatsappConfig): Promise<boolean> {\n  try {\n    // For now, this is a simulation. In production, you would implement:\n    // - Twilio WhatsApp API integration\n    // - WhatsApp Business API integration  \n    // - Other providers based on config.provider\n    \n    console.log(`[WhatsApp] Sending message to ${phone}: ${message}`);\n    console.log(`[WhatsApp] Provider: ${config.provider}, Enabled: ${config.enabled}`);\n    \n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // In production, implement actual WhatsApp API calls here:\n    // if (config.provider === 'twilio') {\n    //   // Implement Twilio WhatsApp API\n    //   const client = twilio(config.apiKey, config.apiSecret);\n    //   await client.messages.create({\n    //     body: message,\n    //     from: 'whatsapp:+14155238886', // Your Twilio WhatsApp number\n    //     to: `whatsapp:${phone}`\n    //   });\n    // }\n    \n    return true;\n  } catch (error) {\n    console.error('[WhatsApp] Error sending message:', error);\n    return false;\n  }\n}\n\n// Authentication middleware\ninterface AuthenticatedRequest extends Request {\n  employee?: any;\n}\n\nasync function requireAuthentication(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    const accessCode = req.headers['x-access-code'] as string;\n    \n    if (!accessCode) {\n      return res.status(401).json({ message: \"Access code required for authentication\" });\n    }\n    \n    const employee = await storage.getEmployeeByAccessCode(accessCode);\n    \n    if (!employee || !employee.active) {\n      return res.status(401).json({ message: \"Invalid access code or inactive employee\" });\n    }\n    \n    req.employee = employee;\n    next();\n  } catch (error) {\n    console.error('[Authentication] Error:', error);\n    res.status(500).json({ message: \"Authentication error\" });\n  }\n}\n\n// Role-based authorization middleware\nasync function requireManagerRole(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  try {\n    if (!req.employee) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    \n    if (req.employee.role !== 'manager') {\n      return res.status(403).json({ message: \"Manager role required for this operation\" });\n    }\n    \n    next();\n  } catch (error) {\n    res.status(500).json({ message: \"Authorization error\" });\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Authentication\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { accessCode } = req.body;\n      const employee = await storage.getEmployeeByAccessCode(accessCode);\n      \n      if (!employee) {\n        return res.status(401).json({ message: \"Invalid access code\" });\n      }\n      \n      res.json({ employee });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Services\n  app.get(\"/api/services\", async (req, res) => {\n    try {\n      const services = await storage.getServices();\n      res.json(services);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/services\", async (req, res) => {\n    try {\n      const serviceData = insertServiceSchema.parse(req.body);\n      const service = await storage.createService(serviceData);\n      res.json(service);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.put(\"/api/services/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const service = await storage.updateService(id, updates);\n      \n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      \n      res.json(service);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Customers\n  app.get(\"/api/customers\", async (req, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      res.json(customers);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/customers\", async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(customerData);\n      res.json(customer);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.get(\"/api/customers/phone/:phone\", async (req, res) => {\n    try {\n      const { phone } = req.params;\n      const customer = await storage.getCustomerByPhone(phone);\n      res.json(customer || null);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Invoices\n  app.get(\"/api/invoices\", async (req, res) => {\n    try {\n      const invoices = await storage.getInvoices();\n      res.json(invoices);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.get(\"/api/invoices/next-number\", async (req, res) => {\n    try {\n      const number = await storage.getNextInvoiceNumber();\n      res.json({ number });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/invoices\", requireAuthentication, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { invoice: invoiceData, items } = req.body;\n      \n      // Parse string dates back to Date objects (JSON.stringify converts Date to string)\n      const processedInvoiceData = {\n        ...invoiceData,\n        date: invoiceData.date ? new Date(invoiceData.date) : undefined,\n        deliveryDate: invoiceData.deliveryDate ? new Date(invoiceData.deliveryDate) : null,\n      };\n      \n      // Generate a new invoice number atomically (ignore the one from frontend)\n      console.log('[DEBUG] Generating new invoice number for creation...');\n      const uniqueInvoiceNumber = await storage.getNextInvoiceNumber();\n      console.log(`[DEBUG] Generated unique invoice number: ${uniqueInvoiceNumber}`);\n      \n      // Override the invoice number with the newly generated one\n      const invoiceWithUniqueNumber = {\n        ...processedInvoiceData,\n        number: uniqueInvoiceNumber\n      };\n      \n      // Validate invoice data\n      const validatedInvoice = insertInvoiceSchema.parse(invoiceWithUniqueNumber);\n      \n      // Create invoice\n      const invoice = await storage.createInvoice(validatedInvoice);\n      \n      // Create invoice items\n      const invoiceItems = [];\n      for (const itemData of items) {\n        const validatedItem = insertInvoiceItemSchema.parse({\n          ...itemData,\n          invoiceId: invoice.id\n        });\n        const item = await storage.createInvoiceItem(validatedItem);\n        invoiceItems.push(item);\n      }\n\n      // Auto-queue for Airtable sync if enabled\n      try {\n        const airtableConfig = await storage.getAirtableConfig();\n        if (airtableConfig && airtableConfig.enabled) {\n          // Queue the invoice for sync\n          await storage.createAirtableSyncQueueItem({\n            entityType: 'invoice',\n            entityId: invoice.id,\n            status: 'pending'\n          });\n          console.log(`[Airtable] Invoice ${invoice.number} queued for sync`);\n\n          // Queue each invoice item for sync\n          for (const item of invoiceItems) {\n            await storage.createAirtableSyncQueueItem({\n              entityType: 'invoice_item',\n              entityId: item.id,\n              status: 'pending'\n            });\n          }\n          console.log(`[Airtable] ${invoiceItems.length} invoice items queued for sync`);\n        }\n      } catch (airtableError) {\n        // Don't fail invoice creation if Airtable queueing fails\n        console.error('[Airtable] Error queueing for sync:', airtableError);\n      }\n\n      // Update customer if exists\n      if (invoice.customerId) {\n        const customer = await storage.getCustomer(invoice.customerId);\n        if (customer) {\n          await storage.updateCustomer(invoice.customerId, {\n            totalSpent: (parseFloat(customer.totalSpent || \"0\") + parseFloat(invoice.total)).toFixed(2),\n            ordersCount: (customer.ordersCount || 0) + 1\n          });\n        }\n      }\n      \n      res.status(201).json({ invoice, items: invoiceItems });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Invoice creation error:\", (error as Error).message);\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.get(\"/api/invoices/:id/items\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const items = await storage.getInvoiceItems(id);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.put(\"/api/invoices/:id\", requireAuthentication, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const invoice = await storage.updateInvoice(id, updates);\n      \n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      \n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Finalize payment for draft invoices\n  app.patch(\"/api/invoices/:id/pay\", requireAuthentication, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body\n      const validationResult = patchInvoicePaySchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: validationResult.error.errors \n        });\n      }\n      \n      const { paymentMethod, paymentReference } = validationResult.data;\n      \n      // Check if invoice exists and is unpaid\n      const invoice = await storage.getInvoice(id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Invoice not found\" });\n      }\n      \n      if (invoice.paid) {\n        return res.status(400).json({ message: \"Invoice is already paid\" });\n      }\n      \n      // Update invoice to mark as paid\n      const updatedInvoice = await storage.updateInvoice(id, {\n        paid: true,\n        paymentMethod,\n        paymentReference: paymentReference || null,\n      });\n      \n      console.log(`[DEBUG] Invoice ${invoice.number} finalized with payment method: ${paymentMethod}`);\n      \n      res.json(updatedInvoice);\n    } catch (error) {\n      console.error(\"Error finalizing invoice payment:\", (error as Error).message);\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Order Management - PATCH routes for status updates\n  \n  // Change order status\n  app.patch(\"/api/invoices/:id/status\", requireAuthentication, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body with Zod\n      const validationResult = patchOrderStatusSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: validationResult.error.errors \n        });\n      }\n      \n      const { status } = validationResult.data;\n      \n      const invoice = await storage.getInvoice(id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      // Validate status transitions\n      const currentStatus = invoice.status;\n      const validTransitions: Record<string, string[]> = {\n        'received': ['in_process', 'cancelled'],\n        'in_process': ['ready', 'cancelled'],\n        'ready': ['delivered', 'in_process'],\n        'delivered': [], // Final status\n        'cancelled': [] // Final status\n      };\n      \n      if (currentStatus && !validTransitions[currentStatus]?.includes(status)) {\n        return res.status(400).json({ \n          message: `Invalid transition from ${currentStatus} to ${status}` \n        });\n      }\n      \n      // Update status and set delivered flag and delivery date if delivered\n      const updates: any = { status, employeeId: req.employee.id };\n      if (status === 'delivered') {\n        updates.delivered = true;\n        updates.deliveryDate = new Date();\n      }\n      \n      const updatedInvoice = await storage.updateInvoice(id, updates);\n      \n      // WhatsApp automation: Send message when status changes to 'ready' (idempotent)\n      if (status === 'ready' && currentStatus !== 'ready') {\n        try {\n          const whatsappConfig = await storage.getWhatsappConfig();\n          if (whatsappConfig && whatsappConfig.enabled && whatsappConfig.autoSendOnReady && invoice.customerPhone) {\n            // Send WhatsApp message\n            const message = `¬°Hola ${invoice.customerName}! Su orden ${invoice.number} est√° lista para entrega. Puede pasar a recogerla cuando guste. ¬°Gracias!`;\n            await sendWhatsAppMessage(invoice.customerPhone, message, whatsappConfig);\n            console.log(`WhatsApp sent to ${invoice.customerPhone} for order ${invoice.number}`);\n          }\n        } catch (error) {\n          console.error('Error sending WhatsApp message:', error);\n          // Don't fail the status update if WhatsApp fails\n        }\n      }\n      \n      res.json(updatedInvoice);\n      \n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  // Process payment\n  app.patch(\"/api/invoices/:id/payment\", requireAuthentication, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body with Zod\n      const validationResult = patchOrderPaymentSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: validationResult.error.errors \n        });\n      }\n      \n      const { paymentMethod, paymentReference } = validationResult.data;\n      \n      // Get payment methods dynamically from storage\n      const availablePaymentMethods = await storage.getPaymentMethods();\n      const activePaymentMethods = availablePaymentMethods.filter(method => method.active);\n      \n      // Validate payment method by name\n      const selectedPaymentMethod = activePaymentMethods.find(method => \n        method.name.toLowerCase() === paymentMethod.toLowerCase()\n      );\n      \n      if (!selectedPaymentMethod) {\n        const availableNames = activePaymentMethods.map(method => method.name);\n        return res.status(400).json({ \n          message: \"Invalid payment method\", \n          available: availableNames \n        });\n      }\n      \n      // Validate payment reference for methods that require it\n      if (selectedPaymentMethod.requiresReference && !paymentReference) {\n        return res.status(400).json({ \n          message: `Payment reference is required for ${selectedPaymentMethod.name}` \n        });\n      }\n      \n      const invoice = await storage.getInvoice(id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      // Cannot process payment for cancelled orders\n      if (invoice.status === 'cancelled') {\n        return res.status(400).json({ \n          message: \"Cannot process payment for cancelled orders\" \n        });\n      }\n      \n      // Prevent re-payment unless explicitly allowed (already paid orders)\n      if (invoice.paid) {\n        return res.status(400).json({ \n          message: \"Order has already been paid. Contact supervisor to modify payment details.\" \n        });\n      }\n      \n      const updates = {\n        paymentMethod: selectedPaymentMethod.name,\n        paymentReference: paymentReference || null,\n        paid: true,\n        employeeId: req.employee.id\n      };\n      \n      const updatedInvoice = await storage.updateInvoice(id, updates);\n      res.json(updatedInvoice);\n      \n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n  \n  // Cancel order\n  app.patch(\"/api/invoices/:id/cancel\", requireAuthentication, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body with Zod\n      const validationResult = patchOrderCancelSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid request data\", \n          errors: validationResult.error.errors \n        });\n      }\n      \n      const { reason } = validationResult.data;\n      \n      const invoice = await storage.getInvoice(id);\n      if (!invoice) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      \n      // Cannot cancel delivered orders\n      if (invoice.status === 'delivered') {\n        return res.status(400).json({ \n          message: \"Cannot cancel delivered orders\" \n        });\n      }\n      \n      // Already cancelled\n      if (invoice.status === 'cancelled') {\n        return res.status(400).json({ \n          message: \"Order is already cancelled\" \n        });\n      }\n      \n      const updates = {\n        status: 'cancelled' as const,\n        cancelledAt: new Date(),\n        cancellationReason: reason,\n        employeeId: req.employee.id\n      };\n      \n      const updatedInvoice = await storage.updateInvoice(id, updates);\n      res.json(updatedInvoice);\n      \n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Dashboard metrics\n  app.get(\"/api/metrics/dashboard\", async (req, res) => {\n    try {\n      const invoices = await storage.getInvoices();\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const todayInvoices = invoices.filter(inv => {\n        const invDate = new Date(inv.date || 0);\n        invDate.setHours(0, 0, 0, 0);\n        return invDate.getTime() === today.getTime();\n      });\n      \n      const todayRevenue = todayInvoices.reduce((sum, inv) => sum + parseFloat(inv.total), 0);\n      const inProgress = invoices.filter(inv => inv.status === 'in_process').length;\n      const readyForDelivery = invoices.filter(inv => inv.status === 'ready').length;\n      const pendingPayment = invoices.filter(inv => inv.paymentMethod === 'pending').length;\n      const pendingPaymentTotal = invoices\n        .filter(inv => inv.paymentMethod === 'pending')\n        .reduce((sum, inv) => sum + parseFloat(inv.total), 0);\n      \n      res.json({\n        todayOrders: todayInvoices.length,\n        todayRevenue: todayRevenue.toFixed(2),\n        inProgress,\n        readyForDelivery,\n        pendingPayment,\n        pendingPaymentTotal: pendingPaymentTotal.toFixed(2)\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Payment Methods\n  app.get(\"/api/payment-methods\", async (req, res) => {\n    try {\n      const paymentMethods = await storage.getPaymentMethods();\n      res.json(paymentMethods);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/payment-methods\", async (req, res) => {\n    try {\n      const methodData = insertPaymentMethodSchema.parse(req.body);\n      const method = await storage.createPaymentMethod(methodData);\n      res.json(method);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.put(\"/api/payment-methods/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const method = await storage.updatePaymentMethod(id, updates);\n      \n      if (!method) {\n        return res.status(404).json({ message: \"Payment method not found\" });\n      }\n      \n      res.json(method);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.delete(\"/api/payment-methods/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePaymentMethod(id);\n      res.json({ message: \"Payment method deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Company Settings\n  app.get(\"/api/company-settings\", async (req, res) => {\n    try {\n      const settings = await storage.getCompanySettings();\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.put(\"/api/company-settings\", async (req, res) => {\n    try {\n      const settingsData = insertCompanySettingsSchema.parse(req.body);\n      const settings = await storage.updateCompanySettings(settingsData);\n      res.json(settings);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // WhatsApp Configuration\n  app.get(\"/api/whatsapp-config\", async (req, res) => {\n    try {\n      const config = await storage.getWhatsappConfig();\n      res.json(config);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.put(\"/api/whatsapp-config\", async (req, res) => {\n    try {\n      const configData = insertWhatsappConfigSchema.parse(req.body);\n      const config = await storage.updateWhatsappConfig(configData);\n      res.json(config);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Message Templates\n  app.get(\"/api/message-templates\", async (req, res) => {\n    try {\n      const templates = await storage.getMessageTemplates();\n      res.json(templates);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.get(\"/api/message-templates/type/:type\", async (req, res) => {\n    try {\n      const { type } = req.params;\n      const template = await storage.getMessageTemplateByType(type);\n      res.json(template);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/message-templates\", async (req, res) => {\n    try {\n      const templateData = insertMessageTemplateSchema.parse(req.body);\n      const template = await storage.createMessageTemplate(templateData);\n      res.json(template);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.put(\"/api/message-templates/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const template = await storage.updateMessageTemplate(id, updates);\n      \n      if (!template) {\n        return res.status(404).json({ message: \"Message template not found\" });\n      }\n      \n      res.json(template);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Special route to create first employee (no authentication required if no employees exist)\n  app.post(\"/api/employees/first\", async (req, res) => {\n    try {\n      // Check if any employees exist\n      const employees = await storage.getEmployees();\n      if (employees.length > 0) {\n        return res.status(403).json({ message: \"Employees already exist - use regular employee creation endpoint\" });\n      }\n\n      const employeeData = insertEmployeeSchema.parse(req.body);\n      \n      // Force first employee to be a manager\n      const firstEmployeeData = {\n        ...employeeData,\n        role: 'manager' as const,\n        active: true\n      };\n      \n      const employee = await storage.createEmployee(firstEmployeeData);\n      res.json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Employee management routes (Manager access only)\n  app.get(\"/api/employees\", requireAuthentication, requireManagerRole, async (req: AuthenticatedRequest, res) => {\n    try {\n      // Get all employees (for employee management)\n      const employees = await storage.getEmployees();\n      res.json(employees);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/employees\", requireAuthentication, requireManagerRole, async (req: AuthenticatedRequest, res) => {\n    try {\n      const employeeData = insertEmployeeSchema.parse(req.body);\n      \n      // Check if access code is already in use\n      const existingEmployee = await storage.getEmployeeByAccessCode(employeeData.accessCode);\n      if (existingEmployee) {\n        return res.status(400).json({ message: \"Access code already in use\" });\n      }\n      \n      const employee = await storage.createEmployee(employeeData);\n      res.json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.patch(\"/api/employees/:id\", requireAuthentication, requireManagerRole, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = patchEmployeeSchema.parse(req.body);\n      \n      // If updating access code, check if it's already in use by another employee\n      if (updates.accessCode) {\n        const existingEmployee = await storage.getEmployeeByAccessCode(updates.accessCode);\n        if (existingEmployee && existingEmployee.id !== id) {\n          return res.status(400).json({ message: \"Access code already in use by another employee\" });\n        }\n      }\n      \n      const employee = await storage.updateEmployee(id, updates);\n      \n      if (!employee) {\n        return res.status(404).json({ message: \"Employee not found\" });\n      }\n      \n      res.json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.put(\"/api/employees/:id\", requireAuthentication, requireManagerRole, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      const updates = updateEmployeeSchema.parse(req.body);\n      \n      // If updating access code, check if it's already in use by another employee\n      if (updates.accessCode) {\n        const existingEmployee = await storage.getEmployeeByAccessCode(updates.accessCode);\n        if (existingEmployee && existingEmployee.id !== id) {\n          return res.status(400).json({ message: \"Access code already in use by another employee\" });\n        }\n      }\n      \n      const employee = await storage.updateEmployee(id, updates);\n      \n      if (!employee) {\n        return res.status(404).json({ message: \"Employee not found\" });\n      }\n      \n      res.json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.delete(\"/api/employees/:id\", requireAuthentication, requireManagerRole, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Don't allow deletion of current user\n      if (req.employee && req.employee.id === id) {\n        return res.status(400).json({ message: \"Cannot delete your own account\" });\n      }\n      \n      await storage.deleteEmployee(id);\n      res.json({ message: \"Employee deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Cash Closures Routes\n  app.get(\"/api/cash-closures\", requireAuthentication, async (req, res) => {\n    try {\n      const queryData = cashClosuresQuerySchema.parse(req.query);\n      const closures = await storage.getCashClosures(\n        queryData.dateFrom,\n        queryData.dateTo\n      );\n      res.json(closures);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid query parameters\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.get(\"/api/cash-closures/history\", requireAuthentication, async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"startDate and endDate are required\" });\n      }\n\n      const closures = await storage.getCashClosures(\n        startDate as string,\n        endDate as string\n      );\n\n      // Get employee names\n      const employees = await storage.getEmployees();\n      const enrichedClosures = closures.map(closure => {\n        const employee = employees.find(emp => emp.id === closure.employeeId);\n        return {\n          ...closure,\n          employeeName: employee?.name || 'Desconocido'\n        };\n      });\n\n      res.json(enrichedClosures);\n    } catch (error) {\n      console.error('Error fetching cash closures history:', error);\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.get(\"/api/cash-closures/:id\", requireAuthentication, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const closure = await storage.getCashClosure(id);\n      \n      if (!closure) {\n        return res.status(404).json({ message: \"Cash closure not found\" });\n      }\n      \n      // Get payment breakdown\n      const payments = await storage.getCashClosurePayments(id);\n      \n      res.json({ ...closure, payments });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.get(\"/api/cash-closures/by-date/:date\", requireAuthentication, async (req, res) => {\n    try {\n      const { date } = req.params;\n      const closure = await storage.getCashClosureByDate(date);\n      \n      if (!closure) {\n        return res.status(404).json({ message: \"No closure found for this date\" });\n      }\n      \n      // Get payment breakdown\n      const payments = await storage.getCashClosurePayments(closure.id);\n      \n      res.json({ ...closure, payments });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/cash-closures\", requireAuthentication, async (req: AuthenticatedRequest, res) => {\n    try {\n      const closureData = createCashClosureSchema.parse(req.body);\n      \n      // Check if closure already exists for this date\n      const existingClosure = await storage.getCashClosureByDate(closureData.closingDate);\n      if (existingClosure) {\n        return res.status(409).json({ message: \"Cash closure already exists for this date\" });\n      }\n      \n      // Get company settings for tax calculation\n      const companySettings = await storage.getCompanySettings();\n      const taxRate = companySettings?.taxRate ? parseFloat(companySettings.taxRate) : 0.18; // Use configured tax rate or fallback to 18%\n      \n      // Calculate system metrics for the closing date\n      const metrics = await storage.getDailyMetrics(closureData.closingDate);\n      \n      // Extract ONLY cash payments from payment breakdown for accurate cash drawer calculation\n      const cashPayment = metrics.paymentBreakdown.find(payment => \n        payment.method.toLowerCase() === 'cash' || payment.method.toLowerCase() === 'efectivo'\n      );\n      const cashPaymentsTotal = cashPayment ? cashPayment.total : 0;\n      \n      // Calculate expected cash in drawer (opening cash + cash payments received)\n      const openingCashAmount = parseFloat(closureData.openingCash?.toString() ?? \"0\");\n      const systemCash = openingCashAmount + cashPaymentsTotal;\n      \n      // Calculate variance if counted cash was provided (counted vs expected cash)\n      const variance = closureData.countedCash !== undefined \n        ? closureData.countedCash - systemCash \n        : null;\n\n      // Create closure with snapshot data\n      const closure = await storage.createCashClosure({\n        closingDate: new Date(closureData.closingDate),\n        employeeId: req.employee.id,\n        openingCash: closureData.openingCash?.toString() ?? \"0\",\n        countedCash: closureData.countedCash?.toString() ?? null,\n        systemCash: systemCash.toString(),\n        variance: variance?.toString() ?? null,\n        notes: closureData.notes ?? null,\n        snapshotSubtotal: (metrics.totalSales / (1 + taxRate)).toString(),\n        snapshotTax: (metrics.totalSales - (metrics.totalSales / (1 + taxRate))).toString(),\n        snapshotTotal: metrics.totalSales.toString(),\n        snapshotTotalInvoices: metrics.totalInvoices,\n        snapshotDeliveredInvoices: metrics.deliveredInvoices,\n        snapshotPendingInvoices: metrics.pendingInvoices,\n        snapshotTotalItems: metrics.totalItems\n      });\n\n      // Create payment breakdown records\n      for (const payment of metrics.paymentBreakdown) {\n        await storage.createCashClosurePayment({\n          cashClosureId: closure.id,\n          methodCode: payment.method,\n          methodName: payment.method, // Would ideally map this to proper name\n          quantity: payment.count,\n          total: payment.total.toString()\n        });\n      }\n\n      // Get complete closure with payments\n      const payments = await storage.getCashClosurePayments(closure.id);\n      \n      res.status(201).json({ ...closure, payments });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.put(\"/api/cash-closures/:id\", requireAuthentication, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      // Calculate variance if countedCash is being updated\n      if (updates.countedCash !== undefined && updates.systemCash) {\n        updates.variance = (parseFloat(updates.countedCash) - parseFloat(updates.systemCash)).toString();\n      }\n      \n      const closure = await storage.updateCashClosure(id, updates);\n      \n      if (!closure) {\n        return res.status(404).json({ message: \"Cash closure not found\" });\n      }\n      \n      res.json(closure);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Cash Closures History Route (with employee names)\n  app.get(\"/api/cash-closures/history\", requireAuthentication, async (req, res) => {\n    try {\n      const queryData = req.query;\n      const startDate = queryData.startDate as string;\n      const endDate = queryData.endDate as string;\n      \n      if (!startDate || !endDate) {\n        return res.status(400).json({ message: \"startDate and endDate are required\" });\n      }\n      \n      // Get closures within date range\n      const closures = await storage.getCashClosures(startDate, endDate);\n      \n      // Enhance with employee names\n      const closuresWithEmployeeNames = await Promise.all(\n        closures.map(async (closure) => {\n          let employeeName = 'N/A';\n          if (closure.employeeId) {\n            try {\n              const employee = await storage.getEmployee(closure.employeeId);\n              employeeName = employee?.name || 'N/A';\n            } catch (error) {\n              console.error(`Error fetching employee ${closure.employeeId}:`, error);\n            }\n          }\n          return {\n            ...closure,\n            employeeName\n          };\n        })\n      );\n      \n      res.json(closuresWithEmployeeNames);\n    } catch (error) {\n      console.error(\"Cash closures history error:\", error);\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Metrics Routes\n  app.get(\"/api/metrics/daily/:date\", requireAuthentication, async (req, res) => {\n    try {\n      const { date } = req.params;\n      const metrics = await storage.getDailyMetrics(date);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.get(\"/api/metrics/monthly/:month\", requireAuthentication, async (req, res) => {\n    try {\n      const { month } = req.params; // Format: YYYY-MM\n      const metrics = await storage.getMonthlyMetrics(month);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.get(\"/api/metrics/range\", requireAuthentication, async (req, res) => {\n    try {\n      const queryData = metricsQuerySchema.parse(req.query);\n      \n      if (queryData.from && queryData.to) {\n        const metrics = await storage.getDateRangeMetrics(queryData.from, queryData.to);\n        res.json(metrics);\n      } else if (queryData.month) {\n        const metrics = await storage.getMonthlyMetrics(queryData.month);\n        res.json(metrics);\n      } else if (queryData.date) {\n        const metrics = await storage.getDailyMetrics(queryData.date);\n        res.json(metrics);\n      } else {\n        res.status(400).json({ message: \"Invalid query parameters\" });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid query parameters\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Airtable Configuration Routes\n  app.get(\"/api/airtable/config\", requireAuthentication, async (req, res) => {\n    try {\n      const config = await storage.getAirtableConfig();\n      if (!config) {\n        return res.json({ enabled: false });\n      }\n      \n      // Don't expose the API token in responses\n      const { apiToken, ...safeConfig } = config;\n      res.json({ ...safeConfig, hasApiToken: !!apiToken });\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.put(\"/api/airtable/config\", requireAuthentication, async (req, res) => {\n    try {\n      const configData = insertAirtableConfigSchema.parse(req.body);\n      const config = await storage.updateAirtableConfig(configData);\n      \n      // Don't expose the API token in responses\n      const { apiToken, ...safeConfig } = config;\n      res.json({ ...safeConfig, hasApiToken: !!apiToken });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Airtable Sync Queue Routes\n  app.get(\"/api/airtable/sync-queue\", requireAuthentication, async (req, res) => {\n    try {\n      const { status, entityType } = req.query;\n      const items = await storage.getAirtableSyncQueueItems(\n        status as string | undefined,\n        entityType as string | undefined\n      );\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/airtable/sync-queue\", requireAuthentication, async (req, res) => {\n    try {\n      const queueData = insertAirtableSyncQueueSchema.parse(req.body);\n      const item = await storage.createAirtableSyncQueueItem(queueData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.put(\"/api/airtable/sync-queue/:id\", requireAuthentication, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const item = await storage.updateAirtableSyncQueueItem(id, updates);\n      \n      if (!item) {\n        return res.status(404).json({ message: \"Sync queue item not found\" });\n      }\n      \n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.delete(\"/api/airtable/sync-queue/:id\", requireAuthentication, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteAirtableSyncQueueItem(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":42376},"server/storage.ts":{"content":"import { type Employee, type InsertEmployee, type Customer, type InsertCustomer, type Service, type InsertService, type Invoice, type InsertInvoice, type InvoiceItem, type InsertInvoiceItem, type PaymentMethod, type InsertPaymentMethod, type CompanySettings, type InsertCompanySettings, type MessageTemplate, type InsertMessageTemplate, type Counter, type InsertCounter, type WhatsappConfig, type InsertWhatsappConfig, type CashClosure, type InsertCashClosure, type CashClosurePayment, type InsertCashClosurePayment, type AirtableConfig, type InsertAirtableConfig, type AirtableSyncQueue, type InsertAirtableSyncQueue, employees, customers, services, invoices, invoiceItems, paymentMethods, companySettings, messageTemplates, counters, whatsappConfig, cashClosures, cashClosurePayments, airtableConfig, airtableSyncQueue } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, desc, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // Employees\n  getEmployee(id: string): Promise<Employee | undefined>;\n  getEmployees(): Promise<Employee[]>;\n  getEmployeeByAccessCode(accessCode: string): Promise<Employee | undefined>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: string, updates: Partial<Employee>): Promise<Employee | undefined>;\n  deleteEmployee(id: string): Promise<void>;\n  \n  // Customers\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomers(): Promise<Customer[]>;\n  getCustomerByPhone(phone: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, updates: Partial<Customer>): Promise<Customer | undefined>;\n  \n  // Services\n  getService(id: string): Promise<Service | undefined>;\n  getServices(): Promise<Service[]>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, updates: Partial<Service>): Promise<Service | undefined>;\n  \n  // Invoices\n  getInvoice(id: string): Promise<Invoice | undefined>;\n  getInvoices(): Promise<Invoice[]>;\n  getInvoicesByCustomer(customerId: string): Promise<Invoice[]>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  updateInvoice(id: string, updates: Partial<Invoice>): Promise<Invoice | undefined>;\n  getNextInvoiceNumber(): Promise<string>;\n  \n  // Invoice Items\n  getInvoiceItems(invoiceId: string): Promise<InvoiceItem[]>;\n  createInvoiceItem(item: InsertInvoiceItem): Promise<InvoiceItem>;\n  deleteInvoiceItems(invoiceId: string): Promise<void>;\n  \n  // Payment Methods\n  getPaymentMethods(): Promise<PaymentMethod[]>;\n  getPaymentMethod(id: string): Promise<PaymentMethod | undefined>;\n  createPaymentMethod(method: InsertPaymentMethod): Promise<PaymentMethod>;\n  updatePaymentMethod(id: string, updates: Partial<PaymentMethod>): Promise<PaymentMethod | undefined>;\n  deletePaymentMethod(id: string): Promise<void>;\n  \n  // Company Settings\n  getCompanySettings(): Promise<CompanySettings | undefined>;\n  updateCompanySettings(settings: InsertCompanySettings): Promise<CompanySettings>;\n  \n  // Message Templates\n  getMessageTemplates(): Promise<MessageTemplate[]>;\n  getMessageTemplate(id: string): Promise<MessageTemplate | undefined>;\n  getMessageTemplateByType(type: string): Promise<MessageTemplate | undefined>;\n  createMessageTemplate(template: InsertMessageTemplate): Promise<MessageTemplate>;\n  updateMessageTemplate(id: string, updates: Partial<MessageTemplate>): Promise<MessageTemplate | undefined>;\n  \n  // WhatsApp Configuration\n  getWhatsappConfig(): Promise<WhatsappConfig | undefined>;\n  updateWhatsappConfig(config: InsertWhatsappConfig): Promise<WhatsappConfig>;\n  \n  // Cash Closures\n  getCashClosure(id: string): Promise<CashClosure | undefined>;\n  getCashClosures(dateFrom?: string, dateTo?: string): Promise<CashClosure[]>;\n  getCashClosureByDate(date: string): Promise<CashClosure | undefined>;\n  createCashClosure(closure: InsertCashClosure): Promise<CashClosure>;\n  updateCashClosure(id: string, updates: Partial<CashClosure>): Promise<CashClosure | undefined>;\n  \n  // Cash Closure Payments\n  getCashClosurePayments(cashClosureId: string): Promise<CashClosurePayment[]>;\n  createCashClosurePayment(payment: InsertCashClosurePayment): Promise<CashClosurePayment>;\n  deleteCashClosurePayments(cashClosureId: string): Promise<void>;\n  \n  // Airtable Configuration\n  getAirtableConfig(): Promise<AirtableConfig | undefined>;\n  updateAirtableConfig(config: InsertAirtableConfig): Promise<AirtableConfig>;\n  \n  // Airtable Sync Queue\n  getAirtableSyncQueueItems(status?: string, entityType?: string): Promise<AirtableSyncQueue[]>;\n  createAirtableSyncQueueItem(item: InsertAirtableSyncQueue): Promise<AirtableSyncQueue>;\n  updateAirtableSyncQueueItem(id: string, updates: Partial<AirtableSyncQueue>): Promise<AirtableSyncQueue | undefined>;\n  deleteAirtableSyncQueueItem(id: string): Promise<void>;\n  \n  // Metrics and Analytics\n  getDailyMetrics(date: string): Promise<{\n    totalSales: number;\n    totalInvoices: number;\n    totalItems: number;\n    deliveredInvoices: number;\n    pendingInvoices: number;\n    paymentBreakdown: Array<{ method: string; total: number; count: number }>;\n  }>;\n  getMonthlyMetrics(month: string): Promise<{\n    totalSales: number;\n    totalInvoices: number;\n    averageDailySales: number;\n    bestDay: { date: string; sales: number };\n    paymentBreakdown: Array<{ method: string; total: number; count: number }>;\n  }>;\n  getDateRangeMetrics(from: string, to: string): Promise<{\n    totalSales: number;\n    totalInvoices: number;\n    dailyTrends: Array<{ date: string; sales: number; invoices: number }>;\n    topServices: Array<{ name: string; quantity: number; revenue: number }>;\n    paymentBreakdown: Array<{ method: string; total: number; count: number }>;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private employees: Map<string, Employee>;\n  private customers: Map<string, Customer>;\n  private services: Map<string, Service>;\n  private invoices: Map<string, Invoice>;\n  private invoiceItems: Map<string, InvoiceItem>;\n  private paymentMethods: Map<string, PaymentMethod>;\n  private companySettings: CompanySettings | undefined;\n  private messageTemplates: Map<string, MessageTemplate>;\n  private whatsappConfig: WhatsappConfig | undefined;\n  private cashClosures: Map<string, CashClosure>;\n  private cashClosurePayments: Map<string, CashClosurePayment>;\n  private airtableConfig: AirtableConfig | undefined;\n  private airtableSyncQueue: Map<string, AirtableSyncQueue>;\n  private invoiceCounter: number;\n\n  // Helper methods for access code hashing\n  private async hashAccessCode(accessCode: string): Promise<string> {\n    const saltRounds = 12;\n    return await bcrypt.hash(accessCode, saltRounds);\n  }\n\n  private async verifyAccessCode(accessCode: string, hashedCode: string): Promise<boolean> {\n    return await bcrypt.compare(accessCode, hashedCode);\n  }\n\n  // Utility function to sanitize employee objects - NEVER expose accessCode in API responses\n  private sanitizeEmployee(employee: Employee): Employee {\n    const { accessCode, ...sanitizedEmployee } = employee;\n    return sanitizedEmployee as Employee;\n  }\n\n  constructor() {\n    this.employees = new Map();\n    this.customers = new Map();\n    this.services = new Map();\n    this.invoices = new Map();\n    this.invoiceItems = new Map();\n    this.paymentMethods = new Map();\n    this.messageTemplates = new Map();\n    this.whatsappConfig = undefined;\n    this.cashClosures = new Map();\n    this.cashClosurePayments = new Map();\n    this.airtableConfig = undefined;\n    this.airtableSyncQueue = new Map();\n    this.invoiceCounter = 10;\n    \n    // Initialize data asynchronously\n    this.seedData().catch(console.error);\n  }\n\n  private async seedData() {\n    // Seed employees with hashed access codes\n    const employees = [\n      { id: randomUUID(), name: 'Juan Carlos', position: 'Gerente General', accessCode: await this.hashAccessCode('1234'), role: 'manager', active: true, createdAt: new Date('2024-01-15'), lastAccess: new Date('2024-09-04') },\n      { id: randomUUID(), name: 'Mar√≠a Fern√°ndez', position: 'Operadora Principal', accessCode: await this.hashAccessCode('5678'), role: 'employee', active: true, createdAt: new Date('2024-02-20'), lastAccess: new Date('2024-09-03') },\n      { id: randomUUID(), name: 'Pedro Gonz√°lez', position: 'Supervisor de Turno', accessCode: await this.hashAccessCode('9999'), role: 'supervisor', active: true, createdAt: new Date('2024-03-10'), lastAccess: new Date('2024-09-02') }\n    ];\n    employees.forEach(emp => this.employees.set(emp.id, emp));\n\n    // Seed services\n    const services = [\n      { id: randomUUID(), name: 'PANTALONES', category: 'Ropa B√°sica', washPrice: '80.00', ironPrice: '60.00', bothPrice: '110.00', active: true, createdAt: new Date('2024-01-15') },\n      { id: randomUUID(), name: 'CAMISAS', category: 'Ropa B√°sica', washPrice: '60.00', ironPrice: '40.00', bothPrice: '85.00', active: true, createdAt: new Date('2024-01-15') },\n      { id: randomUUID(), name: 'VESTIDOS', category: 'Ropa Especial', washPrice: '150.00', ironPrice: '120.00', bothPrice: '220.00', active: true, createdAt: new Date('2024-01-15') },\n      { id: randomUUID(), name: 'BLUSAS', category: 'Ropa B√°sica', washPrice: '60.00', ironPrice: '40.00', bothPrice: '85.00', active: true, createdAt: new Date('2024-01-15') },\n      { id: randomUUID(), name: 'S√ÅBANAS', category: 'Hogar', washPrice: '100.00', ironPrice: '80.00', bothPrice: '150.00', active: true, createdAt: new Date('2024-01-15') },\n      { id: randomUUID(), name: 'TOALLAS (GRANDE)', category: 'Hogar', washPrice: '40.00', ironPrice: '30.00', bothPrice: '60.00', active: true, createdAt: new Date('2024-01-15') }\n    ];\n    services.forEach(service => this.services.set(service.id, service));\n\n    // Seed customers\n    const customers = [\n      { id: randomUUID(), name: 'Juan P√©rez', phone: '809-150-2025', email: 'juan@email.com', totalSpent: '1240.00', ordersCount: 8, createdAt: new Date('2024-01-10') },\n      { id: randomUUID(), name: 'Mar√≠a Garc√≠a', phone: '809-555-1234', email: 'maria@email.com', totalSpent: '890.00', ordersCount: 5, createdAt: new Date('2024-02-15') },\n      { id: randomUUID(), name: 'Pedro L√≥pez', phone: '809-777-9999', email: null, totalSpent: '650.00', ordersCount: 3, createdAt: new Date('2024-03-01') }\n    ];\n    customers.forEach(customer => this.customers.set(customer.id, customer));\n\n    // Seed some sample invoices\n    const sampleInvoices = [\n      {\n        id: randomUUID(),\n        number: 'FAC-009',\n        customerId: customers[0].id,\n        customerName: 'Juan P√©rez',\n        customerPhone: '809-150-2025',\n        customerEmail: 'juan@email.com',\n        deliveryDate: new Date('2025-09-06'),\n        date: new Date('2025-09-04'),\n        subtotal: '320.00',\n        tax: '57.60',\n        total: '377.60',\n        paymentMethod: 'pending',\n        paymentReference: null,\n        status: 'in_process',\n        employeeId: employees[0].id,\n        paid: false,\n        delivered: false,\n        cancelledAt: null,\n        cancellationReason: null\n      },\n      {\n        id: randomUUID(),\n        number: 'FAC-008',\n        customerId: customers[1].id,\n        customerName: 'Mar√≠a Garc√≠a',\n        customerPhone: '809-555-1234',\n        customerEmail: 'maria@email.com',\n        deliveryDate: new Date('2025-09-05'),\n        date: new Date('2025-09-03'),\n        subtotal: '245.76',\n        tax: '44.24',\n        total: '290.00',\n        paymentMethod: 'cash',\n        paymentReference: null,\n        status: 'ready',\n        employeeId: employees[1].id,\n        paid: true,\n        delivered: false,\n        cancelledAt: null,\n        cancellationReason: null\n      }\n    ];\n    sampleInvoices.forEach(invoice => this.invoices.set(invoice.id, invoice));\n\n    // Seed payment methods\n    const paymentMethods = [\n      {\n        id: randomUUID(),\n        name: 'Efectivo',\n        code: 'cash',\n        icon: 'üíµ',\n        active: true,\n        requiresReference: false,\n        commission: '0',\n        description: 'Pago en efectivo',\n        showOnInvoice: true,\n        color: '#10B981',\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: 'Tarjeta de Cr√©dito',\n        code: 'card',\n        icon: 'üí≥',\n        active: true,\n        requiresReference: true,\n        commission: '3.5',\n        description: 'Visa, Mastercard, American Express',\n        showOnInvoice: true,\n        color: '#3B82F6',\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: 'Transferencia Bancaria',\n        code: 'transfer',\n        icon: 'üè¶',\n        active: true,\n        requiresReference: true,\n        commission: '0',\n        description: 'Transferencia entre cuentas',\n        showOnInvoice: true,\n        color: '#F59E0B',\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: 'Pago M√≥vil',\n        code: 'mobile_pay',\n        icon: 'üì±',\n        active: true,\n        requiresReference: true,\n        commission: '0',\n        description: 'Pago m√≥vil bancario',\n        showOnInvoice: true,\n        color: '#8B5CF6',\n        createdAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        name: 'Pago Pendiente',\n        code: 'pending',\n        icon: '‚è≥',\n        active: true,\n        requiresReference: false,\n        commission: '0',\n        description: 'Pago a realizar posteriormente',\n        showOnInvoice: true,\n        color: '#F97316',\n        createdAt: new Date()\n      }\n    ];\n    paymentMethods.forEach(method => this.paymentMethods.set(method.id, method));\n\n    // Seed company settings\n    this.companySettings = {\n      id: randomUUID(),\n      name: 'CleanWash Lavander√≠a',\n      commercialName: 'CleanWash',\n      email: 'admin@cleanwash.com',\n      phone: '809-555-0123',\n      phone2: '809-555-0124',\n      address: 'Av. Principal #123, Santo Domingo',\n      branch: 'Sucursal Centro',\n      city: 'Santo Domingo',\n      province: 'Distrito Nacional',\n      postalCode: '10101',\n      rnc: '131-12345-6',\n      website: 'www.cleanwash.com',\n      logo: null,\n      invoiceFooter: 'Gracias por preferirnos - CleanWash Lavander√≠a',\n      showRncOnInvoice: true,\n      showAddressOnInvoice: true,\n      showPhoneOnInvoice: true,\n      showEmailOnInvoice: true,\n      taxRate: '0.18',\n      updatedAt: new Date()\n    };\n\n    // Seed message templates\n    const messageTemplates = [\n      {\n        id: randomUUID(),\n        type: 'order_ready',\n        title: 'üéâ ¬°Tu pedido est√° listo!',\n        message: 'Hola {cliente_nombre}! üëã\\n\\n¬°Excelentes noticias! Tu pedido #{factura_numero} est√° listo para recoger.\\n\\nüìã *Detalles del pedido:*\\n‚Ä¢ Fecha de entrega: {fecha_entrega}\\n‚Ä¢ Total de prendas: {total_prendas}\\n‚Ä¢ Total a pagar: RD$ {total_pagar}\\n\\nüè™ *Informaci√≥n de recogida:*\\n‚Ä¢ Direcci√≥n: {empresa_direccion}\\n‚Ä¢ Horario: {empresa_horario}\\n‚Ä¢ Tel√©fono: {empresa_telefono}\\n\\n¬°Gracias por confiar en nosotros! ‚ú®\\n\\n_{empresa_nombre}_',\n        active: true,\n        autoSend: true,\n        sendTime: '09:00',\n        reminderDays: null,\n        updatedAt: new Date()\n      },\n      {\n        id: randomUUID(),\n        type: 'invoice_whatsapp',\n        title: 'üìÑ Factura de tu pedido',\n        message: 'Hola {cliente_nombre}! üëã\\n\\nAqu√≠ tienes la factura de tu pedido #{factura_numero}\\n\\nüìã *Resumen del pedido:*\\n‚Ä¢ Fecha: {fecha_factura}\\n‚Ä¢ Prendas: {total_prendas}\\n‚Ä¢ Subtotal: RD$ {subtotal}\\n‚Ä¢ ITBIS (18%): RD$ {itbis}\\n‚Ä¢ *Total: RD$ {total}*\\n\\nüí≥ *Estado del pago:* {estado_pago}\\nüìÖ *Fecha de entrega:* {fecha_entrega}\\n\\n{detalles_articulos}\\n\\n¬°Gracias por elegirnos! üôè\\n\\n_{empresa_nombre}_\\nüìç {empresa_direccion}\\nüìû {empresa_telefono}',\n        active: true,\n        autoSend: false,\n        sendTime: null,\n        reminderDays: null,\n        updatedAt: new Date()\n      }\n    ];\n    messageTemplates.forEach(template => this.messageTemplates.set(template.id, template));\n  }\n\n  // Employee methods\n  async getEmployee(id: string): Promise<Employee | undefined> {\n    const employee = this.employees.get(id);\n    return employee ? this.sanitizeEmployee(employee) : undefined;\n  }\n\n  async getEmployeeByAccessCode(accessCode: string): Promise<Employee | undefined> {\n    const employees = Array.from(this.employees.values());\n    for (const emp of employees) {\n      if (await this.verifyAccessCode(accessCode, emp.accessCode)) {\n        return this.sanitizeEmployee(emp);\n      }\n    }\n    return undefined;\n  }\n\n  async getEmployees(): Promise<Employee[]> {\n    return Array.from(this.employees.values())\n      .map(emp => this.sanitizeEmployee(emp))\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const id = randomUUID();\n    const hashedAccessCode = await this.hashAccessCode(employee.accessCode);\n    const newEmployee: Employee = { \n      ...employee, \n      id,\n      accessCode: hashedAccessCode,\n      active: employee.active ?? true,\n      createdAt: new Date(),\n      lastAccess: null\n    };\n    this.employees.set(id, newEmployee);\n    \n    return this.sanitizeEmployee(newEmployee);\n  }\n\n  async updateEmployee(id: string, updates: Partial<Employee>): Promise<Employee | undefined> {\n    const employee = this.employees.get(id);\n    if (!employee) return undefined;\n    \n    // If accessCode is empty, don't include it in the updates\n    let processedUpdates = { ...updates };\n    if ('accessCode' in processedUpdates) {\n      if (!processedUpdates.accessCode || processedUpdates.accessCode.trim() === '') {\n        delete processedUpdates.accessCode;\n      } else {\n        processedUpdates.accessCode = await this.hashAccessCode(processedUpdates.accessCode);\n      }\n    }\n    \n    const updated = { ...employee, ...processedUpdates };\n    this.employees.set(id, updated);\n    \n    return this.sanitizeEmployee(updated);\n  }\n\n  async deleteEmployee(id: string): Promise<void> {\n    this.employees.delete(id);\n  }\n\n  // Customer methods\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    return this.customers.get(id);\n  }\n\n  async getCustomers(): Promise<Customer[]> {\n    return Array.from(this.customers.values());\n  }\n\n  async getCustomerByPhone(phone: string): Promise<Customer | undefined> {\n    return Array.from(this.customers.values()).find(customer => customer.phone === phone);\n  }\n\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const id = randomUUID();\n    const newCustomer: Customer = { \n      ...customer, \n      id, \n      email: customer.email ?? null,\n      totalSpent: '0.00',\n      ordersCount: 0,\n      createdAt: new Date()\n    };\n    this.customers.set(id, newCustomer);\n    return newCustomer;\n  }\n\n  async updateCustomer(id: string, updates: Partial<Customer>): Promise<Customer | undefined> {\n    const customer = this.customers.get(id);\n    if (!customer) return undefined;\n    \n    const updated = { ...customer, ...updates };\n    this.customers.set(id, updated);\n    return updated;\n  }\n\n  // Service methods\n  async getService(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async getServices(): Promise<Service[]> {\n    return Array.from(this.services.values());\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const id = randomUUID();\n    const newService: Service = {\n      ...service,\n      id,\n      active: service.active ?? true,\n      category: service.category ?? 'Ropa B√°sica',\n      createdAt: new Date()\n    };\n    this.services.set(id, newService);\n    return newService;\n  }\n\n  async updateService(id: string, updates: Partial<Service>): Promise<Service | undefined> {\n    const service = this.services.get(id);\n    if (!service) return undefined;\n    \n    const updated = { ...service, ...updates };\n    this.services.set(id, updated);\n    return updated;\n  }\n\n  // Invoice methods\n  async getInvoice(id: string): Promise<Invoice | undefined> {\n    return this.invoices.get(id);\n  }\n\n  async getInvoices(): Promise<Invoice[]> {\n    return Array.from(this.invoices.values()).sort((a, b) => \n      new Date(b.date || 0).getTime() - new Date(a.date || 0).getTime()\n    );\n  }\n\n  async getInvoicesByCustomer(customerId: string): Promise<Invoice[]> {\n    return Array.from(this.invoices.values()).filter(invoice => invoice.customerId === customerId);\n  }\n\n  async createInvoice(invoice: InsertInvoice): Promise<Invoice> {\n    const id = randomUUID();\n    const newInvoice: Invoice = {\n      ...invoice,\n      id,\n      customerId: invoice.customerId ?? null,\n      customerEmail: invoice.customerEmail ?? null,\n      deliveryDate: invoice.deliveryDate ?? null,\n      paymentMethod: invoice.paymentMethod ?? null,\n      paymentReference: invoice.paymentReference ?? null,\n      date: invoice.date || new Date(),\n      status: invoice.status || 'received',\n      employeeId: invoice.employeeId ?? null,\n      paid: invoice.paid ?? false,\n      delivered: invoice.delivered ?? false,\n      cancelledAt: invoice.cancelledAt ?? null,\n      cancellationReason: invoice.cancellationReason ?? null\n    };\n    this.invoices.set(id, newInvoice);\n    return newInvoice;\n  }\n\n  async updateInvoice(id: string, updates: Partial<Invoice>): Promise<Invoice | undefined> {\n    const invoice = this.invoices.get(id);\n    if (!invoice) return undefined;\n    \n    const updated = { ...invoice, ...updates };\n    this.invoices.set(id, updated);\n    return updated;\n  }\n\n  async getNextInvoiceNumber(): Promise<string> {\n    // Incrementar primero para evitar race conditions\n    const nextNumber = this.invoiceCounter++;\n    const number = `FAC-${String(nextNumber).padStart(3, '0')}`;\n    return number;\n  }\n\n  // Invoice Item methods\n  async getInvoiceItems(invoiceId: string): Promise<InvoiceItem[]> {\n    return Array.from(this.invoiceItems.values()).filter(item => item.invoiceId === invoiceId);\n  }\n\n  async createInvoiceItem(item: InsertInvoiceItem): Promise<InvoiceItem> {\n    const id = randomUUID();\n    const newItem: InvoiceItem = { ...item, id };\n    this.invoiceItems.set(id, newItem);\n    return newItem;\n  }\n\n  async deleteInvoiceItems(invoiceId: string): Promise<void> {\n    const items = await this.getInvoiceItems(invoiceId);\n    items.forEach(item => this.invoiceItems.delete(item.id));\n  }\n\n  // Payment Methods\n  async getPaymentMethods(): Promise<PaymentMethod[]> {\n    return Array.from(this.paymentMethods.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getPaymentMethod(id: string): Promise<PaymentMethod | undefined> {\n    return this.paymentMethods.get(id);\n  }\n\n  async createPaymentMethod(method: InsertPaymentMethod): Promise<PaymentMethod> {\n    const id = randomUUID();\n    const newMethod: PaymentMethod = { \n      ...method, \n      id,\n      active: method.active ?? true,\n      requiresReference: method.requiresReference ?? false,\n      commission: method.commission ?? '0',\n      description: method.description ?? null,\n      showOnInvoice: method.showOnInvoice ?? true,\n      color: method.color ?? '#3B82F6',\n      createdAt: new Date()\n    };\n    this.paymentMethods.set(id, newMethod);\n    return newMethod;\n  }\n\n  async updatePaymentMethod(id: string, updates: Partial<PaymentMethod>): Promise<PaymentMethod | undefined> {\n    const method = this.paymentMethods.get(id);\n    if (!method) return undefined;\n    \n    const updated = { ...method, ...updates };\n    this.paymentMethods.set(id, updated);\n    return updated;\n  }\n\n  async deletePaymentMethod(id: string): Promise<void> {\n    this.paymentMethods.delete(id);\n  }\n\n  // Company Settings\n  async getCompanySettings(): Promise<CompanySettings | undefined> {\n    return this.companySettings;\n  }\n\n  async updateCompanySettings(settings: InsertCompanySettings): Promise<CompanySettings> {\n    const updated: CompanySettings = {\n      ...settings,\n      id: this.companySettings?.id || randomUUID(),\n      email: settings.email ?? null,\n      commercialName: settings.commercialName ?? null,\n      phone2: settings.phone2 ?? null,\n      address: settings.address ?? null,\n      branch: settings.branch ?? null,\n      city: settings.city ?? null,\n      province: settings.province ?? null,\n      postalCode: settings.postalCode ?? null,\n      rnc: settings.rnc ?? null,\n      website: settings.website ?? null,\n      logo: settings.logo ?? null,\n      invoiceFooter: settings.invoiceFooter ?? null,\n      showRncOnInvoice: settings.showRncOnInvoice ?? true,\n      showAddressOnInvoice: settings.showAddressOnInvoice ?? true,\n      showPhoneOnInvoice: settings.showPhoneOnInvoice ?? true,\n      showEmailOnInvoice: settings.showEmailOnInvoice ?? true,\n      taxRate: settings.taxRate ?? '0.18',\n      updatedAt: new Date()\n    };\n    this.companySettings = updated;\n    return updated;\n  }\n\n  // Message Templates\n  async getMessageTemplates(): Promise<MessageTemplate[]> {\n    return Array.from(this.messageTemplates.values()).sort((a, b) => a.type.localeCompare(b.type));\n  }\n\n  async getMessageTemplate(id: string): Promise<MessageTemplate | undefined> {\n    return this.messageTemplates.get(id);\n  }\n\n  async getMessageTemplateByType(type: string): Promise<MessageTemplate | undefined> {\n    return Array.from(this.messageTemplates.values()).find(template => template.type === type);\n  }\n\n  async createMessageTemplate(template: InsertMessageTemplate): Promise<MessageTemplate> {\n    const id = randomUUID();\n    const newTemplate: MessageTemplate = { \n      ...template, \n      id,\n      active: template.active ?? true,\n      autoSend: template.autoSend ?? false,\n      sendTime: template.sendTime ?? null,\n      reminderDays: template.reminderDays ?? null,\n      updatedAt: new Date()\n    };\n    this.messageTemplates.set(id, newTemplate);\n    return newTemplate;\n  }\n\n  async updateMessageTemplate(id: string, updates: Partial<MessageTemplate>): Promise<MessageTemplate | undefined> {\n    const template = this.messageTemplates.get(id);\n    if (!template) return undefined;\n    \n    const updated = { ...template, ...updates, updatedAt: new Date() };\n    this.messageTemplates.set(id, updated);\n    return updated;\n  }\n\n  // WhatsApp Configuration\n  async getWhatsappConfig(): Promise<WhatsappConfig | undefined> {\n    return this.whatsappConfig;\n  }\n\n  async updateWhatsappConfig(config: InsertWhatsappConfig): Promise<WhatsappConfig> {\n    const updated: WhatsappConfig = {\n      ...config,\n      id: this.whatsappConfig?.id || randomUUID(),\n      apiKey: config.apiKey ?? null,\n      provider: config.provider ?? 'twilio',\n      baseUrl: config.baseUrl ?? null,\n      enabled: config.enabled ?? false,\n      autoSendOnReady: config.autoSendOnReady ?? false,\n      retryAttempts: config.retryAttempts ?? 3,\n      retryDelay: config.retryDelay ?? 5,\n      updatedAt: new Date()\n    };\n    this.whatsappConfig = updated;\n    return updated;\n  }\n\n  // Cash Closures\n  async getCashClosure(id: string): Promise<CashClosure | undefined> {\n    return this.cashClosures.get(id);\n  }\n\n  async getCashClosures(dateFrom?: string, dateTo?: string): Promise<CashClosure[]> {\n    const allClosures = Array.from(this.cashClosures.values());\n    if (!dateFrom && !dateTo) {\n      return allClosures.sort((a, b) => new Date(b.closingDate).getTime() - new Date(a.closingDate).getTime());\n    }\n    \n    return allClosures.filter(closure => {\n      const closureDate = new Date(closure.closingDate).toISOString().split('T')[0];\n      if (dateFrom && closureDate < dateFrom) return false;\n      if (dateTo && closureDate > dateTo) return false;\n      return true;\n    }).sort((a, b) => new Date(b.closingDate).getTime() - new Date(a.closingDate).getTime());\n  }\n\n  async getCashClosureByDate(date: string): Promise<CashClosure | undefined> {\n    return Array.from(this.cashClosures.values()).find(closure => \n      new Date(closure.closingDate).toISOString().split('T')[0] === date\n    );\n  }\n\n  async createCashClosure(closure: InsertCashClosure): Promise<CashClosure> {\n    const id = randomUUID();\n    const newClosure: CashClosure = {\n      ...closure,\n      id,\n      openedAt: new Date(),\n      closedAt: closure.closedAt ?? null,\n      openingCash: closure.openingCash ?? \"0\",\n      countedCash: closure.countedCash ?? null,\n      variance: closure.variance ?? null,\n      notes: closure.notes ?? null,\n      createdAt: new Date()\n    };\n    this.cashClosures.set(id, newClosure);\n    return newClosure;\n  }\n\n  async updateCashClosure(id: string, updates: Partial<CashClosure>): Promise<CashClosure | undefined> {\n    const closure = this.cashClosures.get(id);\n    if (!closure) return undefined;\n    \n    const updated = { ...closure, ...updates };\n    this.cashClosures.set(id, updated);\n    return updated;\n  }\n\n  // Cash Closure Payments\n  async getCashClosurePayments(cashClosureId: string): Promise<CashClosurePayment[]> {\n    return Array.from(this.cashClosurePayments.values()).filter(payment => \n      payment.cashClosureId === cashClosureId\n    );\n  }\n\n  async createCashClosurePayment(payment: InsertCashClosurePayment): Promise<CashClosurePayment> {\n    const id = randomUUID();\n    const newPayment: CashClosurePayment = { ...payment, id };\n    this.cashClosurePayments.set(id, newPayment);\n    return newPayment;\n  }\n\n  async deleteCashClosurePayments(cashClosureId: string): Promise<void> {\n    const payments = await this.getCashClosurePayments(cashClosureId);\n    payments.forEach(payment => this.cashClosurePayments.delete(payment.id));\n  }\n\n  // Airtable Configuration\n  async getAirtableConfig(): Promise<AirtableConfig | undefined> {\n    return this.airtableConfig;\n  }\n\n  async updateAirtableConfig(config: InsertAirtableConfig): Promise<AirtableConfig> {\n    const updated: AirtableConfig = {\n      ...config,\n      id: this.airtableConfig?.id || randomUUID(),\n      enabled: config.enabled ?? false,\n      baseId: config.baseId ?? null,\n      tableInvoices: config.tableInvoices ?? 'Invoices',\n      tableInvoiceItems: config.tableInvoiceItems ?? 'Invoice Items',\n      apiToken: config.apiToken ?? null,\n      lastSyncDate: config.lastSyncDate ?? null,\n      syncStatus: config.syncStatus ?? 'idle',\n      lastError: config.lastError ?? null,\n      updatedAt: new Date()\n    };\n    this.airtableConfig = updated;\n    return updated;\n  }\n\n  // Airtable Sync Queue\n  async getAirtableSyncQueueItems(status?: string, entityType?: string): Promise<AirtableSyncQueue[]> {\n    return Array.from(this.airtableSyncQueue.values()).filter(item => {\n      if (status && item.status !== status) return false;\n      if (entityType && item.entityType !== entityType) return false;\n      return true;\n    }).sort((a, b) => new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime());\n  }\n\n  async createAirtableSyncQueueItem(item: InsertAirtableSyncQueue): Promise<AirtableSyncQueue> {\n    const id = randomUUID();\n    const newItem: AirtableSyncQueue = {\n      ...item,\n      id,\n      status: item.status ?? 'pending',\n      retries: item.retries ?? 0,\n      maxRetries: item.maxRetries ?? 3,\n      lastError: item.lastError ?? null,\n      externalId: item.externalId ?? null,\n      lastSyncedAt: item.lastSyncedAt ?? null,\n      createdAt: new Date()\n    };\n    this.airtableSyncQueue.set(id, newItem);\n    return newItem;\n  }\n\n  async updateAirtableSyncQueueItem(id: string, updates: Partial<AirtableSyncQueue>): Promise<AirtableSyncQueue | undefined> {\n    const item = this.airtableSyncQueue.get(id);\n    if (!item) return undefined;\n    \n    const updated = { ...item, ...updates };\n    this.airtableSyncQueue.set(id, updated);\n    return updated;\n  }\n\n  async deleteAirtableSyncQueueItem(id: string): Promise<void> {\n    this.airtableSyncQueue.delete(id);\n  }\n\n  // Metrics and Analytics\n  async getDailyMetrics(date: string): Promise<{\n    totalSales: number;\n    totalInvoices: number;\n    totalItems: number;\n    deliveredInvoices: number;\n    pendingInvoices: number;\n    paymentBreakdown: Array<{ method: string; total: number; count: number }>;\n  }> {\n    const invoicesOfDay = Array.from(this.invoices.values()).filter(invoice => {\n      const invoiceDate = new Date(invoice.date || 0).toISOString().split('T')[0];\n      return invoiceDate === date;\n    });\n\n    const totalSales = invoicesOfDay.reduce((sum, inv) => sum + parseFloat(inv.total), 0);\n    const totalInvoices = invoicesOfDay.length;\n    const deliveredInvoices = invoicesOfDay.filter(inv => inv.delivered).length;\n    const pendingInvoices = invoicesOfDay.filter(inv => !inv.delivered && inv.status !== 'cancelled').length;\n    \n    // Get total items\n    const invoiceIds = invoicesOfDay.map(inv => inv.id);\n    const items = Array.from(this.invoiceItems.values()).filter(item => invoiceIds.includes(item.invoiceId));\n    const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);\n\n    // Payment breakdown\n    const paymentBreakdown = new Map<string, { total: number; count: number }>();\n    invoicesOfDay.forEach(invoice => {\n      if (!invoice.paymentMethod || invoice.paymentMethod === 'pending') return;\n      const current = paymentBreakdown.get(invoice.paymentMethod) || { total: 0, count: 0 };\n      paymentBreakdown.set(invoice.paymentMethod, {\n        total: current.total + parseFloat(invoice.total),\n        count: current.count + 1\n      });\n    });\n\n    return {\n      totalSales,\n      totalInvoices,\n      totalItems,\n      deliveredInvoices,\n      pendingInvoices,\n      paymentBreakdown: Array.from(paymentBreakdown.entries()).map(([method, data]) => ({\n        method,\n        total: data.total,\n        count: data.count\n      }))\n    };\n  }\n\n  async getMonthlyMetrics(month: string): Promise<{\n    totalSales: number;\n    totalInvoices: number;\n    averageDailySales: number;\n    bestDay: { date: string; sales: number };\n    paymentBreakdown: Array<{ method: string; total: number; count: number }>;\n  }> {\n    const invoicesOfMonth = Array.from(this.invoices.values()).filter(invoice => {\n      const invoiceMonth = new Date(invoice.date || 0).toISOString().substring(0, 7);\n      return invoiceMonth === month;\n    });\n\n    const totalSales = invoicesOfMonth.reduce((sum, inv) => sum + parseFloat(inv.total), 0);\n    const totalInvoices = invoicesOfMonth.length;\n    \n    // Group by day to find best day and calculate average\n    const dailySales = new Map<string, number>();\n    invoicesOfMonth.forEach(invoice => {\n      const day = new Date(invoice.date || 0).toISOString().split('T')[0];\n      const current = dailySales.get(day) || 0;\n      dailySales.set(day, current + parseFloat(invoice.total));\n    });\n\n    const bestDay = Array.from(dailySales.entries()).reduce((best, [date, sales]) => \n      sales > best.sales ? { date, sales } : best, { date: '', sales: 0 });\n    \n    const averageDailySales = dailySales.size > 0 ? totalSales / dailySales.size : 0;\n\n    // Payment breakdown\n    const paymentBreakdown = new Map<string, { total: number; count: number }>();\n    invoicesOfMonth.forEach(invoice => {\n      if (!invoice.paymentMethod || invoice.paymentMethod === 'pending') return;\n      const current = paymentBreakdown.get(invoice.paymentMethod) || { total: 0, count: 0 };\n      paymentBreakdown.set(invoice.paymentMethod, {\n        total: current.total + parseFloat(invoice.total),\n        count: current.count + 1\n      });\n    });\n\n    return {\n      totalSales,\n      totalInvoices,\n      averageDailySales,\n      bestDay,\n      paymentBreakdown: Array.from(paymentBreakdown.entries()).map(([method, data]) => ({\n        method,\n        total: data.total,\n        count: data.count\n      }))\n    };\n  }\n\n  async getDateRangeMetrics(from: string, to: string): Promise<{\n    totalSales: number;\n    totalInvoices: number;\n    dailyTrends: Array<{ date: string; sales: number; invoices: number }>;\n    topServices: Array<{ name: string; quantity: number; revenue: number }>;\n    paymentBreakdown: Array<{ method: string; total: number; count: number }>;\n  }> {\n    const invoicesInRange = Array.from(this.invoices.values()).filter(invoice => {\n      const invoiceDate = new Date(invoice.date || 0).toISOString().split('T')[0];\n      return invoiceDate >= from && invoiceDate <= to;\n    });\n\n    const totalSales = invoicesInRange.reduce((sum, inv) => sum + parseFloat(inv.total), 0);\n    const totalInvoices = invoicesInRange.length;\n\n    // Daily trends\n    const dailyTrends = new Map<string, { sales: number; invoices: number }>();\n    invoicesInRange.forEach(invoice => {\n      const day = new Date(invoice.date || 0).toISOString().split('T')[0];\n      const current = dailyTrends.get(day) || { sales: 0, invoices: 0 };\n      dailyTrends.set(day, {\n        sales: current.sales + parseFloat(invoice.total),\n        invoices: current.invoices + 1\n      });\n    });\n\n    // Top services (simplified implementation)\n    const serviceStats = new Map<string, { quantity: number; revenue: number }>();\n    const invoiceIds = invoicesInRange.map(inv => inv.id);\n    const items = Array.from(this.invoiceItems.values()).filter(item => invoiceIds.includes(item.invoiceId));\n    \n    items.forEach(item => {\n      const current = serviceStats.get(item.serviceName) || { quantity: 0, revenue: 0 };\n      serviceStats.set(item.serviceName, {\n        quantity: current.quantity + item.quantity,\n        revenue: current.revenue + parseFloat(item.unitPrice) * item.quantity\n      });\n    });\n\n    // Payment breakdown\n    const paymentBreakdown = new Map<string, { total: number; count: number }>();\n    invoicesInRange.forEach(invoice => {\n      if (!invoice.paymentMethod || invoice.paymentMethod === 'pending') return;\n      const current = paymentBreakdown.get(invoice.paymentMethod) || { total: 0, count: 0 };\n      paymentBreakdown.set(invoice.paymentMethod, {\n        total: current.total + parseFloat(invoice.total),\n        count: current.count + 1\n      });\n    });\n\n    return {\n      totalSales,\n      totalInvoices,\n      dailyTrends: Array.from(dailyTrends.entries())\n        .map(([date, data]) => ({ date, ...data }))\n        .sort((a, b) => a.date.localeCompare(b.date)),\n      topServices: Array.from(serviceStats.entries())\n        .map(([name, data]) => ({ name, ...data }))\n        .sort((a, b) => b.revenue - a.revenue)\n        .slice(0, 10),\n      paymentBreakdown: Array.from(paymentBreakdown.entries()).map(([method, data]) => ({\n        method,\n        total: data.total,\n        count: data.count\n      }))\n    };\n  }\n}\n\n// DatabaseStorage implementation using PostgreSQL with Drizzle ORM\nexport class DatabaseStorage implements IStorage {\n  // Utility function to sanitize employee objects - NEVER expose accessCode in API responses\n  private sanitizeEmployee(employee: Employee): Employee {\n    const { accessCode, ...sanitizedEmployee } = employee;\n    return sanitizedEmployee as Employee;\n  }\n\n  // Employees\n  async getEmployee(id: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.id, id));\n    return employee ? this.sanitizeEmployee(employee) : undefined;\n  }\n\n  async getEmployees(): Promise<Employee[]> {\n    const employeeList = await db.select().from(employees);\n    return employeeList.map(emp => this.sanitizeEmployee(emp));\n  }\n\n  async getEmployeeByAccessCode(accessCode: string): Promise<Employee | undefined> {\n    const [employee] = await db.select().from(employees).where(eq(employees.accessCode, accessCode));\n    return employee ? this.sanitizeEmployee(employee) : undefined;\n  }\n\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const [newEmployee] = await db.insert(employees).values(employee).returning();\n    return this.sanitizeEmployee(newEmployee);\n  }\n\n  async updateEmployee(id: string, updates: Partial<Employee>): Promise<Employee | undefined> {\n    // If accessCode is empty, don't include it in the updates\n    const cleanedUpdates = { ...updates };\n    if ('accessCode' in cleanedUpdates && (!cleanedUpdates.accessCode || cleanedUpdates.accessCode.trim() === '')) {\n      delete cleanedUpdates.accessCode;\n    }\n    \n    const [updated] = await db.update(employees)\n      .set({ ...cleanedUpdates, lastAccess: new Date() })\n      .where(eq(employees.id, id))\n      .returning();\n    return updated ? this.sanitizeEmployee(updated) : undefined;\n  }\n\n  async deleteEmployee(id: string): Promise<void> {\n    await db.delete(employees).where(eq(employees.id, id));\n  }\n\n  // Customers\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.id, id));\n    return customer || undefined;\n  }\n\n  async getCustomers(): Promise<Customer[]> {\n    return await db.select().from(customers);\n  }\n\n  async getCustomerByPhone(phone: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.phone, phone));\n    return customer || undefined;\n  }\n\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const [newCustomer] = await db.insert(customers).values(customer).returning();\n    return newCustomer;\n  }\n\n  async updateCustomer(id: string, updates: Partial<Customer>): Promise<Customer | undefined> {\n    const [updated] = await db.update(customers)\n      .set(updates)\n      .where(eq(customers.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // Services\n  async getService(id: string): Promise<Service | undefined> {\n    const [service] = await db.select().from(services).where(eq(services.id, id));\n    return service || undefined;\n  }\n\n  async getServices(): Promise<Service[]> {\n    return await db.select().from(services);\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const [newService] = await db.insert(services).values(service).returning();\n    return newService;\n  }\n\n  async updateService(id: string, updates: Partial<Service>): Promise<Service | undefined> {\n    const [updated] = await db.update(services)\n      .set(updates)\n      .where(eq(services.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // Invoices\n  async getInvoice(id: string): Promise<Invoice | undefined> {\n    const [invoice] = await db.select().from(invoices).where(eq(invoices.id, id));\n    return invoice || undefined;\n  }\n\n  async getInvoices(): Promise<Invoice[]> {\n    return await db.select().from(invoices).orderBy(desc(invoices.date));\n  }\n\n  async getInvoicesByCustomer(customerId: string): Promise<Invoice[]> {\n    return await db.select().from(invoices)\n      .where(eq(invoices.customerId, customerId))\n      .orderBy(desc(invoices.date));\n  }\n\n  async createInvoice(invoice: InsertInvoice): Promise<Invoice> {\n    const [newInvoice] = await db.insert(invoices).values(invoice).returning();\n    return newInvoice;\n  }\n\n  async updateInvoice(id: string, updates: Partial<Invoice>): Promise<Invoice | undefined> {\n    const [updated] = await db.update(invoices)\n      .set(updates)\n      .where(eq(invoices.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async getNextInvoiceNumber(): Promise<string> {\n    const maxAttempts = 3;\n    const baseDelayMs = 200;\n    const counterId = 'invoice_number';\n\n    const isTransientPgError = (e: any) => {\n      const codes = new Set(['57P01','57P02','57P03','53300','53410','08006','08003','08000']);\n      const messages = ['Connection terminated', 'terminating connection', 'ECONNRESET', 'ETIMEDOUT', 'socket hang up', 'closed the connection unexpectedly'];\n      const msg = String(e?.message ?? e ?? '');\n      return codes.has((e as any)?.code) || messages.some(m => msg.includes(m));\n    };\n\n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        return await db.transaction(async (tx) => {\n          // Ensure counter exists in the same transaction\n          const existingInvoices = await tx\n            .select({ count: sql<number>`count(*)` })\n            .from(invoices);\n          const currentCount = existingInvoices[0]?.count || 0;\n\n          await tx.execute(sql`\n            INSERT INTO counters (id, value, updated_at)\n            VALUES (${counterId}, ${currentCount}, NOW())\n            ON CONFLICT (id) DO NOTHING\n          `);\n\n          const result = await tx.execute(sql`\n            UPDATE counters\n            SET value = value + 1, updated_at = NOW()\n            WHERE id = ${counterId}\n            RETURNING value\n          `);\n\n          const updatedValue = result.rows?.[0]?.value;\n          if (updatedValue === undefined || updatedValue === null) {\n            throw new Error(`Failed to update counter for ${counterId}`);\n          }\n\n          return `FAC-${String(updatedValue).padStart(3, '0')}`;\n        });\n      } catch (e) {\n        if (isTransientPgError(e) && attempt < maxAttempts) {\n          const delay = baseDelayMs * Math.pow(2, attempt - 1);\n          await new Promise(r => setTimeout(r, delay));\n          continue;\n        }\n        console.error('[ERROR] getNextInvoiceNumber failed; using fallback:', e);\n        // Fallback: generate a unique, monotonic-ish number to avoid crashing\n        const fallback = `FAC-OFFLINE-${new Date().toISOString().replace(/[-:TZ.]/g, '').slice(0, 14)}`;\n        return fallback;\n      }\n    }\n\n    // Should never reach here\n    return `FAC-${Date.now()}`;\n  }\n\n  // Invoice Items\n  async getInvoiceItems(invoiceId: string): Promise<InvoiceItem[]> {\n    return await db.select().from(invoiceItems).where(eq(invoiceItems.invoiceId, invoiceId));\n  }\n\n  async createInvoiceItem(item: InsertInvoiceItem): Promise<InvoiceItem> {\n    const [newItem] = await db.insert(invoiceItems).values(item).returning();\n    return newItem;\n  }\n\n  async deleteInvoiceItems(invoiceId: string): Promise<void> {\n    await db.delete(invoiceItems).where(eq(invoiceItems.invoiceId, invoiceId));\n  }\n\n  // Payment Methods\n  async getPaymentMethods(): Promise<PaymentMethod[]> {\n    return await db.select().from(paymentMethods).where(eq(paymentMethods.active, true));\n  }\n\n  async getPaymentMethod(id: string): Promise<PaymentMethod | undefined> {\n    const [method] = await db.select().from(paymentMethods).where(eq(paymentMethods.id, id));\n    return method || undefined;\n  }\n\n  async createPaymentMethod(method: InsertPaymentMethod): Promise<PaymentMethod> {\n    const [newMethod] = await db.insert(paymentMethods).values(method).returning();\n    return newMethod;\n  }\n\n  async updatePaymentMethod(id: string, updates: Partial<PaymentMethod>): Promise<PaymentMethod | undefined> {\n    const [updated] = await db.update(paymentMethods)\n      .set(updates)\n      .where(eq(paymentMethods.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deletePaymentMethod(id: string): Promise<void> {\n    await db.delete(paymentMethods).where(eq(paymentMethods.id, id));\n  }\n\n  // Company Settings\n  async getCompanySettings(): Promise<CompanySettings | undefined> {\n    const [settings] = await db.select().from(companySettings).limit(1);\n    return settings || undefined;\n  }\n\n  async updateCompanySettings(settings: InsertCompanySettings): Promise<CompanySettings> {\n    // First, try to get existing settings\n    const existing = await this.getCompanySettings();\n    \n    if (existing) {\n      // Update existing settings\n      const [updated] = await db.update(companySettings)\n        .set({ ...settings, updatedAt: new Date() })\n        .where(eq(companySettings.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new settings\n      const [newSettings] = await db.insert(companySettings).values(settings).returning();\n      return newSettings;\n    }\n  }\n\n  // Message Templates\n  async getMessageTemplates(): Promise<MessageTemplate[]> {\n    return await db.select().from(messageTemplates);\n  }\n\n  async getMessageTemplate(id: string): Promise<MessageTemplate | undefined> {\n    const [template] = await db.select().from(messageTemplates).where(eq(messageTemplates.id, id));\n    return template || undefined;\n  }\n\n  async getMessageTemplateByType(type: string): Promise<MessageTemplate | undefined> {\n    const [template] = await db.select().from(messageTemplates).where(eq(messageTemplates.type, type));\n    return template || undefined;\n  }\n\n  async createMessageTemplate(template: InsertMessageTemplate): Promise<MessageTemplate> {\n    const [newTemplate] = await db.insert(messageTemplates).values(template).returning();\n    return newTemplate;\n  }\n\n  async updateMessageTemplate(id: string, updates: Partial<MessageTemplate>): Promise<MessageTemplate | undefined> {\n    const [updated] = await db.update(messageTemplates)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(messageTemplates.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // WhatsApp Configuration\n  async getWhatsappConfig(): Promise<WhatsappConfig | undefined> {\n    const [config] = await db.select().from(whatsappConfig).limit(1);\n    return config || undefined;\n  }\n\n  async updateWhatsappConfig(config: InsertWhatsappConfig): Promise<WhatsappConfig> {\n    // First, try to get existing config\n    const existing = await this.getWhatsappConfig();\n    \n    if (existing) {\n      // Update existing config\n      const [updated] = await db.update(whatsappConfig)\n        .set({ ...config, updatedAt: new Date() })\n        .where(eq(whatsappConfig.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new config\n      const [newConfig] = await db.insert(whatsappConfig).values(config).returning();\n      return newConfig;\n    }\n  }\n\n  // Cash Closures\n  async getCashClosure(id: string): Promise<CashClosure | undefined> {\n    const [closure] = await db.select().from(cashClosures).where(eq(cashClosures.id, id));\n    return closure || undefined;\n  }\n\n  async getCashClosures(dateFrom?: string, dateTo?: string): Promise<CashClosure[]> {\n    const conditions = [];\n    if (dateFrom) conditions.push(sql`${cashClosures.closingDate} >= ${dateFrom}`);\n    if (dateTo) conditions.push(sql`${cashClosures.closingDate} <= ${dateTo}`);\n    \n    if (conditions.length > 0) {\n      return await db.select().from(cashClosures)\n        .where(sql.join(conditions, sql` AND `))\n        .orderBy(desc(cashClosures.closingDate));\n    }\n    \n    return await db.select().from(cashClosures)\n      .orderBy(desc(cashClosures.closingDate));\n  }\n\n  async getCashClosureByDate(date: string): Promise<CashClosure | undefined> {\n    const [closure] = await db.select().from(cashClosures)\n      .where(sql`DATE(${cashClosures.closingDate}) = ${date}`);\n    return closure || undefined;\n  }\n\n  async createCashClosure(closure: InsertCashClosure): Promise<CashClosure> {\n    const [newClosure] = await db.insert(cashClosures).values(closure).returning();\n    return newClosure;\n  }\n\n  async updateCashClosure(id: string, updates: Partial<CashClosure>): Promise<CashClosure | undefined> {\n    const [updated] = await db.update(cashClosures)\n      .set(updates)\n      .where(eq(cashClosures.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  // Cash Closure Payments\n  async getCashClosurePayments(cashClosureId: string): Promise<CashClosurePayment[]> {\n    return await db.select().from(cashClosurePayments)\n      .where(eq(cashClosurePayments.cashClosureId, cashClosureId));\n  }\n\n  async createCashClosurePayment(payment: InsertCashClosurePayment): Promise<CashClosurePayment> {\n    const [newPayment] = await db.insert(cashClosurePayments).values(payment).returning();\n    return newPayment;\n  }\n\n  async deleteCashClosurePayments(cashClosureId: string): Promise<void> {\n    await db.delete(cashClosurePayments).where(eq(cashClosurePayments.cashClosureId, cashClosureId));\n  }\n\n  // Airtable Configuration\n  async getAirtableConfig(): Promise<AirtableConfig | undefined> {\n    const [config] = await db.select().from(airtableConfig);\n    return config || undefined;\n  }\n\n  async updateAirtableConfig(config: InsertAirtableConfig): Promise<AirtableConfig> {\n    const existing = await this.getAirtableConfig();\n    \n    if (existing) {\n      const [updated] = await db.update(airtableConfig)\n        .set({ ...config, updatedAt: new Date() })\n        .where(eq(airtableConfig.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      const [newConfig] = await db.insert(airtableConfig).values(config).returning();\n      return newConfig;\n    }\n  }\n\n  // Airtable Sync Queue\n  async getAirtableSyncQueueItems(status?: string, entityType?: string): Promise<AirtableSyncQueue[]> {\n    const conditions = [];\n    if (status) conditions.push(eq(airtableSyncQueue.status, status));\n    if (entityType) conditions.push(eq(airtableSyncQueue.entityType, entityType));\n    \n    if (conditions.length > 0) {\n      return await db.select().from(airtableSyncQueue)\n        .where(sql.join(conditions, sql` AND `))\n        .orderBy(desc(airtableSyncQueue.createdAt));\n    }\n    \n    return await db.select().from(airtableSyncQueue)\n      .orderBy(desc(airtableSyncQueue.createdAt));\n  }\n\n  async createAirtableSyncQueueItem(item: InsertAirtableSyncQueue): Promise<AirtableSyncQueue> {\n    const [newItem] = await db.insert(airtableSyncQueue).values(item).returning();\n    return newItem;\n  }\n\n  async updateAirtableSyncQueueItem(id: string, updates: Partial<AirtableSyncQueue>): Promise<AirtableSyncQueue | undefined> {\n    const [updated] = await db.update(airtableSyncQueue)\n      .set(updates)\n      .where(eq(airtableSyncQueue.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteAirtableSyncQueueItem(id: string): Promise<void> {\n    await db.delete(airtableSyncQueue).where(eq(airtableSyncQueue.id, id));\n  }\n\n  // Metrics and Analytics (simplified implementations using raw SQL)\n  async getDailyMetrics(date: string): Promise<{\n    totalSales: number;\n    totalInvoices: number;\n    totalItems: number;\n    deliveredInvoices: number;\n    pendingInvoices: number;\n    paymentBreakdown: Array<{ method: string; total: number; count: number }>;\n  }> {\n    const dateCondition = sql`DATE(${invoices.date}) = ${date}`;\n    \n    const [salesData] = await db\n      .select({\n        totalSales: sql<number>`COALESCE(SUM(CAST(${invoices.total} AS DECIMAL)), 0)`,\n        totalInvoices: sql<number>`COUNT(*)`,\n        deliveredInvoices: sql<number>`SUM(CASE WHEN ${invoices.delivered} = true THEN 1 ELSE 0 END)`,\n        pendingInvoices: sql<number>`SUM(CASE WHEN ${invoices.delivered} = false AND ${invoices.status} != 'cancelled' THEN 1 ELSE 0 END)`\n      })\n      .from(invoices)\n      .where(dateCondition);\n\n    const [itemsData] = await db\n      .select({\n        totalItems: sql<number>`COALESCE(SUM(${invoiceItems.quantity}), 0)`\n      })\n      .from(invoiceItems)\n      .innerJoin(invoices, eq(invoiceItems.invoiceId, invoices.id))\n      .where(dateCondition);\n\n    const paymentBreakdown = await db\n      .select({\n        method: invoices.paymentMethod,\n        total: sql<number>`COALESCE(SUM(CAST(${invoices.total} AS DECIMAL)), 0)`,\n        count: sql<number>`COUNT(*)`\n      })\n      .from(invoices)\n      .where(sql`${dateCondition} AND ${invoices.paymentMethod} IS NOT NULL AND ${invoices.paymentMethod} != 'pending'`)\n      .groupBy(invoices.paymentMethod);\n\n    return {\n      totalSales: salesData?.totalSales || 0,\n      totalInvoices: salesData?.totalInvoices || 0,\n      totalItems: itemsData?.totalItems || 0,\n      deliveredInvoices: salesData?.deliveredInvoices || 0,\n      pendingInvoices: salesData?.pendingInvoices || 0,\n      paymentBreakdown: paymentBreakdown.map(pb => ({\n        method: pb.method || '',\n        total: pb.total,\n        count: pb.count\n      }))\n    };\n  }\n\n  async getMonthlyMetrics(month: string): Promise<{\n    totalSales: number;\n    totalInvoices: number;\n    averageDailySales: number;\n    bestDay: { date: string; sales: number };\n    paymentBreakdown: Array<{ method: string; total: number; count: number }>;\n  }> {\n    const monthCondition = sql`DATE_TRUNC('month', ${invoices.date}) = ${month + '-01'}`;\n    \n    const [monthlyData] = await db\n      .select({\n        totalSales: sql<number>`COALESCE(SUM(CAST(${invoices.total} AS DECIMAL)), 0)`,\n        totalInvoices: sql<number>`COUNT(*)`\n      })\n      .from(invoices)\n      .where(monthCondition);\n\n    const dailySales = await db\n      .select({\n        date: sql<string>`DATE(${invoices.date})`,\n        sales: sql<number>`COALESCE(SUM(CAST(${invoices.total} AS DECIMAL)), 0)`\n      })\n      .from(invoices)\n      .where(monthCondition)\n      .groupBy(sql`DATE(${invoices.date})`);\n\n    const bestDay = dailySales.reduce((best, day) => \n      day.sales > best.sales ? { date: day.date, sales: day.sales } : best, \n      { date: '', sales: 0 }\n    );\n\n    const paymentBreakdown = await db\n      .select({\n        method: invoices.paymentMethod,\n        total: sql<number>`COALESCE(SUM(CAST(${invoices.total} AS DECIMAL)), 0)`,\n        count: sql<number>`COUNT(*)`\n      })\n      .from(invoices)\n      .where(sql`${monthCondition} AND ${invoices.paymentMethod} IS NOT NULL AND ${invoices.paymentMethod} != 'pending'`)\n      .groupBy(invoices.paymentMethod);\n\n    return {\n      totalSales: monthlyData?.totalSales || 0,\n      totalInvoices: monthlyData?.totalInvoices || 0,\n      averageDailySales: dailySales.length > 0 ? (monthlyData?.totalSales || 0) / dailySales.length : 0,\n      bestDay,\n      paymentBreakdown: paymentBreakdown.map(pb => ({\n        method: pb.method || '',\n        total: pb.total,\n        count: pb.count\n      }))\n    };\n  }\n\n  async getDateRangeMetrics(from: string, to: string): Promise<{\n    totalSales: number;\n    totalInvoices: number;\n    dailyTrends: Array<{ date: string; sales: number; invoices: number }>;\n    topServices: Array<{ name: string; quantity: number; revenue: number }>;\n    paymentBreakdown: Array<{ method: string; total: number; count: number }>;\n  }> {\n    const rangeCondition = sql`DATE(${invoices.date}) BETWEEN ${from} AND ${to}`;\n    \n    const [rangeData] = await db\n      .select({\n        totalSales: sql<number>`COALESCE(SUM(CAST(${invoices.total} AS DECIMAL)), 0)`,\n        totalInvoices: sql<number>`COUNT(*)`\n      })\n      .from(invoices)\n      .where(rangeCondition);\n\n    const dailyTrends = await db\n      .select({\n        date: sql<string>`DATE(${invoices.date})`,\n        sales: sql<number>`COALESCE(SUM(CAST(${invoices.total} AS DECIMAL)), 0)`,\n        invoices: sql<number>`COUNT(*)`\n      })\n      .from(invoices)\n      .where(rangeCondition)\n      .groupBy(sql`DATE(${invoices.date})`)\n      .orderBy(sql`DATE(${invoices.date})`);\n\n    const topServices = await db\n      .select({\n        name: invoiceItems.serviceName,\n        quantity: sql<number>`SUM(${invoiceItems.quantity})`,\n        revenue: sql<number>`SUM(CAST(${invoiceItems.unitPrice} AS DECIMAL) * ${invoiceItems.quantity})`\n      })\n      .from(invoiceItems)\n      .innerJoin(invoices, eq(invoiceItems.invoiceId, invoices.id))\n      .where(rangeCondition)\n      .groupBy(invoiceItems.serviceName)\n      .orderBy(sql`SUM(CAST(${invoiceItems.unitPrice} AS DECIMAL) * ${invoiceItems.quantity}) DESC`)\n      .limit(10);\n\n    const paymentBreakdown = await db\n      .select({\n        method: invoices.paymentMethod,\n        total: sql<number>`COALESCE(SUM(CAST(${invoices.total} AS DECIMAL)), 0)`,\n        count: sql<number>`COUNT(*)`\n      })\n      .from(invoices)\n      .where(sql`${rangeCondition} AND ${invoices.paymentMethod} IS NOT NULL AND ${invoices.paymentMethod} != 'pending'`)\n      .groupBy(invoices.paymentMethod);\n\n    return {\n      totalSales: rangeData?.totalSales || 0,\n      totalInvoices: rangeData?.totalInvoices || 0,\n      dailyTrends,\n      topServices,\n      paymentBreakdown: paymentBreakdown.map(pb => ({\n        method: pb.method || '',\n        total: pb.total,\n        count: pb.count\n      }))\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":60032},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const employees = pgTable(\"employees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  position: text(\"position\").notNull(),\n  accessCode: text(\"access_code\").notNull().unique(),\n  role: text(\"role\").notNull(), // 'manager', 'supervisor', 'employee'\n  active: boolean(\"active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastAccess: timestamp(\"last_access\"),\n});\n\nexport const customers = pgTable(\"customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  totalSpent: decimal(\"total_spent\", { precision: 10, scale: 2 }).default(\"0\"),\n  ordersCount: integer(\"orders_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull().default('Ropa B√°sica'),\n  washPrice: decimal(\"wash_price\", { precision: 10, scale: 2 }).notNull(),\n  ironPrice: decimal(\"iron_price\", { precision: 10, scale: 2 }).notNull(),\n  bothPrice: decimal(\"both_price\", { precision: 10, scale: 2 }).notNull(),\n  active: boolean(\"active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const invoices = pgTable(\"invoices\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  number: text(\"number\").notNull().unique(),\n  customerId: varchar(\"customer_id\").references(() => customers.id),\n  customerName: text(\"customer_name\").notNull(),\n  customerPhone: text(\"customer_phone\").notNull(),\n  customerEmail: text(\"customer_email\"),\n  date: timestamp(\"date\").defaultNow(),\n  deliveryDate: timestamp(\"delivery_date\"),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  tax: decimal(\"tax\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\"), // 'cash', 'card', 'transfer', 'mobile_pay', 'pending'\n  paymentReference: text(\"payment_reference\"), // Referencia opcional para pagos\n  status: text(\"status\").default(\"received\"), // 'received', 'in_process', 'ready', 'delivered', 'cancelled'\n  employeeId: varchar(\"employee_id\").references(() => employees.id),\n  paid: boolean(\"paid\").default(false),\n  delivered: boolean(\"delivered\").default(false),\n  cancelledAt: timestamp(\"cancelled_at\"),\n  cancellationReason: text(\"cancellation_reason\"),\n});\n\nexport const invoiceItems = pgTable(\"invoice_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceId: varchar(\"invoice_id\").references(() => invoices.id).notNull(),\n  serviceId: varchar(\"service_id\").references(() => services.id).notNull(),\n  serviceName: text(\"service_name\").notNull(),\n  serviceType: text(\"service_type\").notNull(), // 'wash', 'iron', 'both'\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const paymentMethods = pgTable(\"payment_methods\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: text(\"code\").notNull().unique(), // Stable code for mapping: 'cash', 'card', 'transfer', 'mobile_pay'\n  icon: text(\"icon\").notNull(),\n  active: boolean(\"active\").default(true),\n  requiresReference: boolean(\"requires_reference\").default(false),\n  commission: decimal(\"commission\", { precision: 5, scale: 2 }).default(\"0\"),\n  description: text(\"description\"),\n  showOnInvoice: boolean(\"show_on_invoice\").default(true),\n  color: text(\"color\").default(\"#3B82F6\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const companySettings = pgTable(\"company_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  commercialName: text(\"commercial_name\"),\n  email: text(\"email\"),\n  phone: text(\"phone\").notNull(),\n  phone2: text(\"phone2\"),\n  address: text(\"address\"),\n  branch: text(\"branch\"),\n  city: text(\"city\"),\n  province: text(\"province\"),\n  postalCode: text(\"postal_code\"),\n  rnc: text(\"rnc\"),\n  website: text(\"website\"),\n  logo: text(\"logo\"),\n  invoiceFooter: text(\"invoice_footer\"),\n  taxRate: decimal(\"tax_rate\", { precision: 5, scale: 4 }).default(\"0.18\"), // Tax rate (e.g., 0.18 for 18%)\n  showRncOnInvoice: boolean(\"show_rnc_on_invoice\").default(true),\n  showAddressOnInvoice: boolean(\"show_address_on_invoice\").default(true),\n  showPhoneOnInvoice: boolean(\"show_phone_on_invoice\").default(true),\n  showEmailOnInvoice: boolean(\"show_email_on_invoice\").default(true),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const messageTemplates = pgTable(\"message_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull(), // 'order_ready', 'invoice_whatsapp', 'reminder', 'pending_payment'\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  active: boolean(\"active\").default(true),\n  autoSend: boolean(\"auto_send\").default(false),\n  sendTime: text(\"send_time\"),\n  reminderDays: integer(\"reminder_days\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Planes de suscripci√≥n\nexport const subscriptionPlans = pgTable(\"subscription_plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  displayName: text(\"display_name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  billingPeriod: text(\"billing_period\").notNull(), // 'monthly', 'yearly'\n  features: text(\"features\").array(), // Array de caracter√≠sticas\n  maxOrganizations: integer(\"max_organizations\").default(1),\n  maxUsers: integer(\"max_users\").default(1),\n  maxInvoicesPerMonth: integer(\"max_invoices_per_month\"),\n  supportLevel: text(\"support_level\").default(\"basic\"), // 'basic', 'priority', 'dedicated'\n  active: boolean(\"active\").default(true),\n  sortOrder: integer(\"sort_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Organizaciones/Empresas de usuarios\nexport const organizations = pgTable(\"organizations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  subdomain: text(\"subdomain\").unique(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  address: text(\"address\"),\n  city: text(\"city\"),\n  country: text(\"country\").default(\"Dominican Republic\"),\n  logo: text(\"logo\"),\n  planId: varchar(\"plan_id\").references(() => subscriptionPlans.id),\n  subscriptionStatus: text(\"subscription_status\").default(\"active\"), // 'active', 'inactive', 'suspended', 'cancelled'\n  subscriptionStartDate: timestamp(\"subscription_start_date\").defaultNow(),\n  subscriptionEndDate: timestamp(\"subscription_end_date\"),\n  trialStartDate: timestamp(\"trial_start_date\"),\n  trialEndDate: timestamp(\"trial_end_date\"),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  isTrialActive: boolean(\"is_trial_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Usuarios externos (clientes del SaaS)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  password: text(\"password\").notNull(), // Hash de la contrase√±a\n  organizationId: varchar(\"organization_id\").references(() => organizations.id),\n  role: text(\"role\").default(\"owner\"), // 'owner', 'admin', 'user'\n  isActive: boolean(\"is_active\").default(true),\n  isEmailVerified: boolean(\"is_email_verified\").default(false),\n  emailVerificationToken: text(\"email_verification_token\"),\n  passwordResetToken: text(\"password_reset_token\"),\n  passwordResetExpires: timestamp(\"password_reset_expires\"),\n  lastLoginAt: timestamp(\"last_login_at\"),\n  avatar: text(\"avatar\"),\n  preferences: text(\"preferences\"), // JSON string de preferencias\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sesiones de usuarios\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Contadores para n√∫meros secuenciales\nexport const counters = pgTable(\"counters\", {\n  id: varchar(\"id\").primaryKey(),\n  value: integer(\"value\").notNull().default(0),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Configuraci√≥n WhatsApp\nexport const whatsappConfig = pgTable(\"whatsapp_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  apiKey: text(\"api_key\"), // API key del proveedor WhatsApp (encriptado)\n  phoneNumber: text(\"phone_number\").notNull(), // N√∫mero de tel√©fono asociado\n  provider: text(\"provider\").default(\"twilio\"), // 'twilio', 'whatsapp_cloud_api', 'custom'\n  baseUrl: text(\"base_url\"), // URL base para API custom\n  enabled: boolean(\"enabled\").default(false),\n  autoSendOnReady: boolean(\"auto_send_on_ready\").default(false),\n  retryAttempts: integer(\"retry_attempts\").default(3),\n  retryDelay: integer(\"retry_delay\").default(5), // minutos\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Registro hist√≥rico de cierres de caja\nexport const cashClosures = pgTable(\"cash_closures\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  closingDate: timestamp(\"closing_date\").notNull(), // Fecha del cierre\n  openedAt: timestamp(\"opened_at\").defaultNow(), // Cuando se abri√≥ la caja\n  closedAt: timestamp(\"closed_at\"), // Cuando se cerr√≥\n  employeeId: varchar(\"employee_id\").references(() => employees.id).notNull(),\n  openingCash: decimal(\"opening_cash\", { precision: 10, scale: 2 }).default(\"0\"), // Dinero inicial\n  countedCash: decimal(\"counted_cash\", { precision: 10, scale: 2 }), // Dinero contado f√≠sicamente\n  systemCash: decimal(\"system_cash\", { precision: 10, scale: 2 }).notNull(), // Dinero seg√∫n sistema\n  variance: decimal(\"variance\", { precision: 10, scale: 2 }), // Diferencia (contado - sistema)\n  notes: text(\"notes\"), // Observaciones del cierre\n  // Snapshot de totales del d√≠a\n  snapshotSubtotal: decimal(\"snapshot_subtotal\", { precision: 10, scale: 2 }).notNull(),\n  snapshotTax: decimal(\"snapshot_tax\", { precision: 10, scale: 2 }).notNull(),\n  snapshotTotal: decimal(\"snapshot_total\", { precision: 10, scale: 2 }).notNull(),\n  snapshotTotalInvoices: integer(\"snapshot_total_invoices\").notNull(),\n  snapshotDeliveredInvoices: integer(\"snapshot_delivered_invoices\").notNull(),\n  snapshotPendingInvoices: integer(\"snapshot_pending_invoices\").notNull(),\n  snapshotTotalItems: integer(\"snapshot_total_items\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Desglose por m√©todo de pago de cada cierre\nexport const cashClosurePayments = pgTable(\"cash_closure_payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  cashClosureId: varchar(\"cash_closure_id\").references(() => cashClosures.id).notNull(),\n  methodCode: text(\"method_code\").notNull(), // C√≥digo del m√©todo de pago\n  methodName: text(\"method_name\").notNull(), // Nombre del m√©todo\n  quantity: integer(\"quantity\").notNull(), // N√∫mero de transacciones\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(), // Total por m√©todo\n});\n\n// Configuraci√≥n de integraci√≥n con Airtable\nexport const airtableConfig = pgTable(\"airtable_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  enabled: boolean(\"enabled\").default(false),\n  baseId: text(\"base_id\"), // ID de la base de Airtable\n  tableInvoices: text(\"table_invoices\").default(\"Invoices\"), // Nombre tabla facturas\n  tableInvoiceItems: text(\"table_invoice_items\").default(\"Invoice Items\"), // Nombre tabla items\n  apiToken: text(\"api_token\"), // Token de API (almacenado en servidor)\n  lastSyncDate: timestamp(\"last_sync_date\"), // √öltima sincronizaci√≥n exitosa\n  syncStatus: text(\"sync_status\").default(\"idle\"), // 'idle', 'syncing', 'error'\n  lastError: text(\"last_error\"), // √öltimo error de sincronizaci√≥n\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Cola de sincronizaci√≥n con Airtable\nexport const airtableSyncQueue = pgTable(\"airtable_sync_queue\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: text(\"entity_type\").notNull(), // 'invoice', 'invoice_item'\n  entityId: varchar(\"entity_id\").notNull(), // ID del registro a sincronizar\n  status: text(\"status\").default(\"pending\"), // 'pending', 'synced', 'error'\n  retries: integer(\"retries\").default(0),\n  maxRetries: integer(\"max_retries\").default(3),\n  lastError: text(\"last_error\"),\n  externalId: text(\"external_id\"), // ID en Airtable despu√©s de sincronizar\n  lastSyncedAt: timestamp(\"last_synced_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({\n  id: true,\n  createdAt: true,\n  lastAccess: true,\n});\n\n// Patch schemas for partial updates\nexport const patchEmployeeSchema = z.object({\n  name: z.string().optional(),\n  position: z.string().optional(),\n  accessCode: z.string().optional(),\n  role: z.enum(['manager', 'supervisor', 'employee']).optional(),\n  active: z.boolean().optional(),\n});\n\nexport const updateEmployeeSchema = insertEmployeeSchema.partial();\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  totalSpent: true,\n  ordersCount: true,\n  createdAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n});\n\nexport const insertInvoiceItemSchema = createInsertSchema(invoiceItems).omit({\n  id: true,\n});\n\nexport const insertPaymentMethodSchema = createInsertSchema(paymentMethods).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCompanySettingsSchema = createInsertSchema(companySettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertMessageTemplateSchema = createInsertSchema(messageTemplates).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertSubscriptionPlanSchema = createInsertSchema(subscriptionPlans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrganizationSchema = createInsertSchema(organizations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCounterSchema = createInsertSchema(counters).omit({\n  updatedAt: true,\n});\n\nexport const insertWhatsappConfigSchema = createInsertSchema(whatsappConfig).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertCashClosureSchema = createInsertSchema(cashClosures).omit({\n  id: true,\n  openedAt: true,\n  createdAt: true,\n});\n\nexport const insertCashClosurePaymentSchema = createInsertSchema(cashClosurePayments).omit({\n  id: true,\n});\n\nexport const insertAirtableConfigSchema = createInsertSchema(airtableConfig).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertAirtableSyncQueueSchema = createInsertSchema(airtableSyncQueue).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\n\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\n\nexport type Service = typeof services.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\n\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\n\nexport type InvoiceItem = typeof invoiceItems.$inferSelect;\nexport type InsertInvoiceItem = z.infer<typeof insertInvoiceItemSchema>;\n\nexport type PaymentMethod = typeof paymentMethods.$inferSelect;\nexport type InsertPaymentMethod = z.infer<typeof insertPaymentMethodSchema>;\n\nexport type CompanySettings = typeof companySettings.$inferSelect;\nexport type InsertCompanySettings = z.infer<typeof insertCompanySettingsSchema>;\n\nexport type MessageTemplate = typeof messageTemplates.$inferSelect;\nexport type InsertMessageTemplate = z.infer<typeof insertMessageTemplateSchema>;\n\nexport type SubscriptionPlan = typeof subscriptionPlans.$inferSelect;\nexport type InsertSubscriptionPlan = z.infer<typeof insertSubscriptionPlanSchema>;\n\nexport type Organization = typeof organizations.$inferSelect;\nexport type InsertOrganization = z.infer<typeof insertOrganizationSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\n\nexport type Counter = typeof counters.$inferSelect;\nexport type InsertCounter = z.infer<typeof insertCounterSchema>;\n\nexport type WhatsappConfig = typeof whatsappConfig.$inferSelect;\nexport type InsertWhatsappConfig = z.infer<typeof insertWhatsappConfigSchema>;\n\nexport type CashClosure = typeof cashClosures.$inferSelect;\nexport type InsertCashClosure = z.infer<typeof insertCashClosureSchema>;\n\nexport type CashClosurePayment = typeof cashClosurePayments.$inferSelect;\nexport type InsertCashClosurePayment = z.infer<typeof insertCashClosurePaymentSchema>;\n\nexport type AirtableConfig = typeof airtableConfig.$inferSelect;\nexport type InsertAirtableConfig = z.infer<typeof insertAirtableConfigSchema>;\n\nexport type AirtableSyncQueue = typeof airtableSyncQueue.$inferSelect;\nexport type InsertAirtableSyncQueue = z.infer<typeof insertAirtableSyncQueueSchema>;\n\n// PATCH request schemas for order management\nexport const patchOrderStatusSchema = z.object({\n  status: z.enum(['received', 'in_process', 'ready', 'delivered', 'cancelled']),\n});\n\nexport const patchOrderPaymentSchema = z.object({\n  paymentMethod: z.string().min(1, \"Payment method is required\"),\n  paymentReference: z.string().optional(),\n});\n\nexport const patchOrderCancelSchema = z.object({\n  reason: z.string().min(1, \"Cancellation reason is required\").trim(),\n});\n\n// Schema for finalizing payment on draft invoices\nexport const patchInvoicePaySchema = z.object({\n  paymentMethod: z.string().min(1, \"Payment method is required\"),\n  paymentReference: z.string().optional(),\n});\n\n// Schemas for cash closure functionality\nexport const createCashClosureSchema = z.object({\n  closingDate: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Invalid date format YYYY-MM-DD\"),\n  countedCash: z.number().min(0, \"Counted cash must be non-negative\"),\n  openingCash: z.number().min(0).default(0),\n  notes: z.string().optional(),\n});\n\nexport const metricsQuerySchema = z.object({\n  from: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/).optional(),\n  to: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/).optional(),\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/).optional(),\n  month: z.string().regex(/^\\d{4}-\\d{2}$/).optional(),\n  range: z.enum(['7d', '30d', '90d']).optional(),\n});\n\nexport const cashClosuresQuerySchema = z.object({\n  dateFrom: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Invalid dateFrom format, expected YYYY-MM-DD\").optional(),\n  dateTo: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Invalid dateTo format, expected YYYY-MM-DD\").optional(),\n});\n\nexport const airtableConfigSchema = z.object({\n  enabled: z.boolean(),\n  baseId: z.string().min(1).optional(),\n  tableInvoices: z.string().min(1).optional(),\n  tableInvoiceItems: z.string().min(1).optional(),\n  apiToken: z.string().min(1).optional(),\n});\n\nexport type PatchOrderStatus = z.infer<typeof patchOrderStatusSchema>;\nexport type PatchOrderPayment = z.infer<typeof patchOrderPaymentSchema>;\nexport type PatchOrderCancel = z.infer<typeof patchOrderCancelSchema>;\nexport type PatchInvoicePay = z.infer<typeof patchInvoicePaySchema>;\nexport type CreateCashClosure = z.infer<typeof createCashClosureSchema>;\nexport type MetricsQuery = z.infer<typeof metricsQuerySchema>;\nexport type CashClosuresQuery = z.infer<typeof cashClosuresQuerySchema>;\nexport type AirtableConfigUpdate = z.infer<typeof airtableConfigSchema>;\n","size_bytes":20973},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Home from \"@/pages/home\";\nimport Employees from \"@/pages/employees\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/employees\" component={Employees} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"system\" storageKey=\"billtracky-ui-theme\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":967},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Vivid Professional Light Mode Colors */\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(222, 47%, 11%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 47%, 11%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 47%, 11%);\n  --primary: hsl(221, 83%, 53%);    /* tech blue */\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(262, 83%, 58%);  /* violet */\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(199, 89%, 48%);     /* sky */\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(221, 83%, 53%);\n  /* Custom Vivid Tech Colors */\n  --chart-1: hsl(199, 89%, 48%);    /* sky */\n  --chart-2: hsl(262, 83%, 58%);    /* violet */\n  --chart-3: hsl(38, 92%, 50%);     /* amber */\n  --chart-4: hsl(152, 63%, 40%);    /* emerald */\n  --chart-5: hsl(0, 84%, 60%);      /* rose */\n  --info: hsl(199, 89%, 48%);       /* sky */\n  --success: hsl(152, 63%, 40%);    /* emerald */\n  --warning: hsl(38, 92%, 50%);     /* amber */\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(220, 20%, 15%);\n  --sidebar-primary: hsl(194, 96%, 60%);\n  --sidebar-primary-foreground: hsl(220, 20%, 5%);\n  --sidebar-accent: hsl(220, 15%, 95%);\n  --sidebar-accent-foreground: hsl(194, 96%, 60%);\n  --sidebar-border: hsl(220, 15%, 85%);\n  --sidebar-ring: hsl(194, 96%, 60%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  /* Dark mode - Tech style matching landing page */\n  --background: hsl(220, 35%, 6%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(220, 20%, 8%);\n  --card-foreground: hsl(0, 0%, 90%);\n  --popover: hsl(220, 20%, 8%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(194, 96%, 60%);\n  --primary-foreground: hsl(220, 35%, 6%);\n  --secondary: hsl(272, 75%, 60%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(220, 20%, 12%);\n  --muted-foreground: hsl(220, 10%, 60%);\n  --accent: hsl(220, 20%, 15%);\n  --accent-foreground: hsl(194, 96%, 60%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(220, 20%, 20%);\n  --input: hsl(220, 20%, 15%);\n  --ring: hsl(194, 96%, 60%);\n  --sidebar: hsl(220, 35%, 6%);\n  --sidebar-foreground: hsl(0, 0%, 95%);\n  --sidebar-primary: hsl(194, 96%, 60%);\n  --sidebar-primary-foreground: hsl(220, 35%, 6%);\n  --sidebar-accent: hsl(220, 20%, 12%);\n  --sidebar-accent-foreground: hsl(194, 96%, 60%);\n  --sidebar-border: hsl(220, 20%, 20%);\n  --sidebar-ring: hsl(194, 96%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.gradient-bg {\n  background: linear-gradient(135deg, #1e40af 0%, #7c3aed 50%, #2563eb 100%);\n}\n\n.hero-gradient {\n  background: linear-gradient(135deg, #1e40af 0%, #7c3aed 50%, #2563eb 100%);\n}\n\n.laundry-bg {\n  background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n}\n\n/* Modern gradients for landing page */\n.modern-hero-gradient {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n}\n\n.modern-blue-gradient {\n  background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);\n}\n\n.modern-purple-gradient {\n  background: linear-gradient(135deg, #a29bfe 0%, #6c5ce7 100%);\n}\n\n.feature-card {\n  backdrop-filter: blur(20px);\n  background: rgba(255, 255, 255, 0.95);\n  border: 1px solid rgba(219, 234, 254, 0.5);\n}\n\n.dark .feature-card {\n  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);\n}\n\n/* Modern glass effect */\n.glass-card {\n  backdrop-filter: blur(20px);\n  background: rgba(255, 255, 255, 0.1);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.dark .glass-card {\n  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n}\n\n/* Modern card hover effects */\n.modern-card {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  transform: translateY(0);\n}\n\n.modern-card:hover {\n  transform: translateY(-8px);\n}\n\n.dark .modern-card:hover {\n  box-shadow: 0 32px 64px -12px rgba(0, 0, 0, 0.15);\n}\n\n.stats-counter {\n  background: linear-gradient(135deg, rgba(219, 234, 254, 0.8) 0%, rgba(191, 219, 254, 0.8) 100%);\n  backdrop-filter: blur(10px);\n}\n\n.floating-card {\n  animation: float 6s ease-in-out infinite;\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n/* Modern animations */\n.fade-in-up {\n  animation: fadeInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.scale-in {\n  animation: scaleIn 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;\n}\n\n@keyframes scaleIn {\n  from {\n    opacity: 0;\n    transform: scale(0.9);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n/* Modern gradient text effect */\n.gradient-text {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  -webkit-background-clip: text;\n  background-clip: text;\n  color: transparent;\n}\n\n/* Modern button effects */\n.modern-button {\n  position: relative;\n  overflow: hidden;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.modern-button::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\n  transition: left 0.5s;\n}\n\n.modern-button:hover::before {\n  left: 100%;\n}\n\n.dashboard-preview {\n  background: linear-gradient(145deg, #f8fafc 0%, #e2e8f0 100%);\n  border-radius: 20px;\n}\n\n.dark .dashboard-preview {\n  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n}\n\n.card-hover {\n  transition: all 0.2s ease-in-out;\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n}\n\n.dark .card-hover:hover {\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n.pulse-animation {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .8;\n  }\n}\n\n.fade-in {\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.tab-btn {\n  @apply flex items-center text-muted-foreground border-b-2 border-transparent transition-all duration-200;\n}\n\n.tab-btn:hover {\n  @apply text-card-foreground bg-muted rounded-t-lg;\n}\n\n.tab-active {\n  @apply text-secondary border-secondary bg-transparent;\n}\n\n/* Modern spacing and layout utilities */\n.container-modern {\n  max-width: 1400px;\n  margin: 0 auto;\n  padding: 0 2rem;\n}\n\n@media (max-width: 640px) {\n  .container-modern {\n    padding: 0 1rem;\n  }\n}\n\n/* Modern shadow utilities */\n.shadow-modern {\n  /* No shadows in light mode */\n}\n\n.dark .shadow-modern {\n  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);\n}\n\n.shadow-modern-lg {\n  /* No shadows in light mode */\n}\n\n.dark .shadow-modern-lg {\n  box-shadow: 0 35px 60px -12px rgba(0, 0, 0, 0.35);\n}\n\n/* Modern border radius */\n.rounded-modern {\n  border-radius: 1.5rem;\n}\n\n.rounded-modern-lg {\n  border-radius: 2rem;\n}\n\n/* Modern backdrop blur effects */\n.backdrop-modern {\n  backdrop-filter: blur(20px) saturate(180%);\n  background: rgba(255, 255, 255, 0.1);\n}\n\n/* Tech Button 3D Effects */\n.tech-button-3d {\n  background: linear-gradient(145deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.1));\n  border: 1px solid rgba(59, 130, 246, 0.3);\n  position: relative;\n  overflow: hidden;\n  transform: translateZ(0);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/* Enhanced dark mode tech button effects */\n.dark .tech-button-3d {\n  background: linear-gradient(145deg, rgba(59, 130, 246, 0.15), rgba(147, 51, 234, 0.15));\n  border: 1px solid rgba(59, 130, 246, 0.4);\n  box-shadow: \n    0 4px 15px rgba(0, 0, 0, 0.2),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(10px);\n}\n\n.tech-button-3d::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.2), transparent);\n  transition: left 0.5s;\n}\n\n.tech-button-3d:hover {\n  transform: translateY(-2px) scale(1.02);\n}\n\n.dark .tech-button-3d:hover {\n  transform: translateY(-4px) scale(1.05);\n  background: linear-gradient(145deg, rgba(6, 182, 212, 0.25), rgba(59, 130, 246, 0.25), rgba(147, 51, 234, 0.25));\n  box-shadow: \n    0 15px 35px rgba(6, 182, 212, 0.3),\n    0 8px 20px rgba(59, 130, 246, 0.2),\n    0 4px 15px rgba(147, 51, 234, 0.15),\n    inset 0 1px 0 rgba(6, 182, 212, 0.3);\n  border-color: rgba(6, 182, 212, 0.6);\n  backdrop-filter: blur(15px);\n}\n\n.tech-button-3d:hover::before {\n  left: 100%;\n}\n\n.tech-button-3d:active {\n  transform: translateY(0) scale(0.98);\n}\n\n.tech-button-active {\n  background: linear-gradient(145deg, rgba(59, 130, 246, 0.2), rgba(147, 51, 234, 0.2));\n  border-color: rgba(59, 130, 246, 0.6);\n}\n\n.dark .tech-button-active {\n  box-shadow: \n    0 0 20px rgba(59, 130, 246, 0.3),\n    inset 0 1px 0 rgba(255, 255, 255, 0.2);\n}\n\n.tech-text-glow {\n  text-shadow: 0 0 10px rgba(59, 130, 246, 0.5);\n}\n\n.backdrop-blur-20 {\n  backdrop-filter: blur(20px);\n}\n\n/* 3D Tech Effects for Devices Section */\n.tech-devices-container {\n  perspective: 1000px;\n  transform-style: preserve-3d;\n}\n\n.floating-device {\n  animation: float3D 6s ease-in-out infinite;\n  transform-style: preserve-3d;\n  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.floating-device:hover {\n  transform: translateY(-10px) rotateX(5deg) rotateY(5deg) scale(1.05);\n}\n\n@keyframes float3D {\n  0%, 100% {\n    transform: translateY(0px) rotateX(0deg) rotateY(0deg);\n  }\n  25% {\n    transform: translateY(-5px) rotateX(2deg) rotateY(-2deg);\n  }\n  50% {\n    transform: translateY(-10px) rotateX(0deg) rotateY(2deg);\n  }\n  75% {\n    transform: translateY(-5px) rotateX(-2deg) rotateY(0deg);\n  }\n}\n\n.tech-glow {\n  /* Base tech glow class with no shadows in light mode */\n}\n\n.dark .tech-glow {\n  box-shadow: \n    0 0 30px rgba(59, 130, 246, 0.3),\n    0 0 60px rgba(147, 51, 234, 0.2),\n    0 25px 50px rgba(0, 0, 0, 0.25);\n}\n\n.tech-gradient-bg {\n  background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);\n  position: relative;\n  overflow: hidden;\n}\n\n.tech-gradient-bg::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: \n    radial-gradient(circle at 20% 50%, rgba(59, 130, 246, 0.1) 0%, transparent 50%),\n    radial-gradient(circle at 80% 50%, rgba(147, 51, 234, 0.1) 0%, transparent 50%);\n  pointer-events: none;\n}\n\n.interactive-badge {\n  animation: pulse-glow 2s ease-in-out infinite;\n}\n\n@keyframes pulse-glow {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.02);\n  }\n}\n\n.dark .interactive-badge {\n  animation: pulse-glow-dark 2s ease-in-out infinite;\n}\n\n@keyframes pulse-glow-dark {\n  0%, 100% {\n    box-shadow: 0 0 10px rgba(59, 130, 246, 0.5);\n    transform: scale(1);\n  }\n  50% {\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.8);\n    transform: scale(1.02);\n  }\n}\n\n.tech-particle {\n  position: absolute;\n  width: 2px;\n  height: 2px;\n  background: linear-gradient(45deg, #3b82f6, #9333ea);\n  border-radius: 50%;\n  animation: particle-float 8s linear infinite;\n}\n\n@keyframes particle-float {\n  0% {\n    transform: translateY(100vh) translateX(-50px);\n    opacity: 0;\n  }\n  10% {\n    opacity: 1;\n  }\n  90% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateY(-100px) translateX(50px);\n    opacity: 0;\n  }\n}\n\n.modern-device-showcase {\n  position: relative;\n  z-index: 10;\n}\n\n.device-laptop {\n  animation-delay: 0s;\n}\n\n.device-tablet {\n  animation-delay: -2s;\n}\n\n.device-mobile {\n  animation-delay: -4s;\n}\n\n/* ===== TECH-3D UTILITY CLASSES ===== */\n\n/* Tech-3D Panel - para contenedores principales */\n.tech3d-panel {\n  @apply relative;\n  background: linear-gradient(145deg, \n    hsl(var(--background)) 0%, \n    hsl(var(--muted)) 50%, \n    hsl(var(--background)) 100%);\n  border: 2px solid hsl(var(--border));\n  border-radius: 1rem;\n  box-shadow: \n    0 8px 32px rgba(0, 0, 0, 0.12),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  backdrop-filter: blur(8px);\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.dark .tech3d-panel {\n  background: linear-gradient(145deg, \n    hsl(var(--card)) 0%, \n    hsl(var(--accent)) 50%, \n    hsl(var(--card)) 100%);\n  box-shadow: \n    0 8px 32px rgba(0, 0, 0, 0.4),\n    inset 0 1px 0 rgba(59, 130, 246, 0.2);\n}\n\n.tech3d-panel:hover {\n  transform: translateY(-2px);\n  box-shadow: \n    0 12px 40px rgba(0, 0, 0, 0.15),\n    inset 0 1px 0 rgba(255, 255, 255, 0.15);\n}\n\n.dark .tech3d-panel:hover {\n  box-shadow: \n    0 12px 40px rgba(0, 0, 0, 0.6),\n    inset 0 1px 0 rgba(59, 130, 246, 0.3);\n}\n\n/* Tech-3D Button - para botones principales */\n.tech3d-button {\n  @apply relative overflow-hidden;\n  background: linear-gradient(145deg, #3b82f6, #1d4ed8, #1e40af);\n  border: 2px solid rgba(59, 130, 246, 0.3);\n  border-radius: 0.75rem;\n  box-shadow: \n    0 4px 20px rgba(59, 130, 246, 0.3),\n    inset 0 1px 0 rgba(255, 255, 255, 0.2);\n  color: white !important;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  font-weight: 600;\n}\n\n.tech3d-button:hover {\n  transform: translateY(-2px) scale(1.02);\n  box-shadow: \n    0 8px 25px rgba(59, 130, 246, 0.5),\n    inset 0 1px 0 rgba(255, 255, 255, 0.3);\n  border-color: rgba(59, 130, 246, 0.6);\n}\n\n.tech3d-button:active {\n  transform: translateY(1px) scale(0.98);\n  box-shadow: \n    0 2px 10px rgba(59, 130, 246, 0.4),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n}\n\n/* Tech-3D Button Secondary - para botones secundarios */\n.tech3d-button-secondary {\n  @apply relative overflow-hidden;\n  background: linear-gradient(145deg, \n    hsl(var(--background)) 0%, \n    hsl(var(--muted)) 100%);\n  border: 2px solid hsl(var(--border));\n  border-radius: 0.75rem;\n  box-shadow: \n    0 4px 20px rgba(0, 0, 0, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  color: hsl(var(--foreground)) !important;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  font-weight: 500;\n}\n\n.dark .tech3d-button-secondary {\n  background: linear-gradient(145deg, \n    hsl(var(--card)) 0%, \n    hsl(var(--accent)) 100%);\n  box-shadow: \n    0 4px 20px rgba(0, 0, 0, 0.3),\n    inset 0 1px 0 rgba(59, 130, 246, 0.1);\n}\n\n.tech3d-button-secondary:hover {\n  transform: translateY(-2px) scale(1.02);\n  border-color: rgba(59, 130, 246, 0.5);\n  box-shadow: \n    0 8px 25px rgba(0, 0, 0, 0.15),\n    inset 0 1px 0 rgba(255, 255, 255, 0.2);\n}\n\n.dark .tech3d-button-secondary:hover {\n  box-shadow: \n    0 8px 25px rgba(0, 0, 0, 0.5),\n    inset 0 1px 0 rgba(59, 130, 246, 0.2);\n}\n\n/* Tech-3D Card - para tarjetas */\n.tech3d-card {\n  @apply relative;\n  background: linear-gradient(145deg, \n    hsl(var(--card)) 0%, \n    hsl(var(--background)) 50%, \n    hsl(var(--card)) 100%);\n  border: 1px solid hsl(var(--border));\n  border-radius: 1rem;\n  box-shadow: \n    0 6px 25px rgba(0, 0, 0, 0.1),\n    inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  color: hsl(var(--card-foreground)) !important;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.dark .tech3d-card {\n  background: linear-gradient(145deg, \n    hsl(var(--card)) 0%, \n    hsl(var(--accent)) 50%, \n    hsl(var(--card)) 100%);\n  box-shadow: \n    0 6px 25px rgba(0, 0, 0, 0.3),\n    inset 0 1px 0 rgba(59, 130, 246, 0.1);\n}\n\n.tech3d-card:hover {\n  transform: translateY(-3px);\n  box-shadow: \n    0 10px 30px rgba(0, 0, 0, 0.15),\n    inset 0 1px 0 rgba(255, 255, 255, 0.15);\n}\n\n.dark .tech3d-card:hover {\n  box-shadow: \n    0 10px 30px rgba(0, 0, 0, 0.5),\n    inset 0 1px 0 rgba(59, 130, 246, 0.2);\n}\n\n/* Tech-3D Input - para campos de entrada */\n.tech3d-input {\n  @apply relative;\n  background: linear-gradient(145deg, \n    hsl(var(--background)) 0%, \n    hsl(var(--input)) 100%);\n  border: 2px solid hsl(var(--border));\n  border-radius: 0.5rem;\n  box-shadow: \n    inset 0 2px 8px rgba(0, 0, 0, 0.1),\n    0 1px 3px rgba(0, 0, 0, 0.1);\n  color: hsl(var(--foreground)) !important;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.dark .tech3d-input {\n  background: linear-gradient(145deg, \n    hsl(var(--input)) 0%, \n    hsl(var(--accent)) 100%);\n  box-shadow: \n    inset 0 2px 8px rgba(0, 0, 0, 0.3),\n    0 1px 3px rgba(0, 0, 0, 0.2);\n}\n\n.tech3d-input:focus {\n  border-color: rgba(59, 130, 246, 0.6);\n  box-shadow: \n    inset 0 2px 8px rgba(0, 0, 0, 0.15),\n    0 0 0 3px rgba(59, 130, 246, 0.1),\n    0 2px 8px rgba(59, 130, 246, 0.2);\n}\n\n.dark .tech3d-input:focus {\n  box-shadow: \n    inset 0 2px 8px rgba(0, 0, 0, 0.4),\n    0 0 0 3px rgba(59, 130, 246, 0.2),\n    0 2px 8px rgba(59, 130, 246, 0.3);\n}\n\n/* Tech-3D Text - para mejor visibilidad de texto */\n.tech3d-text {\n  color: hsl(var(--foreground)) !important;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.dark .tech3d-text {\n  color: hsl(var(--foreground)) !important;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);\n}\n\n/* Tech-3D Text Muted - para texto secundario */\n.tech3d-text-muted {\n  color: hsl(var(--muted-foreground)) !important;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n\n.dark .tech3d-text-muted {\n  color: hsl(var(--muted-foreground)) !important;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);\n}\n\n/* Tech-3D Badge - para badges y etiquetas */\n.tech3d-badge {\n  @apply relative;\n  background: linear-gradient(145deg, \n    rgba(59, 130, 246, 0.9), \n    rgba(29, 78, 216, 0.9));\n  border: 1px solid rgba(59, 130, 246, 0.3);\n  border-radius: 9999px;\n  box-shadow: \n    0 2px 10px rgba(59, 130, 246, 0.3),\n    inset 0 1px 0 rgba(255, 255, 255, 0.2);\n  color: white !important;\n  font-weight: 600;\n  font-size: 0.75rem;\n  padding: 0.25rem 0.75rem;\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.tech3d-badge:hover {\n  transform: scale(1.05);\n  box-shadow: \n    0 4px 15px rgba(59, 130, 246, 0.4),\n    inset 0 1px 0 rgba(255, 255, 255, 0.3);\n}\n","size_bytes":18136},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/customers-grid.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, User, Edit3, Search, Filter, Grid3X3, List, TrendingUp, Users, Star, Eye, Mail, Phone, Calendar, DollarSign, ArrowUpDown, Download, MessageSquare } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient, getQueryFn } from \"@/lib/queryClient\";\nimport { type Customer, insertCustomerSchema } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface CustomersGridProps {\n  onNotification: (message: string) => void;\n}\n\ntype ViewMode = 'grid' | 'table';\ntype SortField = 'name' | 'totalSpent' | 'ordersCount' | 'createdAt';\ntype SortOrder = 'asc' | 'desc';\ntype CustomerSegment = 'all' | 'vip' | 'frequent' | 'new' | 'inactive';\n\nexport default function CustomersGrid({ onNotification }: CustomersGridProps) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  const [viewMode, setViewMode] = useState<ViewMode>('grid');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortField, setSortField] = useState<SortField>('createdAt');\n  const [sortOrder, setSortOrder] = useState<SortOrder>('desc');\n  const [selectedSegment, setSelectedSegment] = useState<CustomerSegment>('all');\n  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);\n\n  const { data, isLoading, error } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n  \n  const customers = data ?? [];\n\n  const form = useForm({\n    resolver: zodResolver(insertCustomerSchema.extend({\n      email: z.string().email().optional().or(z.literal('')),\n    })),\n    defaultValues: {\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n    },\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const method = editingCustomer ? \"PUT\" : \"POST\";\n      const url = editingCustomer ? `/api/customers/${editingCustomer.id}` : \"/api/customers\";\n      const response = await apiRequest(method, url, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      const message = editingCustomer ? \"Cliente actualizado exitosamente\" : \"Cliente creado exitosamente\";\n      onNotification(message);\n      setIsDialogOpen(false);\n      setEditingCustomer(null);\n      form.reset();\n    },\n    onError: () => {\n      const message = editingCustomer ? \"Error al actualizar el cliente\" : \"Error al crear el cliente\";\n      onNotification(message);\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    createCustomerMutation.mutate(data);\n  };\n\n  const handleEdit = (customer: Customer) => {\n    setEditingCustomer(customer);\n    form.setValue(\"name\", customer.name);\n    form.setValue(\"phone\", customer.phone);\n    form.setValue(\"email\", customer.email || \"\");\n    setIsDialogOpen(true);\n  };\n\n  // Helper functions for Shopify-like features\n  const getCustomerSegment = (customer: Customer): string => {\n    const totalSpent = parseFloat(customer.totalSpent || \"0\");\n    const ordersCount = customer.ordersCount || 0;\n    const daysOld = customer.createdAt ? \n      Math.floor((new Date().getTime() - new Date(customer.createdAt).getTime()) / (1000 * 60 * 60 * 24)) : Infinity;\n    \n    if (totalSpent > 10000 || ordersCount > 20) return 'VIP';\n    if (ordersCount > 5) return 'Frecuente';\n    if (customer.createdAt && daysOld < 30) return 'Nuevo';\n    if (daysOld > 180 && ordersCount === 0) return 'Inactivo';\n    return 'Regular';\n  };\n\n  const getSegmentColor = (segment: string): string => {\n    switch (segment) {\n      case 'VIP': return 'bg-gradient-to-r from-yellow-400 to-orange-500 text-white';\n      case 'Frecuente': return 'bg-gradient-to-r from-purple-400 to-pink-500 text-white';\n      case 'Nuevo': return 'bg-gradient-to-r from-green-400 to-blue-500 text-white';\n      case 'Inactivo': return 'bg-gradient-to-r from-gray-400 to-gray-500 text-white';\n      default: return 'bg-gradient-to-r from-cyan-400 to-blue-500 text-white';\n    }\n  };\n\n  // Filter and sort customers\n  const filteredAndSortedCustomers = customers\n    .filter(customer => {\n      const matchesSearch = customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           customer.phone.includes(searchTerm) ||\n                           (customer.email && customer.email.toLowerCase().includes(searchTerm.toLowerCase()));\n      \n      if (!matchesSearch) return false;\n      \n      const segment = getCustomerSegment(customer);\n      if (selectedSegment === 'all') return true;\n      if (selectedSegment === 'vip' && segment === 'VIP') return true;\n      if (selectedSegment === 'frequent' && segment === 'Frecuente') return true;\n      if (selectedSegment === 'new' && segment === 'Nuevo') return true;\n      if (selectedSegment === 'inactive' && segment === 'Inactivo') return true;\n      \n      return false;\n    })\n    .sort((a, b) => {\n      let aValue, bValue;\n      \n      switch (sortField) {\n        case 'name':\n          aValue = a.name.toLowerCase();\n          bValue = b.name.toLowerCase();\n          break;\n        case 'totalSpent':\n          aValue = parseFloat(a.totalSpent || \"0\");\n          bValue = parseFloat(b.totalSpent || \"0\");\n          break;\n        case 'ordersCount':\n          aValue = a.ordersCount || 0;\n          bValue = b.ordersCount || 0;\n          break;\n        case 'createdAt':\n          aValue = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n          bValue = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n          break;\n        default:\n          return 0;\n      }\n      \n      if (sortOrder === 'asc') {\n        return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\n      } else {\n        return aValue > bValue ? -1 : aValue < bValue ? 1 : 0;\n      }\n    });\n\n  // Calculate statistics\n  const stats = {\n    total: customers.length,\n    totalSpent: customers.reduce((sum, c) => sum + parseFloat(c.totalSpent || \"0\"), 0),\n    avgSpent: customers.length > 0 ? customers.reduce((sum, c) => sum + parseFloat(c.totalSpent || \"0\"), 0) / customers.length : 0,\n    vipCount: customers.filter(c => getCustomerSegment(c) === 'VIP').length,\n    newThisMonth: customers.filter(c => {\n      if (!c.createdAt) return false;\n      const createdAt = new Date(c.createdAt);\n      const now = new Date();\n      return createdAt.getMonth() === now.getMonth() && createdAt.getFullYear() === now.getFullYear();\n    }).length,\n  };\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    setEditingCustomer(null);\n    form.reset();\n  };\n\n  const handleSort = (field: SortField) => {\n    if (sortField === field) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortOrder('desc');\n    }\n  };\n\n  // Show error message if there's an authentication error\n  if (error && !customers.length) {\n    return (\n      <div className=\"tech3d-bg min-h-screen p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"tech3d-error-card p-8 text-center rounded-xl\">\n            <Users className=\"h-16 w-16 text-red-400 mx-auto mb-4 animate-pulse\" />\n            <h3 className=\"text-2xl font-bold tech-text-glow mb-4\">‚ö†Ô∏è Error de Autenticaci√≥n</h3>\n            <p className=\"tech3d-text-muted text-lg mb-4\">No se pudieron cargar los clientes. Verifica tu acceso.</p>\n            <Button \n              onClick={() => window.location.reload()}\n              className=\"tech3d-button px-6 py-3\"\n            >\n              üîÑ Reintentar\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-8 tech3d-bg min-h-screen p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\n          {[...Array(5)].map((_, i) => (\n            <Card key={i} className=\"tech3d-primary-card animate-pulse\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"w-16 h-16 tech-glow rounded-xl\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"h-6 tech-glow rounded-lg\"></div>\n                  <div className=\"h-8 tech-glow rounded-lg\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <Card className=\"tech3d-primary-card\">\n          <CardContent className=\"p-12\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin w-16 h-16 border-4 border-cyan-400 border-t-transparent rounded-full mx-auto mb-6\"></div>\n              <p className=\"tech-text-glow text-2xl\">üîç Cargando panel de clientes...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"tech3d-bg min-h-screen p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-8\">\n      {/* Header with Tech-3D Styling */}\n      <div className=\"tech-glow border-2 border-cyan-500/30 rounded-xl p-8\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-6 lg:space-y-0\">\n          <div className=\"space-y-3\">\n            <h1 className=\"text-5xl font-bold tech-text-glow\">\n              üë• Panel de Clientes Avanzado\n            </h1>\n            <p className=\"tech3d-text-muted text-xl\">Gestiona tu base de clientes con herramientas avanzadas estilo Shopify</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <button \n                  onClick={() => setIsDialogOpen(true)}\n                  className=\"tech3d-button px-8 py-4 text-lg flex items-center space-x-3\"\n                  data-testid=\"button-add-customer\"\n                >\n                  <Plus className=\"w-6 h-6\" />\n                  <span>‚ûï Nuevo Cliente Premium</span>\n                </button>\n              </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingCustomer ? \"‚úèÔ∏è Editar Cliente\" : \"‚ûï Nuevo Cliente\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Nombre</Label>\n                  <Input\n                    id=\"name\"\n                    {...form.register(\"name\")}\n                    placeholder=\"Nombre completo del cliente\"\n                    data-testid=\"input-customer-name\"\n                  />\n                  {form.formState.errors.name && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.name.message}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Tel√©fono</Label>\n                  <Input\n                    id=\"phone\"\n                    {...form.register(\"phone\")}\n                    placeholder=\"809-000-0000\"\n                    data-testid=\"input-customer-phone\"\n                  />\n                  {form.formState.errors.phone && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.phone.message}\n                    </p>\n                  )}\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email (Opcional)</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    {...form.register(\"email\")}\n                    placeholder=\"cliente@email.com\"\n                    data-testid=\"input-customer-email\"\n                  />\n                  {form.formState.errors.email && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n                <div className=\"flex gap-3\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createCustomerMutation.isPending}\n                    className=\"tech3d-button flex-1\"\n                    data-testid=\"button-save-customer\"\n                  >\n                    {createCustomerMutation.isPending ? \"üíæ Guardando...\" : \"üíæ Guardar\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleDialogClose}\n                    className=\"tech3d-button-secondary\"\n                    data-testid=\"button-cancel\"\n                  >\n                    ‚ùå Cancelar\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n        {/* Statistics Panel - Payment Methods Style */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-8\">\n          <div className=\"tech-button-3d bg-gradient-to-br from-blue-50 to-cyan-50 border-2 border-blue-300 dark:border-blue-500/30 rounded-xl p-4 text-center\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n              <Users className=\"w-4 h-4 text-white\" />\n            </div>\n            <p className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{stats.total}</p>\n            <p className=\"text-sm text-blue-600 dark:text-blue-400\">Total Clientes</p>\n          </div>\n\n          <div className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 dark:border-green-500/30 rounded-xl p-4 text-center\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n              <DollarSign className=\"w-4 h-4 text-white\" />\n            </div>\n            <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\">RD${stats.totalSpent.toFixed(0)}</p>\n            <p className=\"text-sm text-green-600 dark:text-green-400\">Ingresos Total</p>\n          </div>\n\n          <div className=\"tech-button-3d bg-gradient-to-br from-orange-50 to-amber-50 border-2 border-orange-300 dark:border-orange-500/30 rounded-xl p-4 text-center\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-orange-500 to-amber-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n              <TrendingUp className=\"w-4 h-4 text-white\" />\n            </div>\n            <p className=\"text-2xl font-bold text-orange-700 dark:text-orange-300\">RD${stats.avgSpent.toFixed(0)}</p>\n            <p className=\"text-sm text-orange-600 dark:text-orange-400\">Promedio por Cliente</p>\n          </div>\n\n          <div className=\"tech-button-3d bg-gradient-to-br from-purple-50 to-pink-50 border-2 border-purple-300 dark:border-purple-500/30 rounded-xl p-4 text-center\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n              <Star className=\"w-4 h-4 text-white\" />\n            </div>\n            <p className=\"text-2xl font-bold text-purple-700 dark:text-purple-300\">{stats.vipCount}</p>\n            <p className=\"text-sm text-purple-600 dark:text-purple-400\">Clientes VIP</p>\n          </div>\n\n          <div className=\"tech-button-3d bg-gradient-to-br from-red-50 to-pink-50 border-2 border-red-300 dark:border-red-500/30 rounded-xl p-4 text-center\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-red-500 to-pink-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n              <Calendar className=\"w-4 h-4 text-white\" />\n            </div>\n            <p className=\"text-2xl font-bold text-red-700 dark:text-red-300\">{stats.newThisMonth}</p>\n            <p className=\"text-sm text-red-600 dark:text-red-400\">Nuevos Este Mes</p>\n          </div>\n        </div>\n      </div>\n\n        {/* Search and Filters Tech-3D */}\n        <Card className=\"tech3d-primary-card\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center space-y-6 lg:space-y-0 lg:space-x-6\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-cyan-400 w-6 h-6\" />\n                <Input\n                  placeholder=\"üîç Buscar por nombre, tel√©fono o email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-14 py-4 text-lg tech-glow border-2 border-cyan-500/30 focus:border-cyan-400 rounded-xl\"\n                  data-testid=\"input-search-customers\"\n                />\n              </div>\n              <div className=\"flex items-center space-x-6\">\n                <Select value={selectedSegment} onValueChange={(value: CustomerSegment) => setSelectedSegment(value)}>\n                  <SelectTrigger className=\"w-64 tech-glow border-2 border-cyan-500/30 py-4 text-lg rounded-xl\" data-testid=\"select-segment\">\n                    <SelectValue placeholder=\"Segmento\" />\n                  </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">üåü Todos los Clientes</SelectItem>\n                  <SelectItem value=\"vip\">üëë Clientes VIP</SelectItem>\n                  <SelectItem value=\"frequent\">üî• Clientes Frecuentes</SelectItem>\n                  <SelectItem value=\"new\">‚ú® Clientes Nuevos</SelectItem>\n                  <SelectItem value=\"inactive\">üò¥ Clientes Inactivos</SelectItem>\n                </SelectContent>\n              </Select>\n                <div className=\"flex items-center space-x-3\">\n                  <button\n                    onClick={() => setViewMode('grid')}\n                    className={`p-4 rounded-xl transition-all duration-300 ${viewMode === 'grid' ? 'tech3d-button' : 'tech3d-button-secondary'}`}\n                    data-testid=\"button-grid-view\"\n                  >\n                    <Grid3X3 className=\"w-6 h-6\" />\n                  </button>\n                  <button\n                    onClick={() => setViewMode('table')}\n                    className={`p-4 rounded-xl transition-all duration-300 ${viewMode === 'table' ? 'tech3d-button' : 'tech3d-button-secondary'}`}\n                    data-testid=\"button-table-view\"\n                  >\n                    <List className=\"w-6 h-6\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Customer Display Tech-3D */}\n        {viewMode === 'grid' ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {filteredAndSortedCustomers.map((customer) => {\n            const segment = getCustomerSegment(customer);\n            return (\n                <Card key={customer.id} className=\"tech3d-primary-card hover:tech-glow transition-all duration-500 hover:shadow-2xl hover:scale-105\" data-testid={`customer-card-${customer.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-cyan-400/20 to-purple-500/20 rounded-full flex items-center justify-center border-2 border-cyan-400/30\">\n                        <User className=\"w-6 h-6 text-cyan-400\" />\n                      </div>\n                      <div className=\"flex flex-col\">\n                        <Badge className={`${getSegmentColor(segment)} text-xs px-2 py-1 mb-1`}>{segment}</Badge>\n                        <h3 className=\"font-semibold text-card-foreground\" data-testid={`customer-name-${customer.id}`}>\n                          {customer.name}\n                        </h3>\n                      </div>\n                    </div>\n                    <button \n                      onClick={() => handleEdit(customer)}\n                      className=\"tech-button-3d p-2 bg-gradient-to-r from-slate-400 to-slate-500 text-white hover:from-slate-500 hover:to-slate-600 rounded-lg border-2 border-slate-300 shadow-lg transition-all duration-300 hover:scale-110\"\n                      data-testid={`button-edit-customer-${customer.id}`}\n                    >\n                      <Edit3 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                      <Phone className=\"w-4 h-4\" />\n                      <span data-testid={`customer-phone-${customer.id}`}>{customer.phone}</span>\n                    </div>\n                    {customer.email && (\n                      <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                        <Mail className=\"w-4 h-4\" />\n                        <span data-testid={`customer-email-${customer.id}`}>{customer.email}</span>\n                      </div>\n                    )}\n                    <div className=\"flex items-center justify-between pt-3 border-t border-slate-200 dark:border-slate-700\">\n                      <div className=\"text-sm text-muted-foreground\">\n                        üì¶ √ìrdenes: <span className=\"font-semibold text-foreground\" data-testid={`customer-orders-${customer.id}`}>{customer.ordersCount}</span>\n                      </div>\n                      <div className=\"text-sm font-bold text-green-600 dark:text-green-400\" data-testid={`customer-spent-${customer.id}`}>\n                        üí∞ RD${parseFloat(customer.totalSpent || \"0\").toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      ) : (\n        <Card className=\"tech-glow border-2 border-slate-300/50 dark:border-cyan-500/30\">\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-800 dark:to-slate-700\">\n                  <tr>\n                    <th className=\"px-6 py-4 text-left\">\n                      <button\n                        onClick={() => handleSort('name')}\n                        className=\"flex items-center space-x-1 font-semibold text-slate-700 dark:text-slate-300 hover:text-cyan-600 dark:hover:text-cyan-400\"\n                        data-testid=\"button-sort-name\"\n                      >\n                        <span>üë§ Cliente</span>\n                        <ArrowUpDown className=\"w-4 h-4\" />\n                      </button>\n                    </th>\n                    <th className=\"px-6 py-4 text-left font-semibold text-slate-700 dark:text-slate-300\">üè∑Ô∏è Segmento</th>\n                    <th className=\"px-6 py-4 text-left font-semibold text-slate-700 dark:text-slate-300\">üìû Contacto</th>\n                    <th className=\"px-6 py-4 text-left\">\n                      <button\n                        onClick={() => handleSort('ordersCount')}\n                        className=\"flex items-center space-x-1 font-semibold text-slate-700 dark:text-slate-300 hover:text-cyan-600 dark:hover:text-cyan-400\"\n                        data-testid=\"button-sort-orders\"\n                      >\n                        <span>üì¶ √ìrdenes</span>\n                        <ArrowUpDown className=\"w-4 h-4\" />\n                      </button>\n                    </th>\n                    <th className=\"px-6 py-4 text-left\">\n                      <button\n                        onClick={() => handleSort('totalSpent')}\n                        className=\"flex items-center space-x-1 font-semibold text-slate-700 dark:text-slate-300 hover:text-cyan-600 dark:hover:text-cyan-400\"\n                        data-testid=\"button-sort-spent\"\n                      >\n                        <span>üí∞ Total Gastado</span>\n                        <ArrowUpDown className=\"w-4 h-4\" />\n                      </button>\n                    </th>\n                    <th className=\"px-6 py-4 text-left\">\n                      <button\n                        onClick={() => handleSort('createdAt')}\n                        className=\"flex items-center space-x-1 font-semibold text-slate-700 dark:text-slate-300 hover:text-cyan-600 dark:hover:text-cyan-400\"\n                        data-testid=\"button-sort-date\"\n                      >\n                        <span>üìÖ Registro</span>\n                        <ArrowUpDown className=\"w-4 h-4\" />\n                      </button>\n                    </th>\n                    <th className=\"px-6 py-4 text-center font-semibold text-slate-700 dark:text-slate-300\">‚öôÔ∏è Acciones</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-slate-200 dark:divide-slate-700\">\n                  {filteredAndSortedCustomers.map((customer) => {\n                    const segment = getCustomerSegment(customer);\n                    return (\n                      <tr key={customer.id} className=\"hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-all duration-300\" data-testid={`customer-row-${customer.id}`}>\n                        <td className=\"px-6 py-4\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-10 h-10 bg-gradient-to-br from-cyan-400/20 to-purple-500/20 rounded-full flex items-center justify-center border-2 border-cyan-400/30\">\n                              <User className=\"w-5 h-5 text-cyan-400\" />\n                            </div>\n                            <div>\n                              <div className=\"font-semibold text-foreground\" data-testid={`customer-name-${customer.id}`}>\n                                {customer.name}\n                              </div>\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <Badge className={`${getSegmentColor(segment)} text-xs px-2 py-1`}>{segment}</Badge>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <div className=\"space-y-1 text-sm\">\n                            <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                              <Phone className=\"w-3 h-3\" />\n                              <span data-testid={`customer-phone-${customer.id}`}>{customer.phone}</span>\n                            </div>\n                            {customer.email && (\n                              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                                <Mail className=\"w-3 h-3\" />\n                                <span data-testid={`customer-email-${customer.id}`}>{customer.email}</span>\n                              </div>\n                            )}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <span className=\"font-semibold text-foreground\" data-testid={`customer-orders-${customer.id}`}>{customer.ordersCount}</span>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <span className=\"font-bold text-green-600 dark:text-green-400\" data-testid={`customer-spent-${customer.id}`}>\n                            RD${parseFloat(customer.totalSpent || \"0\").toFixed(2)}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4\">\n                          <span className=\"text-sm text-muted-foreground\">\n                            {customer.createdAt ? new Date(customer.createdAt).toLocaleDateString('es-DO') : 'N/A'}\n                          </span>\n                        </td>\n                        <td className=\"px-6 py-4 text-center\">\n                          <button \n                            onClick={() => handleEdit(customer)}\n                            className=\"tech3d-button-secondary p-2\"\n                            data-testid={`button-edit-customer-${customer.id}`}\n                          >\n                            <Edit3 className=\"w-4 h-4\" />\n                          </button>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {filteredAndSortedCustomers.length === 0 && (\n        <Card className=\"tech-glow border-2 border-slate-300/50 dark:border-cyan-500/30\">\n          <CardContent className=\"p-12\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-24 h-24 bg-gradient-to-br from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded-full flex items-center justify-center mx-auto\">\n                <Users className=\"w-12 h-12 text-slate-500 dark:text-slate-400\" />\n              </div>\n              <div className=\"space-y-2\">\n                <h3 className=\"text-xl font-semibold text-foreground\">\n                  {searchTerm || selectedSegment !== 'all' ? 'üîç No se encontraron clientes' : 'üë• No hay clientes registrados'}\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  {searchTerm || selectedSegment !== 'all' \n                    ? 'Intenta ajustar tu b√∫squeda o filtros.' \n                    : 'Comienza agregando tu primer cliente al sistema.'\n                  }\n                </p>\n              </div>\n              {!searchTerm && selectedSegment === 'all' && (\n                <Button \n                  onClick={() => setIsDialogOpen(true)}\n                  className=\"tech3d-button px-6 py-3\"\n                  data-testid=\"button-add-first-customer\"\n                >\n                  <Plus className=\"w-5 h-5 mr-2\" />\n                  ‚ûï Agregar Primer Cliente\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":31267},"client/src/components/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { FileText, LogOut, Home, Package, Users, Settings, CreditCard, BarChart3, Building2, MessageCircle, Menu, X, CheckCircle, Clock, History, Crown } from \"lucide-react\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { type Employee, type Invoice } from \"@shared/schema\";\nimport InvoiceCreation from \"./invoice-creation\";\nimport OrderManagement from \"./order-management\";\nimport CustomersGrid from \"./customers-grid\";\nimport ServicesConfig from \"./services-config\";\nimport PaymentMethodsConfig from \"./payment-methods-config\";\nimport CashClosure from \"./cash-closure\";\nimport CashClosuresHistory from \"./cash-closures-history\";\nimport CompanyConfig from \"./company-config\";\nimport WhatsAppConfig from \"./whatsapp-config\";\nimport EmployeesManagement from \"./employees-management\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport logoPath from \"@assets/generated_images/BT_fused_single_letter_1577c2b8.png\";\n\ninterface DashboardProps {\n  user: Employee;\n  onLogout: () => void;\n  onNotification: (message: string) => void;\n}\n\nexport default function Dashboard({ user, onLogout, onNotification }: DashboardProps) {\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery<{\n    todayOrders: number;\n    todayRevenue: string;\n    inProgress: number;\n    readyForDelivery: number;\n    pendingPayment: number;\n    pendingPaymentTotal: string;\n  }>({\n    queryKey: [\"/api/metrics/dashboard\"],\n  });\n\n  const { data: invoices = [] } = useQuery<Invoice[]>({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const recentOrders = invoices.slice(0, 3);\n\n  // Helper functions para obtener clases de estado con colores pasteles profesionales\n  const getStatusClasses = (status: string | null) => {\n    // Pastel colors with dark text for AA contrast + professional appearance\n    if (!status) return 'bg-slate-200 text-slate-800 border border-slate-300 px-2 py-1 text-xs font-semibold rounded-full';\n    \n    switch(status) {\n      case 'received': return 'bg-sky-200 text-sky-800 border border-sky-300 px-2 py-1 text-xs font-semibold rounded-full';\n      case 'in_process': return 'bg-amber-200 text-amber-800 border border-amber-300 px-2 py-1 text-xs font-semibold rounded-full'; \n      case 'ready': return 'bg-violet-200 text-violet-800 border border-violet-300 px-2 py-1 text-xs font-semibold rounded-full';\n      case 'delivered': return 'bg-emerald-200 text-emerald-800 border border-emerald-300 px-2 py-1 text-xs font-semibold rounded-full';\n      case 'cancelled': return 'bg-rose-200 text-rose-800 border border-rose-300 px-2 py-1 text-xs font-semibold rounded-full';\n      default: return 'bg-slate-200 text-slate-800 border border-slate-300 px-2 py-1 text-xs font-semibold rounded-full';\n    }\n  };\n\n  const getStatusText = (status: string | null) => {\n    if (!status) return 'Desconocido';\n    \n    switch(status) {\n      case 'received': return 'Recibido';\n      case 'in_process': return 'En Proceso';\n      case 'ready': return 'Listo para Entrega';\n      case 'delivered': return 'Entregado';\n      case 'cancelled': return 'Cancelado';\n      default: return status;\n    }\n  };\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case \"invoices\":\n        return <InvoiceCreation onNotification={onNotification} />;\n      case \"orders\":\n        return <OrderManagement onNotification={onNotification} />;\n      case \"customers\":\n        return <CustomersGrid onNotification={onNotification} />;\n      case \"employees\":\n        return <EmployeesManagement onNotification={onNotification} />;\n      case \"services\":\n        return <ServicesConfig onNotification={onNotification} />;\n      case \"payment-methods\":\n        return <PaymentMethodsConfig onNotification={onNotification} />;\n      case \"cash-closure\":\n        return <CashClosure onBack={() => setActiveTab('overview')} />;\n      case \"cash-closures-history\":\n        return <CashClosuresHistory onBack={() => setActiveTab('overview')} />;\n      case \"company-config\":\n        return <CompanyConfig onBack={() => setActiveTab('overview')} />;\n      case \"whatsapp-config\":\n        return <WhatsAppConfig onBack={() => setActiveTab('overview')} />;\n      default:\n        return (\n          <div>\n            {/* Metrics Cards - Vivos y Profesionales */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              <div className=\"tech-button-3d bg-white border-2 border-violet-300 text-violet-700 dark:from-purple-500/20 dark:to-pink-600/20 dark:text-white dark:border-purple-500/30 rounded-xl shadow-sm p-6 hover:bg-violet-50 hover:border-violet-400 dark:hover:from-purple-400/30 dark:hover:to-pink-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-semibold text-violet-700 dark:text-purple-300\">√ìrdenes Hoy</p>\n                    <p className=\"text-2xl font-bold text-violet-900 dark:text-white\" data-testid=\"metric-today-orders\">\n                      {metricsLoading ? \"...\" : metrics?.todayOrders || 0}\n                    </p>\n                    <p className=\"text-xs text-purple-600 dark:text-purple-400 mt-1 font-medium\">+3 desde ayer</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center text-white shadow-lg tech-glow\">\n                    <Package className=\"w-6 h-6\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"tech-button-3d bg-white border-2 border-emerald-300 text-emerald-700 dark:from-green-500/20 dark:to-cyan-600/20 dark:text-white dark:border-emerald-500/30 rounded-xl shadow-sm p-6 hover:bg-emerald-50 hover:border-emerald-400 dark:hover:from-green-400/30 dark:hover:to-cyan-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-semibold text-emerald-700 dark:text-emerald-300\">Ingresos Hoy</p>\n                    <p className=\"text-2xl font-bold text-emerald-900 dark:text-white\" data-testid=\"metric-today-revenue\">\n                      {metricsLoading ? \"...\" : `RD$${metrics?.todayRevenue || \"0.00\"}`}\n                    </p>\n                    <p className=\"text-xs text-green-600 dark:text-green-400 mt-1 font-medium\">+15% vs ayer</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-cyan-600 rounded-xl flex items-center justify-center text-white shadow-lg tech-glow\">\n                    <span className=\"text-lg font-bold\">$</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"tech-button-3d bg-white border-2 border-blue-300 text-blue-700 dark:from-blue-500/20 dark:to-purple-600/20 dark:text-white dark:border-blue-500/30 rounded-xl shadow-sm p-6 hover:bg-blue-50 hover:border-blue-400 dark:hover:from-blue-400/30 dark:hover:to-purple-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-semibold text-blue-700 dark:text-blue-300\">Listo para Entrega</p>\n                    <p className=\"text-2xl font-bold text-blue-900 dark:text-white\" data-testid=\"metric-ready-for-delivery\">\n                      {metricsLoading ? \"...\" : metrics?.readyForDelivery || 0}\n                    </p>\n                    <p className=\"text-xs text-purple-600 dark:text-purple-400 mt-1 font-medium\">üí¨ WhatsApp autom√°tico</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center text-white shadow-lg tech-glow\">\n                    <CheckCircle className=\"w-6 h-6\" />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"tech-button-3d bg-white border-2 border-cyan-300 text-cyan-700 dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-white dark:border-cyan-500/30 rounded-xl shadow-sm p-6 hover:bg-cyan-50 hover:border-cyan-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-semibold text-cyan-700 dark:text-cyan-300\">Pendientes Pago</p>\n                    <p className=\"text-2xl font-bold text-cyan-900 dark:text-white\" data-testid=\"metric-pending-payment\">\n                      {metricsLoading ? \"...\" : metrics?.pendingPayment || 0}\n                    </p>\n                    <p className=\"text-xs text-blue-600 dark:text-blue-400 mt-1 font-medium\">\n                      RD${metrics?.pendingPaymentTotal || \"0.00\"} total\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-xl flex items-center justify-center text-white shadow-lg tech-glow\">\n                    <CreditCard className=\"w-6 h-6\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Quick Actions and Recent Orders */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n              <div className=\"bg-white dark:bg-gray-800/50 rounded-xl shadow-sm border border-slate-200 dark:border-cyan-500/20 p-6 dark:backdrop-blur-sm\">\n                <h3 className=\"text-lg font-bold text-slate-900 dark:text-white tech-text-glow mb-4\">Acciones R√°pidas</h3>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <button \n                    onClick={() => setActiveTab('invoices')}\n                    className=\"tech-button-3d bg-white border-2 border-sky-300 text-sky-700 dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-white p-4 rounded-lg hover:bg-sky-50 hover:border-sky-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 text-left shadow-lg hover:shadow-xl transform hover:scale-105\"\n                    data-testid=\"quick-action-new-invoice\"\n                  >\n                    <span className=\"text-lg mb-2 block\">‚ûï</span>\n                    <p className=\"text-sm font-bold\">Nueva Factura</p>\n                  </button>\n                  <button \n                    onClick={() => setActiveTab('orders')}\n                    className=\"tech-button-3d bg-white border-2 border-violet-300 text-violet-700 dark:from-purple-500/20 dark:to-pink-600/20 dark:text-white p-4 rounded-lg hover:bg-violet-50 hover:border-violet-400 dark:hover:from-purple-400/30 dark:hover:to-pink-500/30 transition-all duration-300 text-left shadow-lg hover:shadow-xl transform hover:scale-105\"\n                    data-testid=\"quick-action-search-order\"\n                  >\n                    <span className=\"text-lg mb-2 block\">üîç</span>\n                    <p className=\"text-sm font-bold\">Buscar Orden</p>\n                  </button>\n                  <button \n                    onClick={() => setActiveTab('cash-closure')}\n                    className=\"tech-button-3d bg-white border-2 border-emerald-300 text-emerald-700 dark:from-green-500/20 dark:to-emerald-600/20 dark:text-white p-4 rounded-lg hover:bg-emerald-50 hover:border-emerald-400 dark:hover:from-green-400/30 dark:hover:to-emerald-500/30 transition-all duration-300 text-left shadow-lg hover:shadow-xl transform hover:scale-105\"\n                    data-testid=\"quick-action-cash-closure\"\n                  >\n                    <span className=\"text-lg mb-2 block\">üí∞</span>\n                    <p className=\"text-sm font-bold\">Cierre de Caja</p>\n                  </button>\n                  <button \n                    onClick={() => setActiveTab('services')}\n                    className=\"tech-button-3d bg-white border-2 border-amber-300 text-amber-700 dark:from-yellow-500/20 dark:to-orange-600/20 dark:text-white p-4 rounded-lg hover:bg-amber-50 hover:border-amber-400 dark:hover:from-yellow-400/30 dark:hover:to-orange-500/30 transition-all duration-300 text-left shadow-lg hover:shadow-xl transform hover:scale-105\"\n                    data-testid=\"quick-action-configure\"\n                  >\n                    <span className=\"text-lg mb-2 block\">‚öôÔ∏è</span>\n                    <p className=\"text-sm font-bold\">Configurar</p>\n                  </button>\n                </div>\n              </div>\n\n              <div className=\"tech-button-3d bg-white border-2 border-slate-300 dark:from-gray-800/50 dark:to-gray-700/50 dark:border-slate-500/30 rounded-xl shadow-sm p-6 dark:backdrop-blur-sm\">\n                <h3 className=\"text-lg font-bold text-slate-900 dark:text-white tech-text-glow mb-4 flex items-center gap-2\">\n                  <div className=\"w-6 h-6 bg-gradient-to-br from-purple-500 to-cyan-600 rounded flex items-center justify-center tech-glow\">\n                    <Clock className=\"w-4 h-4 text-white\" />\n                  </div>\n                  √ìrdenes Recientes\n                </h3>\n                <div className=\"space-y-3\">\n                  {recentOrders.map((order: Invoice) => (\n                    <div key={order.id} className=\"tech-button-3d flex items-center justify-between p-3 bg-white border border-slate-300/50 dark:from-slate-800/40 dark:to-slate-700/40 dark:border-slate-500/30 rounded-lg hover:bg-slate-50 dark:hover:from-slate-700/60 dark:hover:to-slate-600/60 hover:shadow-md hover:scale-[1.02] transition-all duration-200\">\n                      <div>\n                        <p className=\"font-bold text-slate-900 dark:text-white tech-text-glow\" data-testid={`recent-order-${order.id}`}>\n                          {order.number}\n                        </p>\n                        <p className=\"text-sm text-slate-600 dark:text-slate-300 font-medium\">{order.customerName}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <span className={`inline-block ${getStatusClasses(order.status)} font-semibold`}>\n                          {getStatusText(order.status)}\n                        </span>\n                        <p className=\"text-sm font-bold text-slate-900 dark:text-white mt-1 tech-text-glow\">\n                          RD${parseFloat(order.total).toFixed(2)}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex relative\">\n      {/* Mobile Hamburger Button */}\n      <button\n        onClick={() => setSidebarOpen(!sidebarOpen)}\n        className=\"fixed top-4 left-4 z-50 lg:hidden tech-button-3d p-3 rounded-lg bg-card border border-border min-h-11 min-w-11 flex items-center justify-center hover:scale-105 transition-all duration-200\"\n        aria-expanded={sidebarOpen}\n        aria-label={sidebarOpen ? \"Cerrar men√∫\" : \"Abrir men√∫\"}\n        data-testid=\"hamburger-menu\"\n      >\n        {sidebarOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n      </button>\n\n      {/* Mobile Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-30 lg:hidden transition-opacity duration-300\"\n          onClick={() => setSidebarOpen(false)}\n          onKeyDown={(e) => e.key === 'Escape' && setSidebarOpen(false)}\n        />\n      )}\n\n      {/* Sidebar Navigation */}\n      <nav className={`${\n        sidebarOpen ? 'translate-x-0' : '-translate-x-full'\n      } fixed lg:relative lg:translate-x-0 w-64 h-screen lg:h-full bg-gradient-to-b from-gray-900 via-purple-900/20 to-blue-900/20 backdrop-blur-xl border-r border-cyan-500/20 flex flex-col z-40 transition-transform duration-300 lg:transition-none tech-gradient-bg`}>\n        {/* Header in Sidebar */}\n        <div className=\"p-6 border-b border-cyan-500/20\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"h-12 w-12 bg-white/10 backdrop-blur-sm rounded-full flex items-center justify-center hover:scale-105 hover:bg-white/20 transition-all duration-200 cursor-pointer border border-white/20 overflow-hidden\">\n                <img \n                  src={logoPath} \n                  alt=\"BT Logo\" \n                  className=\"h-10 w-10 object-cover rounded-full\"\n                />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-white tech-text-glow\">Billtracky</h1>\n                <p className=\"text-sm text-cyan-200\">CleanWash Lavander√≠a</p>\n              </div>\n            </div>\n            <ThemeToggle />\n          </div>\n        </div>\n        \n        {/* Navigation Menu */}\n        <div className=\"flex-1 p-4\">\n          <div className=\"space-y-2\">\n            <button \n              onClick={() => setActiveTab('overview')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'overview' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-overview\"\n            >\n              <Home className=\"w-4 h-4 mr-3\" />\n              Dashboard\n            </button>\n            \n            <button \n              onClick={() => setActiveTab('invoices')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'invoices' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-invoices\"\n            >\n              <FileText className=\"w-4 h-4 mr-3\" />\n              Nueva Factura\n            </button>\n            \n            <button \n              onClick={() => setActiveTab('orders')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'orders' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-orders\"\n            >\n              <Package className=\"w-4 h-4 mr-3\" />\n              √ìrdenes\n            </button>\n            \n            <button \n              onClick={() => setActiveTab('cash-closure')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'cash-closure' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-cash-closure\"\n            >\n              <BarChart3 className=\"w-4 h-4 mr-3\" />\n              Cierre de Caja\n            </button>\n            \n            <button \n              onClick={() => setActiveTab('cash-closures-history')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'cash-closures-history' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-cash-closures-history\"\n            >\n              <History className=\"w-4 h-4 mr-3\" />\n              Historial Cierres\n            </button>\n            \n            <button \n              onClick={() => setActiveTab('services')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'services' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-services\"\n            >\n              <Settings className=\"w-4 h-4 mr-3\" />\n              Servicios\n            </button>\n            \n            <button \n              onClick={() => setActiveTab('payment-methods')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'payment-methods' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-payment-methods\"\n            >\n              <CreditCard className=\"w-4 h-4 mr-3\" />\n              M√©todos de Pago\n            </button>\n            \n            <button \n              onClick={() => setActiveTab('customers')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'customers' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-customers\"\n            >\n              <Users className=\"w-4 h-4 mr-3\" />\n              Clientes\n            </button>\n            \n            <button \n              onClick={() => setActiveTab('employees')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'employees' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-employees\"\n            >\n              <Crown className=\"w-4 h-4 mr-3\" />\n              Empleados\n            </button>\n            \n            <button \n              onClick={() => setActiveTab('company-config')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'company-config' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-company-config\"\n            >\n              <Building2 className=\"w-4 h-4 mr-3\" />\n              Configuraci√≥n Empresa\n            </button>\n            \n            <button \n              onClick={() => setActiveTab('whatsapp-config')} \n              className={`w-full flex items-center px-4 py-3 text-sm font-medium rounded-lg transition-all duration-300 ${\n                activeTab === 'whatsapp-config' \n                  ? 'tech-button-3d tech-button-active text-cyan-400 dark:shadow-lg' \n                  : 'tech-button-3d text-gray-300 hover:text-cyan-400'\n              }`}\n              data-testid=\"tab-whatsapp-config\"\n            >\n              <MessageCircle className=\"w-4 h-4 mr-3\" />\n              Mensajes WhatsApp\n            </button>\n          </div>\n        </div>\n        \n        {/* User Info and Logout */}\n        <div className=\"p-4 border-t border-cyan-500/20\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"text-left\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full pulse-animation tech-glow\"></div>\n                  <span className=\"text-xs text-green-400 font-medium\">En l√≠nea</span>\n                </div>\n                <p className=\"text-sm font-medium text-white\" data-testid=\"user-name\">\n                  {user.name}\n                </p>\n                <span className={`inline-block px-2 py-1 text-xs font-medium rounded-full mt-1 ${\n                  user.role === 'manager' ? 'bg-cyan-400/20 text-cyan-400 border border-cyan-400/30' : \n                  'bg-purple-400/20 text-purple-400 border border-purple-400/30'\n                }`}>\n                  {user.role === 'manager' ? 'Gerente' : \n                   user.role === 'supervisor' ? 'Supervisor' : 'Empleado'}\n                </span>\n              </div>\n            </div>\n            \n            <button\n              onClick={onLogout}\n              className=\"tech-button-3d p-2 text-gray-300 hover:text-red-400 rounded-lg transition-all duration-300\"\n              title=\"Cerrar sesi√≥n\"\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"w-5 h-5\" />\n            </button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Mobile Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 dark:backdrop-blur-sm z-30 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"sidebar-overlay\"\n        />\n      )}\n\n      {/* Main Content */}\n      <main className={`flex-1 pt-20 px-4 pb-6 sm:pt-6 sm:px-6 lg:p-8 overflow-auto transition-all duration-300 ${\n        sidebarOpen && 'lg:ml-0'\n      }`}>\n        {renderTabContent()}\n      </main>\n    </div>\n  );\n}\n","size_bytes":26137},"client/src/components/invoice-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Plus, Save, Printer, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type Employee, type Service, type Customer } from \"@shared/schema\";\n\ninterface InvoiceFormProps {\n  user: Employee;\n  onNotification: (message: string) => void;\n}\n\ninterface InvoiceItem {\n  id: string;\n  serviceId: string;\n  serviceName: string;\n  serviceType: string;\n  quantity: number;\n  unitPrice: number;\n  total: number;\n}\n\nexport default function InvoiceForm({ user, onNotification }: InvoiceFormProps) {\n  const [invoiceNumber, setInvoiceNumber] = useState(\"\");\n  const [customerName, setCustomerName] = useState(\"\");\n  const [customerPhone, setCustomerPhone] = useState(\"\");\n  const [items, setItems] = useState<InvoiceItem[]>([]);\n  const [selectedService, setSelectedService] = useState(\"\");\n  const [selectedServiceType, setSelectedServiceType] = useState(\"\");\n  const [quantity, setQuantity] = useState(1);\n  const [paymentMethod, setPaymentMethod] = useState(\"pending\");\n\n  const { data: services = [] } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: nextNumber } = useQuery<{number: string}>({\n    queryKey: [\"/api/invoices/next-number\"],\n  });\n\n  const { data: existingCustomer } = useQuery<Customer | null>({\n    queryKey: [\"/api/customers/phone\", customerPhone],\n    enabled: customerPhone.length >= 10,\n  });\n\n  const saveInvoiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/invoices\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/metrics/dashboard\"] });\n      onNotification(\"Factura guardada exitosamente\");\n      clearForm();\n    },\n    onError: () => {\n      onNotification(\"Error al guardar la factura\");\n    },\n  });\n\n  useEffect(() => {\n    if (nextNumber) {\n      setInvoiceNumber(nextNumber.number);\n    }\n  }, [nextNumber]);\n\n  useEffect(() => {\n    if (existingCustomer && existingCustomer.name) {\n      setCustomerName(existingCustomer.name);\n    }\n  }, [existingCustomer]);\n\n  const addItem = () => {\n    if (!selectedService || !selectedServiceType) {\n      onNotification(\"Seleccione un servicio y tipo\");\n      return;\n    }\n\n    const service = services.find(s => s.id === selectedService);\n    if (!service) return;\n\n    let unitPrice = 0;\n    switch (selectedServiceType) {\n      case 'wash':\n        unitPrice = parseFloat(service.washPrice);\n        break;\n      case 'iron':\n        unitPrice = parseFloat(service.ironPrice);\n        break;\n      case 'both':\n        unitPrice = parseFloat(service.bothPrice);\n        break;\n    }\n\n    const newItem: InvoiceItem = {\n      id: Date.now().toString(),\n      serviceId: service.id,\n      serviceName: service.name,\n      serviceType: selectedServiceType,\n      quantity,\n      unitPrice,\n      total: unitPrice * quantity\n    };\n\n    setItems([...items, newItem]);\n    setQuantity(1);\n    setSelectedService(\"\");\n    setSelectedServiceType(\"\");\n  };\n\n  const removeItem = (id: string) => {\n    setItems(items.filter(item => item.id !== id));\n  };\n\n  const getServiceTypeName = (type: string) => {\n    switch (type) {\n      case 'wash': return 'Solo Lavado';\n      case 'iron': return 'Solo Planchado';\n      case 'both': return 'Lavado + Planchado';\n      default: return type;\n    }\n  };\n\n  const subtotal = items.reduce((sum, item) => sum + item.total, 0);\n  const tax = subtotal * 0.18;\n  const total = subtotal + tax;\n\n  const handleSave = () => {\n    if (!customerName || !customerPhone || items.length === 0) {\n      onNotification(\"Complete todos los campos requeridos\");\n      return;\n    }\n\n    const invoiceData = {\n      number: invoiceNumber,\n      customerId: existingCustomer?.id || null,\n      customerName,\n      customerPhone,\n      subtotal: subtotal.toFixed(2),\n      tax: tax.toFixed(2),\n      total: total.toFixed(2),\n      paymentMethod,\n      status: \"received\",\n      employeeId: user.id\n    };\n\n    const invoiceItems = items.map(item => ({\n      serviceId: item.serviceId,\n      serviceName: item.serviceName,\n      serviceType: item.serviceType,\n      quantity: item.quantity,\n      unitPrice: item.unitPrice.toFixed(2),\n      total: item.total.toFixed(2)\n    }));\n\n    saveInvoiceMutation.mutate({ invoice: invoiceData, items: invoiceItems });\n  };\n\n  const clearForm = () => {\n    setCustomerName(\"\");\n    setCustomerPhone(\"\");\n    setItems([]);\n    setSelectedService(\"\");\n    setSelectedServiceType(\"\");\n    setQuantity(1);\n    setPaymentMethod(\"pending\");\n    // Get new invoice number\n    queryClient.invalidateQueries({ queryKey: [\"/api/invoices/next-number\"] });\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n      {/* Invoice Form */}\n      <div className=\"lg:col-span-2\">\n        <div className=\"bg-card rounded-xl dark:shadow-sm border border-border p-6\">\n          <h2 className=\"text-xl font-semibold text-card-foreground mb-6\">Nueva Factura</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-card-foreground mb-2\">\n                N√∫mero de Factura\n              </label>\n              <input\n                type=\"text\"\n                value={invoiceNumber}\n                readOnly\n                className=\"w-full px-4 py-2 border border-border rounded-lg bg-muted text-muted-foreground\"\n                data-testid=\"input-invoice-number\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-card-foreground mb-2\">Fecha</label>\n              <input\n                type=\"date\"\n                defaultValue={new Date().toISOString().split('T')[0]}\n                className=\"w-full px-4 py-2 border border-border rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent\"\n                data-testid=\"input-invoice-date\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-card-foreground mb-2\">Cliente</label>\n              <input\n                type=\"text\"\n                placeholder=\"Nombre del cliente\"\n                value={customerName}\n                onChange={(e) => setCustomerName(e.target.value)}\n                className=\"w-full px-4 py-2 border border-border rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent\"\n                data-testid=\"input-customer-name\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-card-foreground mb-2\">Tel√©fono</label>\n              <input\n                type=\"tel\"\n                placeholder=\"809-000-0000\"\n                value={customerPhone}\n                onChange={(e) => setCustomerPhone(e.target.value)}\n                className=\"w-full px-4 py-2 border border-border rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent\"\n                data-testid=\"input-customer-phone\"\n              />\n            </div>\n          </div>\n\n          {/* Service Selection */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-medium text-card-foreground mb-4\">Agregar Servicios</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n              <select \n                value={selectedService}\n                onChange={(e) => setSelectedService(e.target.value)}\n                className=\"px-4 py-2 border border-border rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent\"\n                data-testid=\"select-service\"\n              >\n                <option value=\"\">Seleccionar prenda</option>\n                {services.map((service) => (\n                  <option key={service.id} value={service.id}>\n                    {service.name}\n                  </option>\n                ))}\n              </select>\n              \n              <select \n                value={selectedServiceType}\n                onChange={(e) => setSelectedServiceType(e.target.value)}\n                className=\"px-4 py-2 border border-border rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent\"\n                data-testid=\"select-service-type\"\n              >\n                <option value=\"\">Tipo de servicio</option>\n                {selectedService && services.find(s => s.id === selectedService) && (\n                  <>\n                    <option value=\"wash\">\n                      Lavado - RD${parseFloat(services.find(s => s.id === selectedService)!.washPrice).toFixed(2)}\n                    </option>\n                    <option value=\"iron\">\n                      Planchado - RD${parseFloat(services.find(s => s.id === selectedService)!.ironPrice).toFixed(2)}\n                    </option>\n                    <option value=\"both\">\n                      Lavado + Planchado - RD${parseFloat(services.find(s => s.id === selectedService)!.bothPrice).toFixed(2)}\n                    </option>\n                  </>\n                )}\n              </select>\n              \n              <input\n                type=\"number\"\n                placeholder=\"Cantidad\"\n                min=\"1\"\n                value={quantity}\n                onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}\n                className=\"px-4 py-2 border border-border rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent\"\n                data-testid=\"input-quantity\"\n              />\n              \n              <button \n                onClick={addItem}\n                className=\"px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors flex items-center justify-center\"\n                data-testid=\"button-add-item\"\n              >\n                <Plus className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n\n          {/* Items List */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-medium text-card-foreground mb-4\">Art√≠culos</h3>\n            {items.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground bg-muted rounded-lg\">\n                <p>No hay art√≠culos agregados</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {items.map((item) => (\n                  <div key={item.id} className=\"flex items-center justify-between p-4 bg-muted rounded-lg\" data-testid={`item-${item.id}`}>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-card-foreground\">\n                        {item.serviceName} - {getServiceTypeName(item.serviceType)}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Cantidad: {item.quantity}\n                      </p>\n                    </div>\n                    <div className=\"text-right mr-4\">\n                      <p className=\"font-medium text-card-foreground\">\n                        RD${item.total.toFixed(2)}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        RD${item.unitPrice.toFixed(2)} c/u\n                      </p>\n                    </div>\n                    <button \n                      onClick={() => removeItem(item.id)}\n                      className=\"p-2 text-destructive hover:bg-destructive/10 rounded-lg transition-colors\"\n                      data-testid={`button-remove-${item.id}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <button \n              onClick={handleSave}\n              disabled={saveInvoiceMutation.isPending}\n              className=\"flex-1 bg-primary text-primary-foreground py-3 rounded-lg hover:bg-primary/90 font-medium transition-colors flex items-center justify-center disabled:opacity-50\"\n              data-testid=\"button-save-invoice\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {saveInvoiceMutation.isPending ? \"Guardando...\" : \"Guardar Factura\"}\n            </button>\n            <button \n              onClick={() => onNotification(\"Preparando impresi√≥n...\")}\n              className=\"flex-1 bg-secondary text-secondary-foreground py-3 rounded-lg hover:bg-secondary/90 font-medium transition-colors flex items-center justify-center\"\n              data-testid=\"button-print-invoice\"\n            >\n              <Printer className=\"w-4 h-4 mr-2\" />\n              Imprimir\n            </button>\n            <button \n              onClick={clearForm}\n              className=\"flex-1 bg-muted text-muted-foreground py-3 rounded-lg hover:bg-accent font-medium transition-colors\"\n              data-testid=\"button-clear-invoice\"\n            >\n              Limpiar\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Invoice Preview */}\n      <div className=\"lg:col-span-1\">\n        <div className=\"bg-card rounded-xl dark:shadow-sm border border-border p-6 sticky top-6\">\n          <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">Resumen</h3>\n          \n          <div className=\"space-y-3 mb-6\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Subtotal:</span>\n              <span className=\"font-medium\" data-testid=\"text-subtotal\">RD${subtotal.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">ITBIS (18%):</span>\n              <span className=\"font-medium\" data-testid=\"text-tax\">RD${tax.toFixed(2)}</span>\n            </div>\n            <div className=\"border-t border-border pt-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-lg font-semibold text-card-foreground\">Total:</span>\n                <span className=\"text-lg font-bold text-primary\" data-testid=\"text-total\">RD${total.toFixed(2)}</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-3\">\n            <h4 className=\"font-medium text-card-foreground\">M√©todo de Pago</h4>\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center space-x-2\">\n                <input \n                  type=\"radio\" \n                  name=\"paymentMethod\" \n                  value=\"cash\" \n                  checked={paymentMethod === \"cash\"}\n                  onChange={(e) => setPaymentMethod(e.target.value)}\n                  className=\"text-primary focus:ring-primary\" \n                  data-testid=\"radio-payment-cash\"\n                />\n                <span className=\"text-sm\">Efectivo</span>\n              </label>\n              <label className=\"flex items-center space-x-2\">\n                <input \n                  type=\"radio\" \n                  name=\"paymentMethod\" \n                  value=\"card\" \n                  checked={paymentMethod === \"card\"}\n                  onChange={(e) => setPaymentMethod(e.target.value)}\n                  className=\"text-primary focus:ring-primary\" \n                  data-testid=\"radio-payment-card\"\n                />\n                <span className=\"text-sm\">Tarjeta</span>\n              </label>\n              <label className=\"flex items-center space-x-2\">\n                <input \n                  type=\"radio\" \n                  name=\"paymentMethod\" \n                  value=\"pending\" \n                  checked={paymentMethod === \"pending\"}\n                  onChange={(e) => setPaymentMethod(e.target.value)}\n                  className=\"text-primary focus:ring-primary\" \n                  data-testid=\"radio-payment-pending\"\n                />\n                <span className=\"text-sm\">Pendiente</span>\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16446},"client/src/components/landing-page.tsx":{"content":"import { useState } from \"react\";\nimport { Check, Star, Users, Building, CreditCard, Clock, Shield, HeadphonesIcon, Menu, X, ChevronRight, Zap, TrendingUp, Smartphone, MessageCircle, FileText, Award, Globe, BarChart3, Sparkles, ArrowRight, Play, Briefcase, Target, DollarSign, Rocket, CheckCircle, Phone, Mail, MapPin, Settings } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport logoPath from \"@assets/generated_images/BT_fused_single_letter_1577c2b8.png\";\nimport dashboardDevicesImage from \"@assets/generated_images/3D_floating_tech_devices_with_BillTracky_f6288f1b.png\";\n\ninterface LandingPageProps {\n  onGetStarted: () => void;\n  onLogin: () => void;\n}\n\nexport default function LandingPage({ onGetStarted, onLogin }: LandingPageProps) {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const stats = [\n    { label: \"Lavander√≠as activas\", value: \"500+\", icon: Building },\n    { label: \"Facturas procesadas\", value: \"50,000+\", icon: FileText },\n    { label: \"Ahorro de tiempo\", value: \"75%\", icon: Clock },\n    { label: \"Satisfacci√≥n del cliente\", value: \"98%\", icon: Award }\n  ];\n\n  const plans = [\n    {\n      name: \"Gratis\",\n      price: \"0\",\n      description: \"Perfecto para probar la plataforma\",\n      features: [\n        \"Hasta 50 facturas por mes\",\n        \"1 usuario\",\n        \"Gesti√≥n b√°sica de clientes\",\n        \"Servicios b√°sicos\",\n        \"Soporte por email\"\n      ],\n      cta: \"Empezar gratis\",\n      popular: false,\n      color: \"border-gray-200\"\n    },\n    {\n      name: \"B√°sico\",\n      price: \"29\",\n      description: \"Para peque√±as lavander√≠as\",\n      features: [\n        \"Hasta 500 facturas por mes\",\n        \"3 usuarios\",\n        \"Gesti√≥n avanzada de clientes\",\n        \"M√©todos de pago personalizados\",\n        \"Plantillas de mensajes\",\n        \"Reportes b√°sicos\",\n        \"Soporte prioritario\"\n      ],\n      cta: \"Elegir B√°sico\",\n      popular: true,\n      color: \"border-secondary ring-2 ring-secondary\"\n    },\n    {\n      name: \"Pro\",\n      price: \"79\",\n      description: \"Para lavander√≠as en crecimiento\",\n      features: [\n        \"Facturas ilimitadas\",\n        \"Usuarios ilimitados\",\n        \"Dashboard avanzado\",\n        \"An√°lisis y m√©tricas completas\",\n        \"Integraci√≥n con WhatsApp\",\n        \"Configuraci√≥n de empresa personalizada\",\n        \"Multi-sucursales\",\n        \"Soporte dedicado 24/7\"\n      ],\n      cta: \"Elegir Pro\",\n      popular: false,\n      color: \"border-gray-200\"\n    }\n  ];\n\n  const features = [\n    {\n      icon: <CreditCard className=\"w-8 h-8\" />,\n      title: \"Facturaci√≥n Inteligente\",\n      description: \"Crea facturas profesionales en segundos con c√°lculos autom√°ticos de ITBIS y totales. Sistema completo de gesti√≥n de pagos.\",\n      category: \"Gesti√≥n\"\n    },\n    {\n      icon: <Users className=\"w-8 h-8\" />,\n      title: \"Gesti√≥n de Clientes\",\n      description: \"Mant√©n un registro completo de tus clientes con historial de √≥rdenes, preferencias y comunicaci√≥n automatizada.\",\n      category: \"Clientes\"\n    },\n    {\n      icon: <BarChart3 className=\"w-8 h-8\" />,\n      title: \"Analytics Avanzados\",\n      description: \"Reportes detallados, m√©tricas en tiempo real y an√°lisis de rendimiento para tomar mejores decisiones de negocio.\",\n      category: \"Analytics\"\n    },\n    {\n      icon: <Smartphone className=\"w-8 h-8\" />,\n      title: \"Sistema M√≥vil\",\n      description: \"Accede desde cualquier dispositivo. Interface optimizada para tablet y m√≥vil con funcionamiento offline.\",\n      category: \"Tecnolog√≠a\"\n    },\n    {\n      icon: <Shield className=\"w-8 h-8\" />,\n      title: \"Datos Seguros\",\n      description: \"Tus datos est√°n protegidos con la m√°s alta seguridad, respaldos autom√°ticos y cumplimiento de normativas.\",\n      category: \"Seguridad\"\n    }\n  ];\n\n  const benefits = [\n    {\n      icon: <TrendingUp className=\"w-6 h-6\" />,\n      title: \"Aumenta tus ingresos hasta 40%\",\n      description: \"Optimiza operaciones, reduce tiempos de espera y mejora la experiencia del cliente\"\n    },\n    {\n      icon: <Clock className=\"w-6 h-6\" />,\n      title: \"Ahorra 6 horas diarias\",\n      description: \"Automatiza procesos manuales y elimina el papeleo innecesario\"\n    },\n    {\n      icon: <Sparkles className=\"w-6 h-6\" />,\n      title: \"100% Profesional\",\n      description: \"Impresiona a tus clientes con un sistema moderno y eficiente\"\n    }\n  ];\n\n  const testimonials = [\n    {\n      name: \"Mar√≠a Gonz√°lez\",\n      business: \"Lavander√≠a Express\",\n      rating: 5,\n      text: \"Billtracky transform√≥ completamente nuestro negocio. Ahora procesamos el doble de √≥rdenes con la mitad del tiempo.\"\n    },\n    {\n      name: \"Carlos Rodr√≠guez\",\n      business: \"CleanCare Lavander√≠a\",\n      rating: 5,\n      text: \"La facilidad de uso es incre√≠ble. Mis empleados aprendieron a usarlo en menos de una hora.\"\n    },\n    {\n      name: \"Ana Mart√≠nez\",\n      business: \"Lavado Premium\",\n      rating: 5,\n      text: \"Los reportes me ayudan a tomar mejores decisiones de negocio. Recomiendo Billtracky al 100%.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"fixed top-0 left-0 right-0 z-50 bg-gradient-to-br from-gray-900/95 via-blue-950/95 to-purple-950/95 backdrop-blur-xl border-b border-white/10 tech-glow\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"h-12 sm:h-14 w-12 sm:w-14 bg-white/10 backdrop-blur-sm rounded-full flex items-center justify-center hover:scale-105 hover:bg-white/20 transition-all duration-200 cursor-pointer border border-white/20 overflow-hidden\">\n                <img \n                  src={logoPath} \n                  alt=\"BT Logo\" \n                  className=\"h-11 sm:h-14 w-11 sm:w-14 object-cover rounded-full\"\n                />\n              </div>\n              <div className=\"hidden sm:block\">\n                <h1 className=\"text-lg sm:text-xl font-black bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent tech-text-glow\">BillTracky</h1>\n                <p className=\"text-xs text-white/90 font-medium\">Sistema de Gesti√≥n para Lavander√≠as</p>\n              </div>\n            </div>\n\n            {/* Desktop Navigation */}\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#features\" className=\"text-sm font-bold text-white/90 hover:text-cyan-400 transition-all duration-300\" data-testid=\"link-features\">\n                Caracter√≠sticas\n              </a>\n              <a href=\"#pricing\" className=\"text-sm font-bold text-white/90 hover:text-cyan-400 transition-all duration-300\" data-testid=\"link-pricing\">\n                Precios\n              </a>\n              <a href=\"#testimonials\" className=\"text-sm font-bold text-white/90 hover:text-cyan-400 transition-all duration-300\" data-testid=\"link-testimonials\">\n                Testimonios\n              </a>\n              <Button \n                variant=\"ghost\" \n                onClick={onLogin}\n                className=\"text-white hover:text-cyan-400 bg-white/5 border border-white/20 hover:border-cyan-400/50 tech-glow shadow-lg hover:shadow-2xl hover:scale-105 transition-all duration-300\"\n                data-testid=\"header-login-button\"\n              >\n                Iniciar Sesi√≥n\n              </Button>\n              <Button \n                onClick={onGetStarted}\n                className=\"bg-gradient-to-r from-cyan-600 to-purple-600 text-white hover:from-cyan-500 hover:to-purple-500 px-6 py-2 rounded-xl tech-glow hover:scale-105 transition-all duration-300 font-bold border-t border-white/20 shadow-lg hover:shadow-2xl\"\n                data-testid=\"header-signup-button\"\n              >\n                Empezar Gratis\n              </Button>\n            </nav>\n\n            {/* Mobile menu button */}\n            <button\n              className=\"md:hidden p-3 text-white hover:text-cyan-400 transition-colors duration-300 rounded-lg hover:bg-white/10 min-h-11 min-w-11 flex items-center justify-center\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"mobile-menu-toggle\"\n            >\n              {mobileMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n            </button>\n          </div>\n\n          {/* Mobile Navigation */}\n          {mobileMenuOpen && (\n            <div className=\"md:hidden py-4 border-t border-white/10\">\n              <div className=\"flex flex-col space-y-4\">\n                <a href=\"#features\" className=\"text-sm font-bold text-white/90 hover:text-cyan-400 transition-colors duration-300\" data-testid=\"mobile-link-features\">\n                  Caracter√≠sticas\n                </a>\n                <a href=\"#pricing\" className=\"text-sm font-bold text-white/90 hover:text-cyan-400 transition-colors duration-300\" data-testid=\"mobile-link-pricing\">\n                  Precios\n                </a>\n                <a href=\"#testimonials\" className=\"text-sm font-bold text-white/90 hover:text-cyan-400 transition-colors duration-300\" data-testid=\"mobile-link-testimonials\">\n                  Testimonios\n                </a>\n                <Button variant=\"ghost\" onClick={onLogin} className=\"justify-start text-white bg-white/5 border border-white/20 hover:border-cyan-400/50 tech-glow shadow-lg hover:shadow-2xl hover:scale-105 transition-all duration-300\" data-testid=\"mobile-login-button\">\n                  Iniciar Sesi√≥n\n                </Button>\n                <Button onClick={onGetStarted} className=\"justify-start bg-gradient-to-r from-cyan-600 to-purple-600 text-white hover:from-cyan-500 hover:to-purple-500 font-bold tech-glow\" data-testid=\"mobile-signup-button\">\n                  Empezar Gratis\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </header>\n\n      {/* Hero Section - Tech Style */}\n      <section className=\"relative pt-20 sm:pt-24 md:pt-32 lg:pt-40 pb-20 lg:pb-32 overflow-hidden tech-gradient-bg\">\n        {/* Tech Background */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900\"></div>\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_800px_at_100%_200px,rgba(59,130,246,0.15),transparent)]\"></div>\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_600px_at_0%_100%,rgba(147,51,234,0.1),transparent)]\"></div>\n        \n        {/* Tech particles */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"tech-particle\" style={{left: '10%', animationDelay: '0s'}}></div>\n          <div className=\"tech-particle\" style={{left: '30%', animationDelay: '3s'}}></div>\n          <div className=\"tech-particle\" style={{left: '50%', animationDelay: '6s'}}></div>\n          <div className=\"tech-particle\" style={{left: '70%', animationDelay: '9s'}}></div>\n          <div className=\"tech-particle\" style={{left: '90%', animationDelay: '2s'}}></div>\n        </div>\n        \n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"text-center max-w-6xl mx-auto\">\n            {/* Tech Badge */}\n            <div className=\"inline-flex items-center px-6 py-3 bg-gradient-to-r from-purple-600/20 to-cyan-600/20 border border-purple-500/30 rounded-full mb-8 tech-glow interactive-badge\">\n              <Sparkles className=\"w-5 h-5 text-cyan-400 mr-3\" />\n              <span className=\"text-sm font-bold text-white tracking-wide\">NUEVO: MENSAJES WHATSAPP AUTOMATIZADOS</span>\n            </div>\n            \n            <h1 className=\"text-5xl md:text-6xl lg:text-7xl font-black text-white mb-8 leading-tight tech-text-glow\">\n              Lleva tu lavander√≠a al\n              <span className=\"block bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                siguiente nivel\n              </span>\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-white/90 mb-12 max-w-4xl mx-auto leading-relaxed font-light\">\n              La plataforma completa que necesitas para automatizar tu negocio, \n              aumentar ingresos y brindar una experiencia excepcional a tus clientes.\n            </p>\n\n            {/* Tech CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center mb-16\">\n              <Button \n                onClick={onGetStarted}\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-cyan-500 via-blue-600 to-purple-600 text-white hover:from-cyan-400 hover:via-blue-500 hover:to-purple-500 text-xl px-12 py-6 rounded-2xl tech-glow hover:scale-105 transition-all duration-300 modern-button font-bold\"\n                data-testid=\"hero-signup-button\"\n              >\n                <Rocket className=\"mr-3 w-6 h-6\" />\n                Probar Gratis 30 D√≠as\n                <ArrowRight className=\"ml-3 w-6 h-6\" />\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                onClick={onLogin}\n                className=\"text-xl px-12 py-6 rounded-2xl border-2 border-cyan-500/50 text-cyan-400 hover:border-cyan-400 hover:bg-cyan-500/10 transition-all duration-300 bg-black/30 backdrop-blur-sm font-bold tech-glow\"\n                data-testid=\"hero-login-button\"\n              >\n                <Play className=\"mr-3 w-6 h-6\" />\n                Ver Demo en Vivo\n              </Button>\n            </div>\n\n            {/* Tech Trust indicators */}\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-8 text-sm\">\n              <div className=\"flex items-center gap-3 bg-gradient-to-r from-green-600/20 to-emerald-600/20 border border-green-500/30 px-6 py-3 rounded-full tech-glow interactive-badge\">\n                <CheckCircle className=\"w-5 h-5 text-green-400\" />\n                <span className=\"font-bold text-white\">Sin tarjeta de cr√©dito</span>\n              </div>\n              <div className=\"flex items-center gap-3 bg-gradient-to-r from-blue-600/20 to-cyan-600/20 border border-blue-500/30 px-6 py-3 rounded-full tech-glow interactive-badge\">\n                <Clock className=\"w-5 h-5 text-blue-400\" />\n                <span className=\"font-bold text-white\">Configuraci√≥n en 5 minutos</span>\n              </div>\n              <div className=\"flex items-center gap-3 bg-gradient-to-r from-purple-600/20 to-pink-600/20 border border-purple-500/30 px-6 py-3 rounded-full tech-glow interactive-badge\">\n                <HeadphonesIcon className=\"w-5 h-5 text-purple-400\" />\n                <span className=\"font-bold text-white\">Soporte en espa√±ol 24/7</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Tech Stats Section */}\n          <div className=\"mt-24 grid grid-cols-2 md:grid-cols-4 gap-8 max-w-5xl mx-auto\">\n            {stats.map((stat, index) => {\n              const IconComponent = stat.icon;\n              return (\n                <div key={index} className=\"text-center group\">\n                  <div className=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-cyan-500 via-blue-600 to-purple-600 rounded-3xl flex items-center justify-center tech-glow hover:scale-110 transition-all duration-300 group-hover:shadow-2xl floating-device\">\n                    <IconComponent className=\"w-10 h-10 text-white\" />\n                  </div>\n                  <div className=\"text-4xl font-black bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent mb-2 tech-text-glow\">{stat.value}</div>\n                  <div className=\"text-sm text-blue-200/80 font-bold\">{stat.label}</div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </section>\n\n      {/* Modern 3D Tech Devices Section */}\n      <section className=\"py-32 tech-gradient-bg relative overflow-hidden\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16 items-center\">\n            {/* Left side - Content */}\n            <div className=\"order-2 lg:order-1\">\n              <div className=\"inline-flex items-center px-6 py-3 tech-glow bg-gradient-to-r from-blue-600/20 to-purple-600/20 border border-blue-500/30 rounded-full mb-8 interactive-badge\">\n                <Smartphone className=\"w-5 h-5 text-blue-400 mr-3\" />\n                <span className=\"text-sm font-bold text-white tracking-wide\">üì± MULTI-DISPOSITIVO</span>\n              </div>\n              \n              <h2 className=\"text-5xl md:text-6xl font-black text-white mb-8 leading-tight\">\n                Tu negocio en\n                <span className=\"block bg-gradient-to-r from-blue-400 via-purple-400 to-cyan-400 bg-clip-text text-transparent\">\n                  cualquier dispositivo\n                </span>\n              </h2>\n              \n              <p className=\"text-xl text-white/90 mb-12 leading-relaxed font-light\">\n                Dashboard completo, gesti√≥n de √≥rdenes y facturaci√≥n. Todo sincronizado \n                en tiempo real entre todos tus dispositivos con tecnolog√≠a avanzada.\n              </p>\n              \n              <div className=\"space-y-4 mb-8\">\n                <div className=\"flex items-start\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-full flex items-center justify-center flex-shrink-0 mr-4 mt-1 tech-glow\">\n                    <Check className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-bold text-white mb-2 text-lg\">üíª Dashboard Completo</h3>\n                    <p className=\"text-white/90\">M√©tricas, acciones r√°pidas y control total desde laptop</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-600 rounded-full flex items-center justify-center flex-shrink-0 mr-4 mt-1 tech-glow\">\n                    <Check className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-bold text-white mb-2 text-lg\">üì± Gesti√≥n de √ìrdenes</h3>\n                    <p className=\"text-white/90\">Administra todas las √≥rdenes desde tablet con interfaz t√°ctil</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-emerald-500 to-cyan-500 rounded-full flex items-center justify-center flex-shrink-0 mr-4 mt-1 tech-glow\">\n                    <Check className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-bold text-white mb-2 text-lg\">üìÑ Facturaci√≥n M√≥vil</h3>\n                    <p className=\"text-white/90\">Crea facturas al instante desde tu m√≥vil en cualquier lugar</p>\n                  </div>\n                </div>\n              </div>\n              \n              <Button \n                onClick={onGetStarted}\n                className=\"bg-gradient-to-r from-cyan-500 via-blue-600 to-purple-600 text-white hover:from-cyan-400 hover:via-blue-500 hover:to-purple-500 px-10 py-4 rounded-2xl font-bold text-lg transition-all duration-300 tech-glow hover:scale-105 modern-button\"\n              >\n                <Rocket className=\"mr-3 w-6 h-6\" />\n                Experimentar Tecnolog√≠a\n              </Button>\n            </div>\n            \n            {/* Right side - 3D Tech Devices */}\n            <div className=\"order-1 lg:order-2 relative tech-devices-container\">\n              {/* Tech particles */}\n              <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n                <div className=\"tech-particle\" style={{left: '10%', animationDelay: '0s'}}></div>\n                <div className=\"tech-particle\" style={{left: '30%', animationDelay: '2s'}}></div>\n                <div className=\"tech-particle\" style={{left: '50%', animationDelay: '4s'}}></div>\n                <div className=\"tech-particle\" style={{left: '70%', animationDelay: '6s'}}></div>\n                <div className=\"tech-particle\" style={{left: '90%', animationDelay: '1s'}}></div>\n              </div>\n              \n              <div className=\"relative modern-device-showcase\">\n                {/* 3D Floating Devices */}\n                <div className=\"floating-device device-laptop\">\n                  <img \n                    src={dashboardDevicesImage} \n                    alt=\"BillTracky en dispositivos 3D - Dashboard, Gesti√≥n de √ìrdenes, Facturaci√≥n M√≥vil\" \n                    className=\"w-full h-auto tech-glow\"\n                  />\n                </div>\n                \n                {/* Floating tech badges */}\n                <div className=\"absolute top-8 -left-4 bg-gradient-to-r from-cyan-500 to-blue-600 text-white px-6 py-3 rounded-2xl text-sm font-bold shadow-2xl interactive-badge\">\n                  üíª DASHBOARD\n                </div>\n                <div className=\"absolute top-1/2 -right-8 bg-gradient-to-r from-purple-500 to-pink-600 text-white px-6 py-3 rounded-2xl text-sm font-bold shadow-2xl interactive-badge\" style={{animationDelay: '1s'}}>\n                  üì± GESTI√ìN DE √ìRDENES\n                </div>\n                <div className=\"absolute bottom-8 left-8 bg-gradient-to-r from-emerald-500 to-cyan-500 text-white px-6 py-3 rounded-2xl text-sm font-bold shadow-2xl interactive-badge\" style={{animationDelay: '2s'}}>\n                  üìÑ FACTURACI√ìN\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Complete Features List */}\n          <div className=\"mt-20\">\n            <div className=\"text-center mb-16\">\n              <div className=\"inline-flex items-center px-6 py-3 bg-gradient-to-r from-purple-600/20 to-cyan-600/20 border border-purple-500/30 rounded-full mb-8\">\n                <Award className=\"w-5 h-5 text-purple-400 mr-3\" />\n                <span className=\"text-sm font-bold text-white tracking-wide\">FUNCIONALIDADES COMPLETAS</span>\n              </div>\n              \n              <h3 className=\"text-4xl md:text-5xl font-black text-white mb-8 leading-tight\">\n                Todo lo que necesitas para tu\n                <span className=\"block bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                  lavander√≠a en una sola app\n                </span>\n              </h3>\n              \n              <p className=\"text-xl text-white/90 mb-12 max-w-4xl mx-auto leading-relaxed\">\n                BillTracky incluye todas las herramientas que necesitas para administrar tu negocio de manera profesional\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-7xl mx-auto\">\n              {/* Gesti√≥n de Clientes */}\n              <div className=\"bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 rounded-3xl p-8 border border-white/20 hover:border-cyan-400/50 transition-all duration-300 hover:transform hover:scale-105 group\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300\">\n                  <Users className=\"w-8 h-8 text-white\" />\n                </div>\n                <h4 className=\"text-xl font-bold text-white mb-4\">Gesti√≥n de Clientes</h4>\n                <p className=\"text-white/90 leading-relaxed mb-4\">Base de datos completa con historial de √≥rdenes, informaci√≥n de contacto y preferencias de cada cliente.</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  <span className=\"px-3 py-1 bg-cyan-500/20 text-cyan-300 rounded-full text-sm font-medium\">Historial completo</span>\n                  <span className=\"px-3 py-1 bg-blue-500/20 text-blue-300 rounded-full text-sm font-medium\">B√∫squeda r√°pida</span>\n                </div>\n              </div>\n              \n              {/* Configuraci√≥n de Servicios */}\n              <div className=\"bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 rounded-3xl p-8 border border-white/20 hover:border-purple-400/50 transition-all duration-300 hover:transform hover:scale-105 group\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300\">\n                  <Settings className=\"w-8 h-8 text-white\" />\n                </div>\n                <h4 className=\"text-xl font-bold text-white mb-4\">Configuraci√≥n de Servicios</h4>\n                <p className=\"text-white/90 leading-relaxed mb-4\">Define precios para lavado, planchado y servicios combinados. Personaliza categor√≠as y tarifas especiales.</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  <span className=\"px-3 py-1 bg-purple-500/20 text-purple-300 rounded-full text-sm font-medium\">Precios flexibles</span>\n                  <span className=\"px-3 py-1 bg-pink-500/20 text-pink-300 rounded-full text-sm font-medium\">Categor√≠as</span>\n                </div>\n              </div>\n              \n              {/* M√©todos de Pago */}\n              <div className=\"bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 rounded-3xl p-8 border border-white/20 hover:border-green-400/50 transition-all duration-300 hover:transform hover:scale-105 group\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300\">\n                  <CreditCard className=\"w-8 h-8 text-white\" />\n                </div>\n                <h4 className=\"text-xl font-bold text-white mb-4\">M√©todos de Pago</h4>\n                <p className=\"text-white/90 leading-relaxed mb-4\">Acepta efectivo, tarjetas, transferencias y m√°s. Configura comisiones y referencias autom√°ticamente.</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  <span className=\"px-3 py-1 bg-green-500/20 text-green-300 rounded-full text-sm font-medium\">M√∫ltiples opciones</span>\n                  <span className=\"px-3 py-1 bg-emerald-500/20 text-emerald-300 rounded-full text-sm font-medium\">Sin comisiones</span>\n                </div>\n              </div>\n              \n              {/* Cierre de Caja */}\n              <div className=\"bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 rounded-3xl p-8 border border-white/20 hover:border-yellow-400/50 transition-all duration-300 hover:transform hover:scale-105 group\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300\">\n                  <BarChart3 className=\"w-8 h-8 text-white\" />\n                </div>\n                <h4 className=\"text-xl font-bold text-white mb-4\">Cierre de Caja</h4>\n                <p className=\"text-white/90 leading-relaxed mb-4\">Reportes diarios automatizados con res√∫menes de ventas, m√©todos de pago y rendimiento por empleado.</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  <span className=\"px-3 py-1 bg-yellow-500/20 text-yellow-300 rounded-full text-sm font-medium\">Reportes diarios</span>\n                  <span className=\"px-3 py-1 bg-orange-500/20 text-orange-300 rounded-full text-sm font-medium\">An√°lisis</span>\n                </div>\n              </div>\n              \n              \n              {/* Configuraci√≥n Empresa */}\n              <div className=\"bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 rounded-3xl p-8 border border-white/20 hover:border-indigo-400/50 transition-all duration-300 hover:transform hover:scale-105 group\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300\">\n                  <Building className=\"w-8 h-8 text-white\" />\n                </div>\n                <h4 className=\"text-xl font-bold text-white mb-4\">Configuraci√≥n Empresa</h4>\n                <p className=\"text-white/90 leading-relaxed mb-4\">Personaliza informaci√≥n de tu negocio, horarios, redes sociales y datos que aparecen en las facturas.</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  <span className=\"px-3 py-1 bg-indigo-500/20 text-indigo-300 rounded-full text-sm font-medium\">Personalizaci√≥n</span>\n                  <span className=\"px-3 py-1 bg-purple-500/20 text-purple-300 rounded-full text-sm font-medium\">Branding</span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Call to Action Final */}\n            <div className=\"text-center mt-16\">\n              <div className=\"inline-flex items-center px-6 py-3 bg-gradient-to-r from-green-600/30 to-blue-600/30 border border-green-400/40 rounded-full mb-6\">\n                <CheckCircle className=\"w-5 h-5 text-green-400 mr-3\" />\n                <span className=\"text-sm font-bold text-white\">TODO INCLUIDO SIN COSTO ADICIONAL</span>\n              </div>\n              \n              <Button \n                onClick={onGetStarted}\n                className=\"bg-gradient-to-r from-green-500 via-emerald-600 to-cyan-600 text-white hover:from-green-400 hover:via-emerald-500 hover:to-cyan-500 px-12 py-4 rounded-2xl font-bold text-xl transition-all duration-300 tech-glow hover:scale-105 modern-button\"\n              >\n                <Rocket className=\"mr-3 w-6 h-6\" />\n                Comenzar Gratis Ahora\n              </Button>\n              \n              <p className=\"text-white/90 text-sm mt-4 max-w-md mx-auto\">\n                Sin contratos. Sin pagos ocultos. Todas las funciones desde el primer d√≠a.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Tech Benefits Section */}\n      <section className=\"py-24 tech-gradient-bg relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900\"></div>\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_600px_at_50%_200px,rgba(59,130,246,0.15),transparent)]\"></div>\n        \n        {/* Tech particles */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"tech-particle\" style={{left: '20%', animationDelay: '1s'}}></div>\n          <div className=\"tech-particle\" style={{left: '60%', animationDelay: '4s'}}></div>\n          <div className=\"tech-particle\" style={{left: '80%', animationDelay: '7s'}}></div>\n        </div>\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"text-center mb-20\">\n            <div className=\"inline-flex items-center px-6 py-3 bg-gradient-to-r from-green-600/20 to-emerald-600/20 border border-green-500/30 rounded-full mb-6 tech-glow interactive-badge\">\n              <Target className=\"w-5 h-5 text-green-400 mr-3\" />\n              <span className=\"text-sm font-bold text-white tracking-wide\">RESULTADOS COMPROBADOS</span>\n            </div>\n            <h2 className=\"text-4xl md:text-5xl lg:text-6xl font-black text-white mb-8 leading-tight tech-text-glow\">\n              Transforma tu negocio en\n              <span className=\"block bg-gradient-to-r from-green-400 to-cyan-400 bg-clip-text text-transparent\">30 d√≠as o menos</span>\n            </h2>\n            <p className=\"text-xl text-white/90 max-w-4xl mx-auto font-light\">\n              √önete a m√°s de 500 lavander√≠as que ya est√°n viendo resultados extraordinarios\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-12 max-w-6xl mx-auto mb-20\">\n            {benefits.map((benefit, index) => (\n              <div key={index} className=\"text-center group\">\n                <div className=\"w-20 h-20 mx-auto mb-8 bg-gradient-to-br from-cyan-500 via-blue-600 to-purple-600 rounded-3xl flex items-center justify-center text-white tech-glow group-hover:scale-110 transition-all duration-300 floating-device\">\n                  {benefit.icon}\n                </div>\n                <h3 className=\"text-2xl md:text-3xl font-black text-white mb-6 group-hover:text-cyan-400 transition-colors duration-300 tech-text-glow\">\n                  {benefit.title}\n                </h3>\n                <p className=\"text-white/90 text-lg leading-relaxed font-light\">\n                  {benefit.description}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Tech Features Section */}\n      <section id=\"features\" className=\"py-24 tech-gradient-bg relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900\"></div>\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_800px_at_0%_50%,rgba(147,51,234,0.1),transparent)]\"></div>\n        \n        {/* Tech particles */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"tech-particle\" style={{left: '15%', animationDelay: '2s'}}></div>\n          <div className=\"tech-particle\" style={{left: '45%', animationDelay: '5s'}}></div>\n          <div className=\"tech-particle\" style={{left: '75%', animationDelay: '8s'}}></div>\n        </div>\n        \n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"text-center mb-20\">\n            <div className=\"inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-600/20 to-cyan-600/20 border border-blue-500/30 rounded-full mb-6 tech-glow interactive-badge\">\n              <Briefcase className=\"w-5 h-5 text-blue-400 mr-3\" />\n              <span className=\"text-sm font-bold text-white tracking-wide\">FUNCIONALIDADES AVANZADAS</span>\n            </div>\n            <h2 className=\"text-4xl md:text-5xl lg:text-6xl font-black text-white mb-8 leading-tight tech-text-glow\">\n              La plataforma m√°s completa\n              <span className=\"block bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">para lavander√≠as</span>\n            </h2>\n            <p className=\"text-xl text-white/90 max-w-4xl mx-auto font-light leading-relaxed\">\n              Cada funci√≥n est√° dise√±ada espec√≠ficamente para resolver los desaf√≠os diarios de tu lavander√≠a\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <div key={index} className=\"group bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 p-8 rounded-3xl border border-white/20 hover:border-cyan-400/50 hover:shadow-2xl transition-all duration-300 hover:-translate-y-2 hover:scale-105 relative overflow-hidden\">\n                <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-cyan-500/10 to-purple-500/10 rounded-full -translate-y-16 translate-x-16\"></div>\n                <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-500 via-blue-600 to-purple-600 rounded-2xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300 relative z-10 tech-glow\">\n                  <span className=\"text-white\">{feature.icon}</span>\n                </div>\n                \n                <div className=\"inline-block px-3 py-1 bg-gradient-to-r from-blue-500/20 to-purple-500/20 text-blue-300 rounded-full text-xs font-bold mb-4 border border-blue-400/30\">\n                  {feature.category}\n                </div>\n                \n                <h3 className=\"text-2xl font-bold text-white mb-4 group-hover:text-cyan-400 transition-colors tech-text-glow\">\n                  {feature.title}\n                </h3>\n                <p className=\"text-white/90 leading-relaxed font-light\">\n                  {feature.description}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Tech Pricing Section */}\n      <section id=\"pricing\" className=\"py-24 tech-gradient-bg relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-gray-900 via-purple-900 to-blue-900\"></div>\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_800px_at_50%_-100px,rgba(59,130,246,0.15),transparent)]\"></div>\n        \n        {/* Tech particles */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"tech-particle\" style={{left: '25%', animationDelay: '3s'}}></div>\n          <div className=\"tech-particle\" style={{left: '65%', animationDelay: '6s'}}></div>\n          <div className=\"tech-particle\" style={{left: '85%', animationDelay: '9s'}}></div>\n        </div>\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"text-center mb-20\">\n            <div className=\"inline-flex items-center px-6 py-3 bg-gradient-to-r from-green-600/20 to-emerald-600/20 border border-green-500/30 rounded-full mb-6 tech-glow interactive-badge\">\n              <DollarSign className=\"w-5 h-5 text-green-400 mr-3\" />\n              <span className=\"text-sm font-bold text-white tracking-wide\">PRECIOS TRANSPARENTES</span>\n            </div>\n            <h2 className=\"text-4xl md:text-5xl lg:text-6xl font-black text-white mb-8 leading-tight tech-text-glow\">\n              Invierte en el crecimiento\n              <span className=\"block bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent\">de tu lavander√≠a</span>\n            </h2>\n            <p className=\"text-xl text-white/90 max-w-4xl mx-auto font-light leading-relaxed\">\n              Planes dise√±ados para lavander√≠as de cualquier tama√±o. Comienza gratis y escala conforme creces.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            {plans.map((plan, index) => (\n              <div \n                key={index} \n                className={`relative bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 p-8 rounded-3xl border-2 hover:shadow-2xl transition-all duration-300 hover:-translate-y-2 hover:scale-105 tech-glow ${\n                  plan.popular ? 'border-purple-500/50 scale-105 shadow-xl bg-gradient-to-br from-purple-600/20 to-blue-600/20' : 'border-white/20 hover:border-cyan-400/50'\n                }`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-gradient-to-r from-purple-600 to-blue-600 text-white px-6 py-2 text-sm font-bold rounded-full shadow-lg tech-glow\">\n                      ‚≠ê M√°s Popular\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"text-center mb-8\">\n                  <h3 className=\"text-2xl md:text-3xl font-black text-white mb-6 tech-text-glow\">\n                    {plan.name}\n                  </h3>\n                  <div className=\"mb-6\">\n                    <span className=\"text-5xl md:text-6xl font-black bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent tech-text-glow\">\n                      RD${plan.price}\n                    </span>\n                    <span className=\"text-blue-200/80 text-lg font-bold\">/mes</span>\n                  </div>\n                  <p className=\"text-white/90 text-lg font-light\">\n                    {plan.description}\n                  </p>\n                </div>\n\n                <ul className=\"space-y-4 mb-8\">\n                  {plan.features.map((feature, featureIndex) => (\n                    <li key={featureIndex} className=\"flex items-start\">\n                      <div className=\"w-6 h-6 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center flex-shrink-0 mr-4 mt-0.5 tech-glow\">\n                        <Check className=\"w-4 h-4 text-white\" />\n                      </div>\n                      <span className=\"text-white/90 font-medium\">{feature}</span>\n                    </li>\n                  ))}\n                </ul>\n\n                <Button \n                  onClick={onGetStarted}\n                  className={`w-full py-4 text-lg rounded-xl font-bold transition-all duration-300 tech-glow hover:scale-105 ${\n                    plan.popular \n                      ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white hover:from-purple-500 hover:to-blue-500 shadow-xl hover:shadow-2xl' \n                      : 'bg-gradient-to-r from-gray-700/50 to-gray-600/50 text-white hover:from-gray-600/50 hover:to-gray-500/50 border border-white/20'\n                  }`}\n                  data-testid={`plan-${plan.name.toLowerCase()}-button`}\n                >\n                  {plan.cta}\n                  <ArrowRight className=\"ml-2 w-5 h-5\" />\n                </Button>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-20\">\n            <div className=\"bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 border border-white/20 rounded-3xl p-10 max-w-3xl mx-auto tech-glow hover:shadow-2xl transition-all duration-300 hover:scale-105\">\n              <h3 className=\"text-3xl font-black text-white mb-6 tech-text-glow\">¬øEmpresa con m√∫ltiples sucursales?</h3>\n              <p className=\"text-white/90 text-lg mb-8 font-light leading-relaxed\">\n                Tenemos planes especiales para cadenas de lavander√≠as con descuentos por volumen y funciones empresariales.\n              </p>\n              <Button className=\"bg-gradient-to-r from-cyan-600 to-purple-600 text-white hover:from-cyan-500 hover:to-purple-500 px-8 py-3 rounded-xl font-bold transition-all duration-300 tech-glow hover:scale-105\">\n                Solicitar Cotizaci√≥n Empresarial\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Tech Testimonials Section */}\n      <section id=\"testimonials\" className=\"py-24 tech-gradient-bg relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-gray-900 via-blue-900 to-purple-900\"></div>\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_800px_at_0%_100%,rgba(147,51,234,0.1),transparent)]\"></div>\n        \n        {/* Tech particles */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"tech-particle\" style={{left: '30%', animationDelay: '2s'}}></div>\n          <div className=\"tech-particle\" style={{left: '70%', animationDelay: '5s'}}></div>\n        </div>\n        \n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"text-center mb-20\">\n            <div className=\"inline-flex items-center px-6 py-3 bg-gradient-to-r from-green-600/20 to-emerald-600/20 border border-green-500/30 rounded-full mb-6 tech-glow interactive-badge\">\n              <Star className=\"w-5 h-5 text-green-400 mr-3\" />\n              <span className=\"text-sm font-bold text-white tracking-wide\">TESTIMONIOS REALES</span>\n            </div>\n            <h2 className=\"text-4xl md:text-5xl lg:text-6xl font-black text-white mb-8 leading-tight tech-text-glow\">\n              Historias de √©xito\n              <span className=\"block bg-gradient-to-r from-green-400 to-cyan-400 bg-clip-text text-transparent\">que nos motivan</span>\n            </h2>\n            <p className=\"text-xl text-white/90 max-w-4xl mx-auto font-light leading-relaxed\">\n              M√°s de 500 lavander√≠as han transformado su negocio con BillTracky. Aqu√≠ tienes algunas de sus historias.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n            {testimonials.map((testimonial, index) => (\n              <div key={index} className=\"bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 p-8 rounded-3xl border border-white/20 hover:border-cyan-400/50 hover:shadow-2xl transition-all duration-300 hover:-translate-y-2 hover:scale-105 relative overflow-hidden tech-glow\">\n                <div className=\"absolute top-0 right-0 w-24 h-24 bg-gradient-to-br from-cyan-500/10 to-purple-500/10 rounded-full -translate-y-12 translate-x-12\"></div>\n                \n                {/* Rating Stars */}\n                <div className=\"flex items-center mb-6 relative z-10\">\n                  {[...Array(testimonial.rating)].map((_, i) => (\n                    <Star key={i} className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                  ))}\n                </div>\n                \n                {/* Quote */}\n                <blockquote className=\"text-lg text-white/90 mb-8 italic leading-relaxed font-light relative z-10\">\n                  \"{testimonial.text}\"\n                </blockquote>\n                \n                {/* Profile */}\n                <div className=\"flex items-center relative z-10\">\n                  <div className=\"w-14 h-14 bg-gradient-to-br from-cyan-500 via-blue-600 to-purple-600 rounded-full flex items-center justify-center text-white font-bold text-xl mr-4 tech-glow\">\n                    {testimonial.name.charAt(0)}\n                  </div>\n                  <div>\n                    <p className=\"font-black text-white text-lg tech-text-glow\">\n                      {testimonial.name}\n                    </p>\n                    <p className=\"text-white/90 font-medium\">\n                      Propietario, {testimonial.business}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Modern Social Proof */}\n          <div className=\"mt-24 text-center\">\n            <div className=\"bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 border border-white/20 rounded-3xl p-12 max-w-5xl mx-auto tech-glow hover:scale-105 transition-all duration-300\">\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n                <div className=\"text-center\">\n                  <div className=\"text-4xl font-black bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent mb-3 tech-text-glow\">500+</div>\n                  <div className=\"text-blue-200/80 font-bold\">Lavander√≠as activas</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl font-black bg-gradient-to-r from-green-400 to-emerald-400 bg-clip-text text-transparent mb-3 tech-text-glow\">IA</div>\n                  <div className=\"text-blue-200/80 font-bold\">Asistente AI 24/7</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl font-black bg-gradient-to-r from-orange-400 to-red-400 bg-clip-text text-transparent mb-3 tech-text-glow\">99.9%</div>\n                  <div className=\"text-blue-200/80 font-bold\">Tiempo activo</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-4xl font-black bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent mb-3 tech-text-glow\">0s</div>\n                  <div className=\"text-blue-200/80 font-bold\">Tiempo de respuesta</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 tech-gradient-bg relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-gray-900 via-purple-900 to-blue-900\"></div>\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_800px_at_50%_-100px,rgba(59,130,246,0.15),transparent)]\"></div>\n        \n        {/* Tech particles */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"tech-particle\" style={{left: '20%', animationDelay: '0s'}}></div>\n          <div className=\"tech-particle\" style={{left: '80%', animationDelay: '4s'}}></div>\n        </div>\n        \n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"bg-gradient-to-br from-white/10 to-white/5 backdrop-blur-20 rounded-3xl p-12 md:p-16 text-center relative overflow-hidden border border-white/20 tech-glow\">\n            {/* Tech decorations */}\n            <div className=\"absolute top-0 left-0 w-40 h-40 bg-gradient-to-br from-cyan-500/10 to-purple-500/10 rounded-full -translate-x-20 -translate-y-20\"></div>\n            <div className=\"absolute bottom-0 right-0 w-40 h-40 bg-gradient-to-br from-purple-500/10 to-blue-500/10 rounded-full translate-x-20 translate-y-20\"></div>\n            \n            <div className=\"relative z-10\">\n              <div className=\"inline-flex items-center px-6 py-3 bg-gradient-to-r from-cyan-600/20 to-purple-600/20 border border-cyan-500/30 rounded-full mb-6 tech-glow interactive-badge\">\n                <Rocket className=\"w-5 h-5 text-cyan-400 mr-3\" />\n                <span className=\"text-sm font-bold text-white tracking-wide\">¬°√önete a la Revoluci√≥n Digital!</span>\n              </div>\n              \n              <h2 className=\"text-4xl md:text-6xl font-black mb-6 tech-text-glow\">\n                <span className=\"text-white\">¬øListo para </span>\n                <span className=\"block bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent\">transformar tu lavander√≠a?</span>\n              </h2>\n              \n              <p className=\"text-xl md:text-2xl text-white/90 mb-12 max-w-3xl mx-auto leading-relaxed\">\n                √önete a m√°s de 500 lavander√≠as que ya est√°n aumentando sus ingresos, \n                ahorrando tiempo y brindando un mejor servicio con BillTracky.\n              </p>\n              \n              <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n                <Button \n                  onClick={onGetStarted}\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-cyan-600 to-purple-600 text-white hover:from-cyan-500 hover:to-purple-500 text-xl px-10 py-6 rounded-2xl tech-glow shadow-2xl hover:shadow-cyan-500/25 transform hover:scale-105 transition-all duration-300 font-bold border-t border-white/20\"\n                  data-testid=\"cta-signup-button\"\n                >\n                  <Sparkles className=\"mr-3 w-6 h-6\" />\n                  Empezar Gratis Ahora\n                  <ArrowRight className=\"ml-3 w-6 h-6\" />\n                </Button>\n                \n                <Button \n                  variant=\"outline\"\n                  size=\"lg\"\n                  onClick={onLogin}\n                  className=\"border-cyan-400/50 text-cyan-400 hover:bg-cyan-500/20 hover:border-cyan-400 text-xl px-10 py-6 rounded-2xl backdrop-blur-xl tech-glow hover:shadow-cyan-500/25 hover:scale-105 transition-all duration-300 font-bold bg-black/20\"\n                  data-testid=\"cta-demo-button\"\n                >\n                  <Play className=\"mr-3 w-6 h-6 text-cyan-400\" />\n                  Ver Demo\n                </Button>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row items-center justify-center gap-6 text-white/80 mt-8\">\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"w-5 h-5\" />\n                  <span>30 d√≠as gratis</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"w-5 h-5\" />\n                  <span>Sin tarjeta de cr√©dito</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"w-5 h-5\" />\n                  <span>Cancela cuando quieras</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-primary text-white py-16\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Main Footer Content */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-12\">\n            {/* Brand Column */}\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"h-16 w-16 bg-white/10 backdrop-blur-sm rounded-full flex items-center justify-center hover:scale-105 hover:bg-white/20 transition-all duration-200 cursor-pointer border border-white/20 overflow-hidden\">\n                  <img \n                    src={logoPath} \n                    alt=\"BT Logo\" \n                    className=\"h-14 w-14 object-cover rounded-full\"\n                  />\n                </div>\n                <div>\n                  <h3 className=\"text-2xl font-bold text-white\">Billtracky</h3>\n                  <p className=\"text-secondary/80\">Sistema de Gesti√≥n para Lavander√≠as</p>\n                </div>\n              </div>\n              <p className=\"text-white/80 leading-relaxed mb-6 max-w-md\">\n                La plataforma completa que necesitas para automatizar tu lavander√≠a, \n                aumentar ingresos y brindar una experiencia excepcional a tus clientes.\n              </p>\n              <div className=\"flex space-x-4\">\n                <Badge className=\"bg-secondary/20 text-secondary border-secondary/30\">\n                  üá©üá¥ Hecho en Rep√∫blica Dominicana\n                </Badge>\n              </div>\n            </div>\n            \n            {/* Product Links */}\n            <div>\n              <h4 className=\"font-semibold text-white mb-6 text-lg\">Producto</h4>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#features\" className=\"text-white/70 hover:text-white transition-colors\">Caracter√≠sticas</a></li>\n                <li><a href=\"#pricing\" className=\"text-white/70 hover:text-white transition-colors\">Precios</a></li>\n                <li><a href=\"#testimonials\" className=\"text-white/70 hover:text-white transition-colors\">Testimonios</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Actualizaciones</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Roadmap</a></li>\n              </ul>\n            </div>\n            \n            {/* Support Links */}\n            <div>\n              <h4 className=\"font-semibold text-white mb-6 text-lg\">Soporte</h4>\n              <ul className=\"space-y-3\">\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Centro de ayuda</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Contacto</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">WhatsApp: (809) 555-0123</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Estado del servicio</a></li>\n                <li><a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Documentaci√≥n</a></li>\n              </ul>\n            </div>\n          </div>\n\n          {/* Bottom Footer */}\n          <div className=\"border-t border-white/20 pt-8\">\n            <div className=\"flex flex-col md:flex-row justify-between items-center\">\n              <div className=\"flex flex-col md:flex-row items-center space-y-2 md:space-y-0 md:space-x-6\">\n                <p className=\"text-white/70 text-sm\">\n                  ¬© 2025 Billtracky. Todos los derechos reservados.\n                </p>\n                <div className=\"flex space-x-4 text-sm\">\n                  <a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Privacidad</a>\n                  <span className=\"text-white/40\">‚Ä¢</span>\n                  <a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">T√©rminos</a>\n                  <span className=\"text-white/40\">‚Ä¢</span>\n                  <a href=\"#\" className=\"text-white/70 hover:text-white transition-colors\">Cookies</a>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 md:mt-0\">\n                <p className=\"text-white/70 text-sm\">\n                  Dise√±ado con ‚ù§Ô∏è para lavander√≠as dominicanas\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":56922},"client/src/components/login-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Eye, EyeOff, Mail, Lock, User, Building } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Email inv√°lido\"),\n  password: z.string().min(1, \"La contrase√±a es requerida\"),\n});\n\nconst employeeLoginSchema = z.object({\n  accessCode: z.string().min(4, \"El c√≥digo debe tener al menos 4 d√≠gitos\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype EmployeeLoginForm = z.infer<typeof employeeLoginSchema>;\n\ninterface LoginModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onRegisterClick: () => void;\n  onUserLogin: (user: any) => void;\n  onEmployeeLogin: (employee: any) => void;\n}\n\nexport default function LoginModal({ isOpen, onClose, onRegisterClick, onUserLogin, onEmployeeLogin }: LoginModalProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [loginType, setLoginType] = useState<\"user\" | \"employee\">(\"user\");\n\n  const userForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const employeeForm = useForm<EmployeeLoginForm>({\n    resolver: zodResolver(employeeLoginSchema),\n    defaultValues: {\n      accessCode: \"\",\n    },\n  });\n\n  const onUserSubmit = async (data: LoginForm) => {\n    setIsLoading(true);\n    try {\n      // Aqu√≠ implementaremos la llamada a la API de login de usuarios\n      console.log(\"Login de usuario:\", data);\n      \n      // Simular delay de API\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      // Mock user response\n      const mockUser = {\n        id: \"user-1\",\n        email: data.email,\n        firstName: \"Usuario\",\n        lastName: \"Demo\",\n        organizationId: \"org-1\",\n        role: \"owner\"\n      };\n      \n      onUserLogin(mockUser);\n    } catch (error) {\n      console.error(\"Error en login:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onEmployeeSubmit = async (data: EmployeeLoginForm) => {\n    setIsLoading(true);\n    try {\n      // Llamada a la API de empleados existente\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ accessCode: data.accessCode }),\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        onEmployeeLogin(result.employee);\n      } else {\n        const error = await response.json();\n        employeeForm.setError(\"accessCode\", { message: error.message });\n      }\n    } catch (error) {\n      console.error(\"Error en login de empleado:\", error);\n      employeeForm.setError(\"accessCode\", { message: \"Error de conexi√≥n\" });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-center\">\n            Iniciar Sesi√≥n\n          </DialogTitle>\n          <p className=\"text-center text-muted-foreground\">\n            Accede a tu cuenta de Billtracky\n          </p>\n        </DialogHeader>\n\n        {/* Selector de tipo de login */}\n        <div className=\"grid grid-cols-2 gap-2 p-1 bg-muted rounded-lg\">\n          <Button\n            type=\"button\"\n            variant={loginType === \"user\" ? \"default\" : \"ghost\"}\n            onClick={() => setLoginType(\"user\")}\n            className=\"flex items-center gap-2 h-11\"\n            data-testid=\"button-user-login-type\"\n          >\n            <User className=\"w-4 h-4\" />\n            Propietario\n          </Button>\n          <Button\n            type=\"button\"\n            variant={loginType === \"employee\" ? \"default\" : \"ghost\"}\n            onClick={() => setLoginType(\"employee\")}\n            className=\"flex items-center gap-2 h-11\"\n            data-testid=\"button-employee-login-type\"\n          >\n            <Building className=\"w-4 h-4\" />\n            Empleado\n          </Button>\n        </div>\n\n        {loginType === \"user\" ? (\n          // Formulario de login para usuarios (propietarios)\n          <form onSubmit={userForm.handleSubmit(onUserSubmit)} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...userForm.register(\"email\")}\n                  placeholder=\"tu@email.com\"\n                  className=\"pl-10\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n              {userForm.formState.errors.email && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {userForm.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\">Contrase√±a</Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  {...userForm.register(\"password\")}\n                  placeholder=\"Tu contrase√±a\"\n                  className=\"pl-10 pr-10\"\n                  data-testid=\"input-password\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground p-1 hover:bg-muted rounded min-h-8 min-w-8 flex items-center justify-center\"\n                >\n                  {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                </button>\n              </div>\n              {userForm.formState.errors.password && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {userForm.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"flex justify-end\">\n              <a href=\"#\" className=\"text-sm text-secondary hover:underline\">\n                ¬øOlvidaste tu contrase√±a?\n              </a>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n              data-testid=\"button-user-login\"\n            >\n              {isLoading ? \"Iniciando sesi√≥n...\" : \"Iniciar Sesi√≥n\"}\n            </Button>\n\n            <Separator />\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                ¬øNo tienes cuenta?{\" \"}\n                <button\n                  type=\"button\"\n                  onClick={onRegisterClick}\n                  className=\"text-secondary hover:underline font-medium\"\n                  data-testid=\"link-register\"\n                >\n                  Crear cuenta gratis\n                </button>\n              </p>\n            </div>\n          </form>\n        ) : (\n          // Formulario de login para empleados (c√≥digo de acceso)\n          <form onSubmit={employeeForm.handleSubmit(onEmployeeSubmit)} className=\"space-y-4\">\n            <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\n              <Building className=\"w-8 h-8 mx-auto mb-2 text-muted-foreground\" />\n              <p className=\"text-sm text-muted-foreground\">\n                Ingresa el c√≥digo de acceso proporcionado por tu supervisor\n              </p>\n            </div>\n\n            <div>\n              <Label htmlFor=\"accessCode\">C√≥digo de Acceso</Label>\n              <Input\n                id=\"accessCode\"\n                type=\"password\"\n                {...employeeForm.register(\"accessCode\")}\n                placeholder=\"Ingresa tu c√≥digo\"\n                className=\"text-center text-lg font-mono\"\n                data-testid=\"input-access-code\"\n              />\n              {employeeForm.formState.errors.accessCode && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {employeeForm.formState.errors.accessCode.message}\n                </p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n              data-testid=\"button-employee-login\"\n            >\n              {isLoading ? \"Verificando...\" : \"Acceder\"}\n            </Button>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                C√≥digos de prueba: E001 (Gerente), E002 (Empleado), E003 (Supervisor)\n              </p>\n            </div>\n          </form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9524},"client/src/components/login-screen.tsx":{"content":"import { useState } from \"react\";\nimport { FileText } from \"lucide-react\";\nimport { type Employee } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport NumericKeypad from \"./numeric-keypad\";\n\ninterface LoginScreenProps {\n  onLogin: (user: Employee, accessCode?: string) => void;\n  onNotification: (message: string) => void;\n}\n\nexport default function LoginScreen({ onLogin, onNotification }: LoginScreenProps) {\n  const [accessCode, setAccessCode] = useState(\"\");\n  const [showKeypad, setShowKeypad] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLogin = async () => {\n    if (!accessCode) {\n      onNotification(\"Por favor ingrese su c√≥digo de acceso.\");\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", { accessCode });\n      const data = await response.json();\n      \n      onLogin(data.employee, accessCode);\n      onNotification(`¬°Bienvenido, ${data.employee.name}!`);\n      setAccessCode(\"\");\n    } catch (error) {\n      onNotification(\"C√≥digo de acceso incorrecto.\");\n      setAccessCode(\"\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      handleLogin();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen gradient-bg flex items-center justify-center p-4\">\n      <div className=\"bg-card rounded-2xl shadow-2xl max-w-md w-full p-8 fade-in\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-20 h-20 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg\">\n            <FileText className=\"w-10 h-10 text-primary-foreground\" />\n          </div>\n          <h1 className=\"text-3xl font-bold text-card-foreground\">Billtracky</h1>\n          <p className=\"text-muted-foreground mt-2 font-medium\">CleanWash Lavander√≠a</p>\n          <p className=\"text-sm text-muted-foreground\">Sistema de Gesti√≥n Completo</p>\n        </div>\n\n        <div className=\"space-y-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-card-foreground mb-2\">\n              C√≥digo de Acceso\n            </label>\n            <div className=\"relative\">\n              <input\n                type=\"password\"\n                value={accessCode}\n                onChange={(e) => setAccessCode(e.target.value)}\n                onKeyPress={handleKeyPress}\n                className=\"w-full px-4 py-3 border border-border rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent pr-12 transition-all\"\n                placeholder=\"Ingresa tu c√≥digo\"\n                maxLength={6}\n                data-testid=\"input-access-code\"\n              />\n              <button\n                onClick={() => setShowKeypad(true)}\n                className=\"absolute right-3 top-1/2 transform -translate-y-1/2 p-2 text-muted-foreground hover:text-secondary transition-colors\"\n                title=\"Teclado num√©rico\"\n                data-testid=\"button-show-keypad\"\n              >\n                <div className=\"w-5 h-5 grid grid-cols-3 gap-0.5\">\n                  {[...Array(9)].map((_, i) => (\n                    <div key={i} className=\"w-1 h-1 bg-current rounded-full\"></div>\n                  ))}\n                </div>\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-3\">\n            <button\n              onClick={() => setShowKeypad(true)}\n              className=\"flex-1 bg-muted text-muted-foreground py-3 rounded-lg hover:bg-accent font-medium flex items-center justify-center space-x-2 transition-colors\"\n              data-testid=\"button-keypad\"\n            >\n              <div className=\"w-4 h-4 grid grid-cols-3 gap-0.5\">\n                {[...Array(9)].map((_, i) => (\n                  <div key={i} className=\"w-1 h-1 bg-current rounded-full\"></div>\n                ))}\n              </div>\n              <span>Teclado</span>\n            </button>\n            <button\n              onClick={handleLogin}\n              disabled={isLoading}\n              className=\"flex-1 bg-secondary text-secondary-foreground py-3 rounded-lg hover:bg-secondary/90 font-medium transition-colors disabled:opacity-50\"\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Iniciando...\" : \"Iniciar Sesi√≥n\"}\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"mt-8 text-center text-xs text-muted-foreground bg-muted rounded-lg p-4\">\n          <p className=\"font-medium mb-1\">C√≥digos de prueba:</p>\n          <p>1234 (Gerente) | 5678 (Empleado) | 9999 (Supervisor)</p>\n        </div>\n      </div>\n\n      <NumericKeypad\n        isOpen={showKeypad}\n        onClose={() => setShowKeypad(false)}\n        onCodeChange={setAccessCode}\n        onSubmit={handleLogin}\n        currentCode={accessCode}\n      />\n    </div>\n  );\n}\n","size_bytes":4920},"client/src/components/notification-modal.tsx":{"content":"import { Check } from \"lucide-react\";\n\ninterface NotificationModalProps {\n  message: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function NotificationModal({ message, isOpen, onClose }: NotificationModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-card rounded-2xl max-w-md w-full p-6 dark:shadow-2xl fade-in\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-secondary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Check className=\"w-8 h-8 text-secondary\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">Billtracky</h3>\n          <p className=\"text-muted-foreground mb-6\" data-testid=\"notification-message\">\n            {message}\n          </p>\n          <button\n            onClick={onClose}\n            className=\"w-full bg-secondary text-secondary-foreground py-3 rounded-lg hover:bg-secondary/90 font-medium transition-colors\"\n            data-testid=\"button-close-notification\"\n          >\n            Aceptar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1241},"client/src/components/numeric-keypad.tsx":{"content":"import { Trash2 } from \"lucide-react\";\n\ninterface NumericKeypadProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onCodeChange: (code: string) => void;\n  onSubmit: () => void;\n  currentCode: string;\n}\n\nexport default function NumericKeypad({ \n  isOpen, \n  onClose, \n  onCodeChange, \n  onSubmit, \n  currentCode \n}: NumericKeypadProps) {\n  if (!isOpen) return null;\n\n  const addNumber = (num: string) => {\n    if (currentCode.length < 6) {\n      onCodeChange(currentCode + num);\n    }\n  };\n\n  const deleteNumber = () => {\n    onCodeChange(currentCode.slice(0, -1));\n  };\n\n  const clearCode = () => {\n    onCodeChange(\"\");\n  };\n\n  const handleSubmit = () => {\n    onClose();\n    onSubmit();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-card rounded-2xl max-w-sm w-full p-6 dark:shadow-2xl fade-in\">\n        <div className=\"text-center mb-6\">\n          <h3 className=\"text-xl font-bold text-card-foreground\">Teclado Num√©rico</h3>\n          <div className=\"mt-4 p-4 bg-muted rounded-lg\">\n            <span className=\"text-2xl font-mono tracking-widest text-card-foreground\">\n              {currentCode.replace(/./g, '‚Ä¢').padEnd(6, '_')}\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-3 gap-3 mb-6\">\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9].map((num) => (\n            <button\n              key={num}\n              onClick={() => addNumber(num.toString())}\n              className=\"h-14 bg-muted hover:bg-accent rounded-lg text-xl font-semibold transition-colors\"\n              data-testid={`keypad-${num}`}\n            >\n              {num}\n            </button>\n          ))}\n          <button\n            onClick={() => addNumber('0')}\n            className=\"h-14 bg-muted hover:bg-accent rounded-lg text-xl font-semibold transition-colors\"\n            data-testid=\"keypad-0\"\n          >\n            0\n          </button>\n          <button\n            onClick={deleteNumber}\n            className=\"h-14 bg-destructive/10 hover:bg-destructive/20 text-destructive rounded-lg font-semibold transition-colors flex items-center justify-center\"\n            data-testid=\"keypad-delete\"\n          >\n            <Trash2 className=\"w-5 h-5\" />\n          </button>\n          <button\n            onClick={clearCode}\n            className=\"h-14 bg-yellow-100 hover:bg-yellow-200 text-yellow-700 rounded-lg font-semibold transition-colors text-sm\"\n            data-testid=\"keypad-clear\"\n          >\n            Limpiar\n          </button>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-3\">\n          <button\n            onClick={onClose}\n            className=\"py-3 bg-muted text-muted-foreground rounded-lg hover:bg-accent font-medium transition-colors\"\n            data-testid=\"keypad-cancel\"\n          >\n            Cancelar\n          </button>\n          <button\n            onClick={handleSubmit}\n            className=\"py-3 bg-secondary text-secondary-foreground rounded-lg hover:bg-secondary/90 font-medium transition-colors\"\n            data-testid=\"keypad-submit\"\n          >\n            Ingresar\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3228},"client/src/components/orders-table.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Eye, Edit3, Printer } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type Invoice } from \"@shared/schema\";\n\ninterface OrdersTableProps {\n  onNotification: (message: string) => void;\n}\n\nexport default function OrdersTable({ onNotification }: OrdersTableProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n\n  const { data: orders = [], isLoading } = useQuery<Invoice[]>({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/invoices/${id}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/metrics/dashboard\"] });\n      onNotification(\"Estado actualizado correctamente\");\n    },\n    onError: () => {\n      onNotification(\"Error al actualizar el estado\");\n    },\n  });\n\n  const filteredOrders = orders.filter(order => {\n    const matchesSearch = \n      order.number.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.customerName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.customerPhone.includes(searchTerm);\n    \n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'received': return 'bg-blue-100 dark:bg-blue-900/20 text-blue-800 dark:text-blue-200 border border-blue-200 dark:border-blue-800';\n      case 'in_process': return 'bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-200 border border-yellow-200 dark:border-yellow-800';\n      case 'ready': return 'bg-purple-100 dark:bg-purple-900/20 text-purple-800 dark:text-purple-200 border border-purple-200 dark:border-purple-800';\n      case 'delivered': return 'bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-200 border border-green-200 dark:border-green-800';\n      default: return 'bg-gray-100 dark:bg-gray-900/20 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-800';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'received': return 'Recibido';\n      case 'in_process': return 'En Proceso';\n      case 'ready': return 'Listo';\n      case 'delivered': return 'Entregado';\n      default: return status;\n    }\n  };\n\n  const handleStatusChange = (orderId: string, newStatus: string) => {\n    updateStatusMutation.mutate({ id: orderId, status: newStatus });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card dark:bg-gray-800/50 rounded-xl shadow-sm dark:shadow-lg tech-glow border border-border dark:border-cyan-500/20 p-6 backdrop-blur-sm\">\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">Cargando √≥rdenes...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card dark:bg-gray-800/50 rounded-xl shadow-sm dark:shadow-lg tech-glow border border-border dark:border-cyan-500/20 p-6 backdrop-blur-sm\">\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-card-foreground mb-4 md:mb-0\">\n          Gesti√≥n de √ìrdenes\n        </h2>\n        <div className=\"flex flex-col sm:flex-row gap-3\">\n          <div className=\"relative\">\n            <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              placeholder=\"Buscar por cliente o n√∫mero...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 pr-4 py-2 border border-border rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent w-full sm:w-64\"\n              data-testid=\"input-search-orders\"\n            />\n          </div>\n          <select \n            value={statusFilter}\n            onChange={(e) => setStatusFilter(e.target.value)}\n            className=\"px-4 py-2 border border-border rounded-lg focus:ring-2 focus:ring-ring focus:border-transparent\"\n            data-testid=\"select-status-filter\"\n          >\n            <option value=\"all\">Todos los estados</option>\n            <option value=\"received\">Recibido</option>\n            <option value=\"in_process\">En Proceso</option>\n            <option value=\"ready\">Listo</option>\n            <option value=\"delivered\">Entregado</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Orders Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full min-w-[800px]\">\n          <thead>\n            <tr className=\"border-b border-border\">\n              <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">N√∫mero</th>\n              <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Cliente</th>\n              <th className=\"text-left py-3 px-4 font-medium text-muted-foreground hidden sm:table-cell\">Tel√©fono</th>\n              <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Total</th>\n              <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Estado</th>\n              <th className=\"text-left py-3 px-4 font-medium text-muted-foreground hidden md:table-cell\">Fecha</th>\n              <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Acciones</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-border\">\n            {filteredOrders.map((order) => (\n              <tr key={order.id} className=\"hover:bg-muted/50 transition-colors\" data-testid={`order-row-${order.id}`}>\n                <td className=\"py-4 px-4\">\n                  <span className=\"font-medium text-card-foreground\">{order.number}</span>\n                </td>\n                <td className=\"py-4 px-4\">\n                  <span className=\"text-card-foreground\">{order.customerName}</span>\n                </td>\n                <td className=\"py-4 px-4 hidden sm:table-cell\">\n                  <span className=\"text-muted-foreground\">{order.customerPhone}</span>\n                </td>\n                <td className=\"py-4 px-4\">\n                  <span className=\"font-medium text-card-foreground\">\n                    RD${parseFloat(order.total).toFixed(2)}\n                  </span>\n                </td>\n                <td className=\"py-4 px-4\">\n                  <select\n                    value={order.status || 'received'}\n                    onChange={(e) => handleStatusChange(order.id, e.target.value)}\n                    className={`inline-block px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(order.status || 'received')}`}\n                    data-testid={`select-status-${order.id}`}\n                  >\n                    <option value=\"received\">Recibido</option>\n                    <option value=\"in_process\">En Proceso</option>\n                    <option value=\"ready\">Listo</option>\n                    <option value=\"delivered\">Entregado</option>\n                  </select>\n                </td>\n                <td className=\"py-4 px-4 hidden md:table-cell\">\n                  <span className=\"text-muted-foreground\">\n                    {new Date(order.date || 0).toLocaleDateString('es-ES')}\n                  </span>\n                </td>\n                <td className=\"py-4 px-4\">\n                  <div className=\"flex items-center space-x-1 sm:space-x-2\">\n                    <button \n                      onClick={() => onNotification(`Viendo detalles de ${order.number}`)}\n                      className=\"tech-button-3d p-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800 border border-blue-400 rounded-lg shadow-md hover:shadow-lg hover:scale-105 transition-all duration-200 min-h-11 min-w-11 flex items-center justify-center\"\n                      title=\"Ver detalles\"\n                      data-testid={`button-view-${order.id}`}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </button>\n                    <button \n                      onClick={() => onNotification(`Editando orden ${order.number}`)}\n                      className=\"tech-button-3d p-3 bg-gradient-to-r from-orange-600 to-orange-700 text-white hover:from-orange-700 hover:to-orange-800 border border-orange-400 rounded-lg shadow-md hover:shadow-lg hover:scale-105 transition-all duration-200 min-h-11 min-w-11 flex items-center justify-center\"\n                      title=\"Editar\"\n                      data-testid={`button-edit-${order.id}`}\n                    >\n                      <Edit3 className=\"w-4 h-4\" />\n                    </button>\n                    <button \n                      onClick={() => onNotification(`Imprimiendo ${order.number}`)}\n                      className=\"tech-button-3d p-3 bg-gradient-to-r from-green-600 to-green-700 text-white hover:from-green-700 hover:to-green-800 border border-green-400 rounded-lg shadow-md hover:shadow-lg hover:scale-105 transition-all duration-200 min-h-11 min-w-11 flex items-center justify-center\"\n                      title=\"Imprimir\"\n                      data-testid={`button-print-${order.id}`}\n                    >\n                      <Printer className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {filteredOrders.length === 0 && (\n        <div className=\"text-center py-8 text-muted-foreground dark:text-gray-400\">\n          <p>No se encontraron √≥rdenes que coincidan con los filtros.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10062},"client/src/components/payment-methods-config.tsx":{"content":"import { useState } from \"react\";\nimport { Save, Plus, Edit2, Trash2, CreditCard, ToggleLeft, ToggleRight, DollarSign, Search, Filter, Sparkles, TrendingUp, Wallet, Smartphone, Building, Coins, Zap, Globe, Package, X } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type PaymentMethod, insertPaymentMethodSchema } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface PaymentMethodsConfigProps {\n  onNotification: (message: string) => void;\n}\n\nexport default function PaymentMethodsConfig({ onNotification }: PaymentMethodsConfigProps) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingMethod, setEditingMethod] = useState<PaymentMethod | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterActive, setFilterActive] = useState(\"all\");\n  const [showFilters, setShowFilters] = useState(false);\n\n  const { data: paymentMethods = [], isLoading } = useQuery<PaymentMethod[]>({\n    queryKey: [\"/api/payment-methods\"],\n  });\n\n  const form = useForm({\n    defaultValues: {\n      name: \"\",\n      icon: \"card\",\n      active: true,\n      requiresReference: false,\n      commission: \"0\",\n      description: \"\",\n      showOnInvoice: true,\n      color: \"#3B82F6\",\n    },\n  });\n\n  const createMethodMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (editingMethod) {\n        const response = await apiRequest(\"PUT\", `/api/payment-methods/${editingMethod.id}`, data);\n        return response.json();\n      } else {\n        const response = await apiRequest(\"POST\", \"/api/payment-methods\", data);\n        return response.json();\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payment-methods\"] });\n      onNotification(editingMethod ? \"M√©todo de pago actualizado exitosamente\" : \"M√©todo de pago creado exitosamente\");\n      setIsDialogOpen(false);\n      setEditingMethod(null);\n      form.reset();\n    },\n    onError: () => {\n      onNotification(\"Error al guardar el m√©todo de pago\");\n    },\n  });\n\n  const toggleMethodMutation = useMutation({\n    mutationFn: async ({ id, active }: { id: string; active: boolean }) => {\n      const response = await apiRequest(\"PUT\", `/api/payment-methods/${id}`, { active });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payment-methods\"] });\n      onNotification(\"Estado del m√©todo de pago actualizado\");\n    },\n  });\n\n  const deleteMethodMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/payment-methods/${id}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/payment-methods\"] });\n      onNotification(\"M√©todo de pago eliminado exitosamente\");\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    console.log(\"Form submitted with data:\", data);\n    console.log(\"Form errors:\", form.formState.errors);\n    \n    // Validate required field\n    if (!data.name || data.name.trim() === '') {\n      console.error(\"Name is required\");\n      onNotification(\"El nombre del m√©todo de pago es requerido\");\n      return;\n    }\n    \n    // Generate code from name (lowercase, no spaces, alphanumeric only)\n    const code = data.name.toLowerCase().replace(/[^a-z0-9]/g, '_').replace(/_{2,}/g, '_').replace(/^_|_$/g, '');\n    const submitData = { ...data, code };\n    console.log(\"Submitting data:\", submitData);\n    createMethodMutation.mutate(submitData);\n  };\n\n  const handleEdit = (method: PaymentMethod) => {\n    setEditingMethod(method);\n    form.setValue(\"name\", method.name);\n    form.setValue(\"icon\", method.icon || \"card\");\n    form.setValue(\"active\", method.active ?? true);\n    form.setValue(\"requiresReference\", method.requiresReference ?? false);\n    form.setValue(\"commission\", method.commission || \"0\");\n    form.setValue(\"description\", method.description || \"\");\n    form.setValue(\"showOnInvoice\", method.showOnInvoice ?? true);\n    form.setValue(\"color\", method.color || \"#3B82F6\");\n    setIsDialogOpen(true);\n  };\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    setEditingMethod(null);\n    form.reset();\n  };\n\n  const handleToggleActive = (id: string, currentActive: boolean) => {\n    // Cambiar autom√°ticamente a vista \"todos\" para que el usuario vea el cambio\n    if (filterActive !== \"all\") {\n      setFilterActive(\"all\");\n    }\n    toggleMethodMutation.mutate({ id, active: !currentActive });\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"¬øEst√° seguro de eliminar este m√©todo de pago?\")) {\n      deleteMethodMutation.mutate(id);\n    }\n  };\n\n  const filteredMethods = paymentMethods.filter(method => {\n    const matchesSearch = method.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (method.description ?? \"\").toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesFilter = filterActive === \"all\" || \n                         (filterActive === \"active\" && method.active) ||\n                         (filterActive === \"inactive\" && !method.active);\n    return matchesSearch && matchesFilter;\n  });\n\n  const stats = {\n    total: paymentMethods.length,\n    active: paymentMethods.filter(m => m.active).length,\n    inactive: paymentMethods.filter(m => !m.active).length,\n    withCommission: paymentMethods.filter(m => parseFloat(m.commission ?? \"0\") > 0).length\n  };\n\n  const iconOptions = [\n    { id: \"card\", icon: CreditCard, label: \"Tarjeta\" },\n    { id: \"cash\", icon: Coins, label: \"Efectivo\" },\n    { id: \"bank\", icon: Building, label: \"Banco\" },\n    { id: \"mobile\", icon: Smartphone, label: \"M√≥vil\" },\n    { id: \"wallet\", icon: Wallet, label: \"Billetera\" },\n    { id: \"zap\", icon: Zap, label: \"R√°pido\" },\n    { id: \"globe\", icon: Globe, label: \"Online\" },\n    { id: \"package\", icon: Package, label: \"Paquete\" },\n    { id: \"sparkles\", icon: Sparkles, label: \"Premium\" },\n    { id: \"trending\", icon: TrendingUp, label: \"Trending\" }\n  ];\n  \n  const getIconComponent = (iconId: string) => {\n    const option = iconOptions.find(opt => opt.id === iconId);\n    return option ? option.icon : CreditCard;\n  };\n\n  const colorOptions = [\n    \"#10B981\", \"#3B82F6\", \"#8B5CF6\", \"#F59E0B\", \n    \"#EF4444\", \"#6B7280\", \"#EC4899\", \"#14B8A6\"\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-cyan-300 dark:border-cyan-500/30 rounded-xl shadow-sm dark:backdrop-blur-sm\">\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center space-y-3\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-xl flex items-center justify-center mx-auto tech-glow animate-pulse\">\n                <CreditCard className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">Cargando m√©todos de pago...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header con estad√≠sticas y bot√≥n crear */}\n      <Card className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-cyan-300 dark:border-cyan-500/30 rounded-xl shadow-sm dark:backdrop-blur-sm\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-14 h-14 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-2xl flex items-center justify-center tech-glow\">\n                <CreditCard className=\"w-8 h-8 text-white\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-3xl font-bold text-gray-800 dark:text-white\">Gesti√≥n de M√©todos de Pago</CardTitle>\n                <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Configura m√©todos de pago personalizados</p>\n              </div>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button \n                  onClick={() => {\n                    setEditingMethod(null);\n                    setIsDialogOpen(true);\n                  }}\n                  className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 text-green-700 dark:bg-gradient-to-br dark:from-green-500/20 dark:to-emerald-600/20 dark:text-green-300 dark:border-green-500/30 hover:from-green-100 hover:to-emerald-100 hover:border-green-400 dark:hover:from-green-400/30 dark:hover:to-emerald-500/30 transition-all duration-300 transform hover:scale-105 tech-glow px-6 py-3\"\n                  data-testid=\"button-add-payment-method\"\n                >\n                  <Plus className=\"w-5 h-5 mr-2\" />\n                  Crear M√©todo\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                <DialogHeader>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-xl flex items-center justify-center tech-glow\">\n                      <CreditCard className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <div>\n                      <DialogTitle className=\"text-2xl font-bold text-gray-800 dark:text-white\">\n                        {editingMethod ? \"Editar M√©todo de Pago\" : \"Crear Nuevo M√©todo\"}\n                      </DialogTitle>\n                      <p className=\"text-gray-600 dark:text-gray-400\">Configure su m√©todo de pago personalizado</p>\n                    </div>\n                  </div>\n                </DialogHeader>\n                <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                  {/* Informaci√≥n b√°sica */}\n                  <Card className=\"tech-button-3d bg-gradient-to-br from-blue-50 to-cyan-50 border-2 border-blue-300 dark:border-blue-500/30 rounded-xl\">\n                    <CardHeader className=\"pb-4\">\n                      <CardTitle className=\"flex items-center text-blue-700 dark:text-blue-300\">\n                        <CreditCard className=\"w-5 h-5 mr-2\" />\n                        Informaci√≥n del M√©todo\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"name\" className=\"text-blue-700 dark:text-blue-300 font-medium\">Nombre del M√©todo *</Label>\n                          <Input\n                            id=\"name\"\n                            {...form.register(\"name\")}\n                            placeholder=\"Ej: Efectivo, Tarjeta, Transferencia, Pocket, Carnet\"\n                            className=\"border-2 border-blue-300 focus:border-blue-400 dark:border-blue-500/30\"\n                            data-testid=\"input-method-name\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"description\" className=\"text-blue-700 dark:text-blue-300 font-medium\">Descripci√≥n</Label>\n                          <Input\n                            id=\"description\"\n                            {...form.register(\"description\")}\n                            placeholder=\"Descripci√≥n opcional del m√©todo\"\n                            className=\"border-2 border-blue-300 focus:border-blue-400 dark:border-blue-500/30\"\n                          />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Apariencia visual */}\n                  <Card className=\"tech-button-3d bg-gradient-to-br from-purple-50 to-pink-50 border-2 border-purple-300 dark:border-purple-500/30 rounded-xl\">\n                    <CardHeader className=\"pb-4\">\n                      <CardTitle className=\"flex items-center text-purple-700 dark:text-purple-300\">\n                        <Sparkles className=\"w-5 h-5 mr-2\" />\n                        Apariencia Visual\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div>\n                          <Label className=\"text-purple-700 dark:text-purple-300 font-medium\">√çcono</Label>\n                          <div className=\"grid grid-cols-5 gap-2 mt-2\">\n                            {iconOptions.map((option) => {\n                              const IconComponent = option.icon;\n                              const isSelected = form.watch(\"icon\") === option.id;\n                              return (\n                                <button\n                                  key={option.id}\n                                  type=\"button\"\n                                  onClick={() => {\n                                    console.log(\"Setting icon to:\", option.id);\n                                    form.setValue(\"icon\", option.id, { shouldValidate: true, shouldDirty: true });\n                                  }}\n                                  className={`tech-button-3d p-3 rounded-lg border-2 transition-all duration-300 hover:scale-105 ${\n                                    isSelected\n                                      ? \"border-purple-500 bg-purple-100 dark:bg-purple-900/30 shadow-lg\" \n                                      : \"border-purple-300 hover:border-purple-400\"\n                                  }`}\n                                  title={option.label}\n                                >\n                                  <IconComponent className={`w-4 h-4 mx-auto ${isSelected ? \"text-purple-700\" : \"text-purple-600\"}`} />\n                                </button>\n                              );\n                            })}\n                          </div>\n                          <p className=\"text-xs text-purple-600 mt-1\">Seleccionado: {form.watch(\"icon\")}</p>\n                        </div>\n                        \n                        <div>\n                          <Label className=\"text-purple-700 dark:text-purple-300 font-medium\">Color</Label>\n                          <div className=\"grid grid-cols-4 gap-2 mt-2\">\n                            {colorOptions.map((color) => {\n                              const isSelected = form.watch(\"color\") === color;\n                              return (\n                                <button\n                                  key={color}\n                                  type=\"button\"\n                                  onClick={() => {\n                                    console.log(\"Setting color to:\", color);\n                                    form.setValue(\"color\", color, { shouldValidate: true, shouldDirty: true });\n                                  }}\n                                  className={`tech-button-3d w-10 h-10 rounded-lg border-2 transition-all duration-300 hover:scale-105 ${\n                                    isSelected\n                                      ? \"border-purple-600 shadow-lg ring-2 ring-purple-300\" \n                                      : \"border-purple-300 hover:border-purple-400\"\n                                  }`}\n                                  style={{ backgroundColor: color }}\n                                  title={color}\n                                />\n                              );\n                            })}\n                          </div>\n                          <p className=\"text-xs text-purple-600 mt-1\">Seleccionado: {form.watch(\"color\")}</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Configuraci√≥n */}\n                  <Card className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 dark:border-green-500/30 rounded-xl\">\n                    <CardHeader className=\"pb-4\">\n                      <CardTitle className=\"flex items-center text-green-700 dark:text-green-300\">\n                        <Package className=\"w-5 h-5 mr-2\" />\n                        Configuraci√≥n Avanzada\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-6\">\n                        <div>\n                          <Label htmlFor=\"commission\" className=\"text-green-700 dark:text-green-300 font-medium\">Comisi√≥n (%)</Label>\n                          <Input\n                            id=\"commission\"\n                            type=\"number\"\n                            step=\"0.1\"\n                            {...form.register(\"commission\")}\n                            placeholder=\"0.0\"\n                            className=\"border-2 border-green-300 focus:border-green-400 dark:border-green-500/30\"\n                          />\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          <div className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-green-200 rounded-lg p-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <Label htmlFor=\"active\" className=\"text-green-700 dark:text-green-300 font-medium\">M√©todo Activo</Label>\n                                <p className=\"text-sm text-green-600 dark:text-green-400 mt-1\">Disponible para usar</p>\n                              </div>\n                              <Switch\n                                id=\"active\"\n                                checked={form.watch(\"active\")}\n                                onCheckedChange={(checked) => form.setValue(\"active\", checked)}\n                              />\n                            </div>\n                          </div>\n                          \n                          <div className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-green-200 rounded-lg p-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <Label htmlFor=\"requiresReference\" className=\"text-green-700 dark:text-green-300 font-medium\">Requiere Referencia</Label>\n                                <p className=\"text-sm text-green-600 dark:text-green-400 mt-1\">Solicitar n√∫mero</p>\n                              </div>\n                              <Switch\n                                id=\"requiresReference\"\n                                checked={form.watch(\"requiresReference\")}\n                                onCheckedChange={(checked) => form.setValue(\"requiresReference\", checked)}\n                              />\n                            </div>\n                          </div>\n                          \n                          <div className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-green-200 rounded-lg p-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <Label htmlFor=\"showOnInvoice\" className=\"text-green-700 dark:text-green-300 font-medium\">Mostrar en Factura</Label>\n                                <p className=\"text-sm text-green-600 dark:text-green-400 mt-1\">Visible al cliente</p>\n                              </div>\n                              <Switch\n                                id=\"showOnInvoice\"\n                                checked={form.watch(\"showOnInvoice\")}\n                                onCheckedChange={(checked) => form.setValue(\"showOnInvoice\", checked)}\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Botones de acci√≥n */}\n                  <div className=\"flex gap-3 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleDialogClose}\n                      className=\"flex-1 tech-button-3d border-2 border-gray-300 hover:border-gray-400\"\n                    >\n                      <X className=\"w-4 h-4 mr-2\" />\n                      Cancelar\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={createMethodMutation.isPending}\n                      className=\"flex-1 tech-button-3d bg-gradient-to-br from-cyan-50 to-blue-50 border-2 border-cyan-300 text-cyan-700 dark:bg-gradient-to-br dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-cyan-300 dark:border-cyan-500/30 hover:from-cyan-100 hover:to-blue-100 hover:border-cyan-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n                    >\n                      <Save className=\"w-4 h-4 mr-2\" />\n                      {createMethodMutation.isPending ? \"Guardando...\" : editingMethod ? \"Actualizar M√©todo\" : \"Crear M√©todo\"}\n                    </Button>\n                  </div>\n                </form>\n            </DialogContent>\n          </Dialog>\n          </div>\n        </CardHeader>\n        \n        {/* Estad√≠sticas */}\n        {paymentMethods.length > 0 && (\n          <CardContent className=\"pt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"tech-button-3d bg-gradient-to-br from-blue-50 to-cyan-50 border-2 border-blue-300 dark:border-blue-500/30 rounded-xl p-4 text-center\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <CreditCard className=\"w-4 h-4 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{stats.total}</p>\n                <p className=\"text-sm text-blue-600 dark:text-blue-400\">Total M√©todos</p>\n              </div>\n              <div className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 dark:border-green-500/30 rounded-xl p-4 text-center\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <ToggleRight className=\"w-4 h-4 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\">{stats.active}</p>\n                <p className=\"text-sm text-green-600 dark:text-green-400\">Activos</p>\n              </div>\n              <div className=\"tech-button-3d bg-gradient-to-br from-red-50 to-pink-50 border-2 border-red-300 dark:border-red-500/30 rounded-xl p-4 text-center\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-red-500 to-pink-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <ToggleLeft className=\"w-4 h-4 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-red-700 dark:text-red-300\">{stats.inactive}</p>\n                <p className=\"text-sm text-red-600 dark:text-red-400\">Inactivos</p>\n              </div>\n              <div className=\"tech-button-3d bg-gradient-to-br from-orange-50 to-amber-50 border-2 border-orange-300 dark:border-orange-500/30 rounded-xl p-4 text-center\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-orange-500 to-amber-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <DollarSign className=\"w-4 h-4 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-orange-700 dark:text-orange-300\">{stats.withCommission}</p>\n                <p className=\"text-sm text-orange-600 dark:text-orange-400\">Con Comisi√≥n</p>\n              </div>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n      \n      {/* Buscador y filtros */}\n      <Card className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-gray-300 dark:border-gray-500/30 rounded-xl shadow-sm\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <Input\n                placeholder=\"Buscar m√©todos de pago...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 border-2 border-gray-300 dark:border-gray-600 focus:border-cyan-400 dark:focus:border-cyan-400\"\n                data-testid=\"input-search-methods\"\n              />\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => setFilterActive(\"all\")}\n                variant={filterActive === \"all\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                className=\"tech-button-3d border-2 border-gray-300 hover:border-gray-400\"\n              >\n                Todos ({stats.total})\n              </Button>\n              <Button\n                onClick={() => setFilterActive(\"active\")}\n                variant={filterActive === \"active\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                className=\"tech-button-3d border-2 border-gray-300 hover:border-gray-400\"\n              >\n                Activos ({stats.active})\n              </Button>\n              <Button\n                onClick={() => setFilterActive(\"inactive\")}\n                variant={filterActive === \"inactive\" ? \"default\" : \"outline\"}\n                size=\"sm\"\n                className=\"tech-button-3d border-2 border-gray-300 hover:border-gray-400\"\n              >\n                Inactivos ({stats.inactive})\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Lista de m√©todos */}\n      <div className=\"grid gap-4\">\n        {filteredMethods.map((method) => (\n          <Card key={method.id} className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-blue-300 dark:border-blue-500/30 rounded-xl shadow-sm hover:shadow-lg hover:border-blue-400 dark:hover:border-blue-400 transition-all duration-300 dark:backdrop-blur-sm\" data-testid={`method-row-${method.id}`}>\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div \n                    className=\"w-10 h-10 rounded-xl flex items-center justify-center text-white tech-glow\"\n                    style={{ backgroundColor: method.color ?? \"#3B82F6\" }}\n                  >\n                    {(() => {\n                      const IconComponent = getIconComponent(method.icon ?? \"card\");\n                      return <IconComponent className=\"w-5 h-5\" />;\n                    })()}\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl font-bold text-blue-700 dark:text-blue-300\">\n                      {method.name}\n                    </CardTitle>\n                    <p className=\"text-sm text-blue-600 dark:text-blue-400 mt-1\">\n                      {method.description ?? \"M√©todo de pago\"}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleToggleActive(method.id, method.active ?? false)}\n                    className={`tech-button-3d border-2 ${method.active \n                      ? \"bg-gradient-to-br from-green-50 to-emerald-50 border-green-300 text-green-700 hover:from-green-100 hover:to-emerald-100\" \n                      : \"bg-gradient-to-br from-red-50 to-pink-50 border-red-300 text-red-700 hover:from-red-100 hover:to-pink-100\"} transition-all duration-300 transform hover:scale-105`}\n                    data-testid={`toggle-status-${method.id}`}\n                  >\n                    {method.active ? <ToggleRight className=\"w-4 h-4 mr-1\" /> : <ToggleLeft className=\"w-4 h-4 mr-1\" />}\n                    {method.active ? \"Activo\" : \"Inactivo\"}\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(method)}\n                    className=\"tech-button-3d bg-gradient-to-br from-cyan-50 to-blue-50 border-2 border-cyan-300 text-cyan-700 hover:from-cyan-100 hover:to-blue-100 transition-all duration-300 transform hover:scale-105\"\n                    data-testid={`button-edit-${method.id}`}\n                  >\n                    <Edit2 className=\"w-4 h-4 mr-1\" />\n                    Editar\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(method.id)}\n                    className=\"tech-button-3d bg-gradient-to-br from-red-50 to-pink-50 border-2 border-red-300 text-red-700 hover:from-red-100 hover:to-pink-100 transition-all duration-300 transform hover:scale-105\"\n                    data-testid={`button-delete-${method.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"tech-button-3d bg-gradient-to-br from-orange-50 to-amber-50 border-2 border-orange-300 dark:border-orange-500/30 rounded-xl p-4 text-center hover:from-orange-100 hover:to-amber-100 transition-colors\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-orange-500 to-amber-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                    <DollarSign className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <p className=\"text-sm text-orange-600 dark:text-orange-400 mb-1 font-medium\">Comisi√≥n</p>\n                  <p className=\"text-2xl font-bold text-orange-700 dark:text-orange-300\">\n                    {method.commission ?? \"0\"}%\n                  </p>\n                </div>\n                <div className=\"tech-button-3d bg-gradient-to-br from-purple-50 to-pink-50 border-2 border-purple-300 dark:border-purple-500/30 rounded-xl p-4 text-center hover:from-purple-100 hover:to-pink-100 transition-colors\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                    <Sparkles className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <p className=\"text-sm text-purple-600 dark:text-purple-400 mb-1 font-medium\">Referencia</p>\n                  <p className=\"text-lg font-bold text-purple-700 dark:text-purple-300\">\n                    {method.requiresReference ? \"Requiere\" : \"No Requiere\"}\n                  </p>\n                </div>\n                <div className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 dark:border-green-500/30 rounded-xl p-4 text-center hover:from-green-100 hover:to-emerald-100 transition-colors\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                    <Package className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <p className=\"text-sm text-green-600 dark:text-green-400 mb-1 font-medium\">En Factura</p>\n                  <p className=\"text-lg font-bold text-green-700 dark:text-green-300\">\n                    {method.showOnInvoice ? \"S√≠\" : \"No\"}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Estado vac√≠o mejorado */}\n      {filteredMethods.length === 0 && (\n        <Card className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-gray-300 dark:border-gray-500/30 rounded-xl shadow-sm\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12 space-y-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-gray-400 to-gray-600 rounded-2xl flex items-center justify-center tech-glow\">\n              <CreditCard className=\"w-8 h-8 text-white\" />\n            </div>\n            <div className=\"text-center space-y-2\">\n              <h3 className=\"text-xl font-bold text-gray-800 dark:text-white\">No hay m√©todos de pago</h3>\n              <p className=\"text-gray-600 dark:text-gray-400 max-w-md\">\n                {searchTerm ? \"No se encontraron m√©todos que coincidan con la b√∫squeda\" : \"Comienza creando tu primer m√©todo de pago con configuraci√≥n personalizada.\"}\n              </p>\n            </div>\n            <Button \n              onClick={() => setIsDialogOpen(true)}\n              className=\"tech-button-3d bg-gradient-to-br from-cyan-50 to-blue-50 border-2 border-cyan-300 text-cyan-700 hover:from-cyan-100 hover:to-blue-100 transition-all duration-300 transform hover:scale-105 tech-glow px-6 py-3\"\n            >\n              <Plus className=\"w-5 h-5 mr-2\" />\n              Agregar Primer M√©todo\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":34553},"client/src/components/register-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Eye, EyeOff, Building, User, Mail, Lock, CreditCard } from \"lucide-react\";\n\nconst registerSchema = z.object({\n  firstName: z.string().min(2, \"El nombre debe tener al menos 2 caracteres\"),\n  lastName: z.string().min(2, \"El apellido debe tener al menos 2 caracteres\"),\n  email: z.string().email(\"Email inv√°lido\"),\n  password: z.string().min(8, \"La contrase√±a debe tener al menos 8 caracteres\"),\n  confirmPassword: z.string(),\n  organizationName: z.string().min(2, \"El nombre de la empresa debe tener al menos 2 caracteres\"),\n  organizationPhone: z.string().min(10, \"Tel√©fono inv√°lido\"),\n  selectedPlan: z.string(),\n  acceptTerms: z.boolean().refine(val => val === true, \"Debes aceptar los t√©rminos y condiciones\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Las contrase√±as no coinciden\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\n\ninterface RegisterModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onLoginClick: () => void;\n  onSuccess: () => void;\n}\n\nexport default function RegisterModal({ isOpen, onClose, onLoginClick, onSuccess }: RegisterModalProps) {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      organizationName: \"\",\n      organizationPhone: \"\",\n      selectedPlan: \"free\",\n      acceptTerms: false,\n    },\n  });\n\n  const plans = [\n    { id: \"free\", name: \"Plan Gratuito\", price: \"$0/mes\", description: \"Hasta 50 facturas por mes\" },\n    { id: \"basic\", name: \"Plan B√°sico\", price: \"$29/mes\", description: \"Hasta 500 facturas por mes\" },\n    { id: \"pro\", name: \"Plan Pro\", price: \"$79/mes\", description: \"Facturas ilimitadas\" },\n  ];\n\n  const selectedPlanDetails = plans.find(plan => plan.id === form.watch(\"selectedPlan\"));\n\n  const onSubmit = async (data: RegisterForm) => {\n    setIsLoading(true);\n    try {\n      // Aqu√≠ implementaremos la llamada a la API de registro\n      console.log(\"Datos de registro:\", data);\n      \n      // Simular delay de API\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      onSuccess();\n    } catch (error) {\n      console.error(\"Error en registro:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-center\">\n            Crear cuenta en Billtracky\n          </DialogTitle>\n          <p className=\"text-center text-muted-foreground\">\n            √önete a cientos de lavander√≠as que ya conf√≠an en nosotros\n          </p>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          {/* Informaci√≥n Personal */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 text-sm font-medium text-foreground\">\n              <User className=\"w-4 h-4\" />\n              Informaci√≥n Personal\n            </div>\n            \n            <div className=\"grid grid-cols-1 gap-4\">\n              <div>\n                <Label htmlFor=\"firstName\">Nombre *</Label>\n                <Input\n                  id=\"firstName\"\n                  {...form.register(\"firstName\")}\n                  placeholder=\"Tu nombre\"\n                  data-testid=\"input-first-name\"\n                />\n                {form.formState.errors.firstName && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.firstName.message}\n                  </p>\n                )}\n              </div>\n              \n              <div>\n                <Label htmlFor=\"lastName\">Apellido *</Label>\n                <Input\n                  id=\"lastName\"\n                  {...form.register(\"lastName\")}\n                  placeholder=\"Tu apellido\"\n                  data-testid=\"input-last-name\"\n                />\n                {form.formState.errors.lastName && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.lastName.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <Label htmlFor=\"email\">Email *</Label>\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...form.register(\"email\")}\n                  placeholder=\"tu@email.com\"\n                  className=\"pl-10\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"grid grid-cols-1 gap-4\">\n              <div>\n                <Label htmlFor=\"password\">Contrase√±a *</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    {...form.register(\"password\")}\n                    placeholder=\"Min. 8 caracteres\"\n                    className=\"pl-10 pr-10\"\n                    data-testid=\"input-password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowPassword(!showPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground p-1 hover:bg-muted rounded min-h-8 min-w-8 flex items-center justify-center\"\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n                {form.formState.errors.password && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\">Confirmar Contrase√±a *</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type={showConfirmPassword ? \"text\" : \"password\"}\n                    {...form.register(\"confirmPassword\")}\n                    placeholder=\"Repite tu contrase√±a\"\n                    className=\"pl-10 pr-10\"\n                    data-testid=\"input-confirm-password\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-muted-foreground p-1 hover:bg-muted rounded min-h-8 min-w-8 flex items-center justify-center\"\n                  >\n                    {showConfirmPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n                {form.formState.errors.confirmPassword && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {form.formState.errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Informaci√≥n de la Empresa */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 text-sm font-medium text-foreground\">\n              <Building className=\"w-4 h-4\" />\n              Informaci√≥n de la Empresa\n            </div>\n            \n            <div>\n              <Label htmlFor=\"organizationName\">Nombre de la Lavander√≠a *</Label>\n              <Input\n                id=\"organizationName\"\n                {...form.register(\"organizationName\")}\n                placeholder=\"Ej: Lavander√≠a Express\"\n                data-testid=\"input-organization-name\"\n              />\n              {form.formState.errors.organizationName && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.organizationName.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"organizationPhone\">Tel√©fono de la Empresa *</Label>\n              <Input\n                id=\"organizationPhone\"\n                {...form.register(\"organizationPhone\")}\n                placeholder=\"809-555-0123\"\n                data-testid=\"input-organization-phone\"\n              />\n              {form.formState.errors.organizationPhone && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.organizationPhone.message}\n                </p>\n              )}\n            </div>\n          </div>\n\n          {/* Selecci√≥n de Plan */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center gap-2 text-sm font-medium text-foreground\">\n              <CreditCard className=\"w-4 h-4\" />\n              Selecciona tu Plan\n            </div>\n            \n            <Select \n              value={form.watch(\"selectedPlan\")} \n              onValueChange={(value) => form.setValue(\"selectedPlan\", value)}\n            >\n              <SelectTrigger data-testid=\"select-plan\">\n                <SelectValue placeholder=\"Selecciona un plan\" />\n              </SelectTrigger>\n              <SelectContent>\n                {plans.map((plan) => (\n                  <SelectItem key={plan.id} value={plan.id}>\n                    <div className=\"flex flex-col\">\n                      <span className=\"font-medium\">{plan.name} - {plan.price}</span>\n                      <span className=\"text-sm text-muted-foreground\">{plan.description}</span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            {selectedPlanDetails && (\n              <div className=\"p-3 bg-muted/50 rounded-lg\">\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <p className=\"font-medium\">{selectedPlanDetails.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{selectedPlanDetails.description}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-lg\">{selectedPlanDetails.price}</p>\n                    {selectedPlanDetails.id === \"free\" && (\n                      <p className=\"text-sm text-green-600 dark:text-green-400\">30 d√≠as gratis</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* T√©rminos y Condiciones */}\n          <div className=\"flex items-start space-x-2\">\n            <Checkbox\n              id=\"acceptTerms\"\n              checked={form.watch(\"acceptTerms\")}\n              onCheckedChange={(checked) => form.setValue(\"acceptTerms\", !!checked)}\n              data-testid=\"checkbox-accept-terms\"\n            />\n            <Label htmlFor=\"acceptTerms\" className=\"text-sm leading-5\">\n              Acepto los{\" \"}\n              <a href=\"#\" className=\"text-secondary hover:underline\">\n                t√©rminos y condiciones\n              </a>{\" \"}\n              y la{\" \"}\n              <a href=\"#\" className=\"text-secondary hover:underline\">\n                pol√≠tica de privacidad\n              </a>\n            </Label>\n          </div>\n          {form.formState.errors.acceptTerms && (\n            <p className=\"text-sm text-destructive\">\n              {form.formState.errors.acceptTerms.message}\n            </p>\n          )}\n\n          {/* Botones */}\n          <div className=\"space-y-4\">\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n              data-testid=\"button-register\"\n            >\n              {isLoading ? \"Creando cuenta...\" : \"Crear cuenta\"}\n            </Button>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                ¬øYa tienes cuenta?{\" \"}\n                <button\n                  type=\"button\"\n                  onClick={onLoginClick}\n                  className=\"text-secondary hover:underline font-medium\"\n                  data-testid=\"link-login\"\n                >\n                  Iniciar sesi√≥n\n                </button>\n              </p>\n            </div>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13877},"client/src/components/services-config.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, Edit3, Save, Search, Sparkles, Package, TrendingUp, Filter, X, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type Service, insertServiceSchema } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface ServicesConfigProps {\n  onNotification: (message: string) => void;\n}\n\nexport default function ServicesConfig({ onNotification }: ServicesConfigProps) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingService, setEditingService] = useState<Service | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [serviceTypes, setServiceTypes] = useState([\n    { id: `service_${Date.now()}`, name: \"\", price: \"\" }\n  ]);\n\n  const { data: services = [], isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertServiceSchema),\n    defaultValues: {\n      name: \"\",\n      washPrice: \"\",\n      ironPrice: \"\",\n      bothPrice: \"\",\n    },\n  });\n\n  // Filtrar servicios\n  const filteredServices = services.filter((service) => {\n    const matchesSearch = service.name.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  });\n\n  // Estad√≠sticas\n  const stats = {\n    total: services.length,\n    avgWashPrice: services.length > 0 ? services.reduce((sum, s) => sum + parseFloat(s.washPrice), 0) / services.length : 0,\n    avgIronPrice: services.length > 0 ? services.reduce((sum, s) => sum + parseFloat(s.ironPrice), 0) / services.length : 0,\n    maxPrice: services.length > 0 ? Math.max(...services.map(s => Math.max(parseFloat(s.washPrice), parseFloat(s.ironPrice), parseFloat(s.bothPrice)))) : 0\n  };\n\n  const addServiceType = () => {\n    setServiceTypes([...serviceTypes, { id: `custom_${Date.now()}`, name: \"\", price: \"\" }]);\n  };\n\n  const removeServiceType = (id: string) => {\n    if (serviceTypes.length > 1) {\n      setServiceTypes(serviceTypes.filter(type => type.id !== id));\n    }\n  };\n\n  const updateServiceType = (id: string, field: 'name' | 'price', value: string) => {\n    setServiceTypes(serviceTypes.map(type => \n      type.id === id ? { ...type, [field]: value } : type\n    ));\n  };\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (editingService) {\n        const response = await apiRequest(\"PUT\", `/api/services/${editingService.id}`, data);\n        return response.json();\n      } else {\n        const response = await apiRequest(\"POST\", \"/api/services\", data);\n        return response.json();\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      onNotification(editingService ? \"Servicio actualizado exitosamente\" : \"Servicio creado exitosamente\");\n      setIsDialogOpen(false);\n      setEditingService(null);\n      form.reset();\n    },\n    onError: () => {\n      onNotification(\"Error al guardar el servicio\");\n    },\n  });\n\n  const handleSubmit = (data: any) => {\n    // Construir datos del servicio con tipos personalizados\n    const serviceData = {\n      name: data.name,\n      // Usar el primer tipo para compatibilidad o valores por defecto\n      washPrice: serviceTypes[0]?.price || \"0\",\n      ironPrice: serviceTypes[1]?.price || \"0\", \n      bothPrice: serviceTypes[2]?.price || \"0\",\n      // Guardar tipos personalizados para uso futuro\n      customTypes: serviceTypes.filter(type => type.name && type.price)\n    };\n    createServiceMutation.mutate(serviceData);\n  };\n\n  const handleEdit = (service: Service) => {\n    setEditingService(service);\n    form.setValue(\"name\", service.name);\n    form.setValue(\"washPrice\", service.washPrice);\n    form.setValue(\"ironPrice\", service.ironPrice);\n    form.setValue(\"bothPrice\", service.bothPrice);\n    \n    // Cargar tipos de servicio desde el servicio existente\n    const existingTypes = [];\n    if (service.washPrice && parseFloat(service.washPrice) > 0) {\n      existingTypes.push({ id: `wash_${Date.now()}`, name: \"Solo Lavado\", price: service.washPrice });\n    }\n    if (service.ironPrice && parseFloat(service.ironPrice) > 0) {\n      existingTypes.push({ id: `iron_${Date.now()}`, name: \"Solo Planchado\", price: service.ironPrice });\n    }\n    if (service.bothPrice && parseFloat(service.bothPrice) > 0) {\n      existingTypes.push({ id: `both_${Date.now()}`, name: \"Lavado + Planchado\", price: service.bothPrice });\n    }\n    \n    // Si no hay tipos existentes, crear uno vac√≠o\n    if (existingTypes.length === 0) {\n      existingTypes.push({ id: `service_${Date.now()}`, name: \"\", price: \"\" });\n    }\n    \n    setServiceTypes(existingTypes);\n    setIsDialogOpen(true);\n  };\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    setEditingService(null);\n    form.reset();\n    // Resetear tipos de servicio al estado inicial\n    setServiceTypes([{ id: `service_${Date.now()}`, name: \"\", price: \"\" }]);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-cyan-300 dark:border-cyan-500/30 rounded-xl shadow-sm dark:backdrop-blur-sm\">\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center space-y-3\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-xl flex items-center justify-center mx-auto tech-glow animate-pulse\">\n                <Package className=\"w-6 h-6 text-white\" />\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-400\">Cargando servicios...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header con estad√≠sticas y bot√≥n crear */}\n      <Card className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-cyan-300 dark:border-cyan-500/30 rounded-xl shadow-sm dark:backdrop-blur-sm\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-14 h-14 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-2xl flex items-center justify-center tech-glow\">\n                <Package className=\"w-8 h-8 text-white\" />\n              </div>\n              <div>\n                <CardTitle className=\"text-3xl font-bold text-gray-800 dark:text-white\">Gesti√≥n de Servicios</CardTitle>\n                <p className=\"text-gray-600 dark:text-gray-400 mt-1\">Configura precios y tipos de servicio</p>\n              </div>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button \n                  onClick={() => {\n                    setEditingService(null);\n                    setServiceTypes([\n                      { id: `service_${Date.now()}`, name: \"\", price: \"\" }\n                    ]);\n                    setIsDialogOpen(true);\n                  }}\n                  className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 text-green-700 dark:bg-gradient-to-br dark:from-green-500/20 dark:to-emerald-600/20 dark:text-green-300 dark:border-green-500/30 hover:from-green-100 hover:to-emerald-100 hover:border-green-400 dark:hover:from-green-400/30 dark:hover:to-emerald-500/30 transition-all duration-300 transform hover:scale-105 tech-glow px-6 py-3\"\n                  data-testid=\"button-add-service\"\n                >\n                  <Plus className=\"w-5 h-5 mr-2\" />\n                  Crear Servicio\n                </Button>\n              </DialogTrigger>\n            </Dialog>\n          </div>\n        </CardHeader>\n        \n        {/* Estad√≠sticas */}\n        {services.length > 0 && (\n          <CardContent className=\"pt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"tech-button-3d bg-gradient-to-br from-blue-50 to-cyan-50 border-2 border-blue-300 dark:border-blue-500/30 rounded-xl p-4 text-center\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <Package className=\"w-4 h-4 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{stats.total}</p>\n                <p className=\"text-sm text-blue-600 dark:text-blue-400\">Total Servicios</p>\n              </div>\n              <div className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 dark:border-green-500/30 rounded-xl p-4 text-center\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <TrendingUp className=\"w-4 h-4 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\">RD${stats.avgWashPrice.toFixed(0)}</p>\n                <p className=\"text-sm text-green-600 dark:text-green-400\">Prom. Lavado</p>\n              </div>\n              <div className=\"tech-button-3d bg-gradient-to-br from-purple-50 to-pink-50 border-2 border-purple-300 dark:border-purple-500/30 rounded-xl p-4 text-center\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <Sparkles className=\"w-4 h-4 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-purple-700 dark:text-purple-300\">RD${stats.avgIronPrice.toFixed(0)}</p>\n                <p className=\"text-sm text-purple-600 dark:text-purple-400\">Prom. Planchado</p>\n              </div>\n              <div className=\"tech-button-3d bg-gradient-to-br from-orange-50 to-red-50 border-2 border-orange-300 dark:border-orange-500/30 rounded-xl p-4 text-center\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-orange-500 to-red-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                  <TrendingUp className=\"w-4 h-4 text-white\" />\n                </div>\n                <p className=\"text-2xl font-bold text-orange-700 dark:text-orange-300\">RD${stats.maxPrice.toFixed(0)}</p>\n                <p className=\"text-sm text-orange-600 dark:text-orange-400\">Precio M√°ximo</p>\n              </div>\n            </div>\n          </CardContent>\n        )}\n      </Card>\n      \n      {/* Buscador y filtros */}\n      <Card className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-gray-300 dark:border-gray-500/30 rounded-xl shadow-sm\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <Input\n                placeholder=\"Buscar servicios por nombre...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 border-2 border-gray-300 dark:border-gray-600 focus:border-cyan-400 dark:focus:border-cyan-400\"\n                data-testid=\"input-search-services\"\n              />\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={() => setShowFilters(!showFilters)}\n              className=\"tech-button-3d border-2 border-gray-300 hover:border-gray-400\"\n              data-testid=\"button-toggle-filters\"\n            >\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filtros\n            </Button>\n          </div>\n          \n          {showFilters && (\n            <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label>Categor√≠a</Label>\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Todas las categor√≠as\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todas las categor√≠as</SelectItem>\n                      <SelectItem value=\"clothing\">Ropa</SelectItem>\n                      <SelectItem value=\"bedding\">Ropa de cama</SelectItem>\n                      <SelectItem value=\"special\">Especiales</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      \n      {/* Lista de servicios */}\n      <div className=\"grid gap-4\">\n        {filteredServices.map((service) => (\n          <Card key={service.id} className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-blue-300 dark:border-blue-500/30 rounded-xl shadow-sm hover:shadow-lg hover:border-blue-400 dark:hover:border-blue-400 transition-all duration-300 dark:backdrop-blur-sm\" data-testid={`service-card-${service.id}`}>\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center tech-glow\">\n                    <Package className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-xl font-bold text-blue-700 dark:text-blue-300\" data-testid={`service-name-${service.id}`}>\n                      {service.name}\n                    </CardTitle>\n                    <Badge variant=\"secondary\" className=\"mt-1 bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-300\">\n                      Servicio Activo\n                    </Badge>\n                  </div>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleEdit(service)}\n                  className=\"tech-button-3d bg-gradient-to-br from-cyan-50 to-blue-50 border-2 border-cyan-300 text-cyan-700 dark:bg-gradient-to-br dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-cyan-300 dark:border-cyan-500/30 hover:from-cyan-100 hover:to-blue-100 hover:border-cyan-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n                  data-testid={`button-edit-service-${service.id}`}\n                >\n                  <Edit3 className=\"w-4 h-4 mr-2\" />\n                  Editar\n                </Button>\n              </div>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 dark:border-green-500/30 rounded-xl p-4 text-center hover:from-green-100 hover:to-emerald-100 transition-colors\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                    <Sparkles className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <p className=\"text-sm text-green-600 dark:text-green-400 mb-1 font-medium\">Solo Lavado</p>\n                  <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\" data-testid={`service-wash-price-${service.id}`}>\n                    RD${parseFloat(service.washPrice).toFixed(2)}\n                  </p>\n                </div>\n                <div className=\"tech-button-3d bg-gradient-to-br from-purple-50 to-pink-50 border-2 border-purple-300 dark:border-purple-500/30 rounded-xl p-4 text-center hover:from-purple-100 hover:to-pink-100 transition-colors\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                    <Sparkles className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <p className=\"text-sm text-purple-600 dark:text-purple-400 mb-1 font-medium\">Solo Planchado</p>\n                  <p className=\"text-2xl font-bold text-purple-700 dark:text-purple-300\" data-testid={`service-iron-price-${service.id}`}>\n                    RD${parseFloat(service.ironPrice).toFixed(2)}\n                  </p>\n                </div>\n                <div className=\"tech-button-3d bg-gradient-to-br from-orange-50 to-red-50 border-2 border-orange-300 dark:border-orange-500/30 rounded-xl p-4 text-center hover:from-orange-100 hover:to-red-100 transition-colors\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-orange-500 to-red-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n                    <TrendingUp className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <p className=\"text-sm text-orange-600 dark:text-orange-400 mb-1 font-medium\">Lavado + Planchado</p>\n                  <p className=\"text-2xl font-bold text-orange-700 dark:text-orange-300\" data-testid={`service-both-price-${service.id}`}>\n                    RD${parseFloat(service.bothPrice).toFixed(2)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n      \n      {/* Modal mejorado */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-xl flex items-center justify-center tech-glow\">\n                <Package className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <DialogTitle className=\"text-2xl font-bold text-gray-800 dark:text-white\">\n                  {editingService ? \"Editar Servicio\" : \"Crear Nuevo Servicio\"}\n                </DialogTitle>\n                <p className=\"text-gray-600 dark:text-gray-400\">Configure precios y tipos de servicio personalizados</p>\n              </div>\n            </div>\n          </DialogHeader>\n          \n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Informaci√≥n b√°sica */}\n            <Card className=\"tech-button-3d bg-gradient-to-br from-blue-50 to-cyan-50 border-2 border-blue-300 dark:border-blue-500/30 rounded-xl\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center text-blue-700 dark:text-blue-300\">\n                  <Package className=\"w-5 h-5 mr-2\" />\n                  Informaci√≥n del Servicio\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-4\">\n                  <div>\n                    <Label htmlFor=\"name\" className=\"text-blue-700 dark:text-blue-300 font-medium\">Nombre del Servicio *</Label>\n                    <Input\n                      id=\"name\"\n                      {...form.register(\"name\")}\n                      placeholder=\"Ej: PANTALONES, CAMISAS, EDREDONES\"\n                      className=\"border-2 border-blue-300 focus:border-blue-400 dark:border-blue-500/30\"\n                      data-testid=\"input-service-name\"\n                    />\n                    {form.formState.errors.name && (\n                      <p className=\"text-sm text-red-500 mt-1\">\n                        {form.formState.errors.name.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Tipos de servicio flexibles */}\n            <Card className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 dark:border-green-500/30 rounded-xl\">\n              <CardHeader className=\"pb-4\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center text-green-700 dark:text-green-300\">\n                    <Sparkles className=\"w-5 h-5 mr-2\" />\n                    Tipos de Servicio y Precios\n                  </CardTitle>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addServiceType}\n                    className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 text-green-700 hover:from-green-100 hover:to-emerald-100\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-1\" />\n                    Agregar Tipo\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {serviceTypes.map((type, index) => (\n                    <div key={type.id} className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-end p-4 border-2 border-green-200 dark:border-green-700/30 rounded-lg bg-white dark:bg-gray-800/50\">\n                      <div>\n                        <Label className=\"text-green-700 dark:text-green-300 font-medium\">Tipo de Servicio</Label>\n                        <Input\n                          value={type.name}\n                          onChange={(e) => updateServiceType(type.id, 'name', e.target.value)}\n                          placeholder=\"Ej: Solo Lavado, En Seco, Express, Planchado\"\n                          className=\"border-2 border-green-300 focus:border-green-400\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-green-700 dark:text-green-300 font-medium\">Precio (RD$)</Label>\n                        <Input\n                          type=\"number\"\n                          step=\"0.01\"\n                          value={type.price}\n                          onChange={(e) => updateServiceType(type.id, 'price', e.target.value)}\n                          placeholder=\"0.00\"\n                          className=\"border-2 border-green-300 focus:border-green-400\"\n                        />\n                      </div>\n                      <div className=\"flex justify-end\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => removeServiceType(type.id)}\n                          className=\"text-red-600 hover:text-red-700 border-red-300 hover:border-red-400\"\n                          disabled={serviceTypes.length === 1}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Botones de acci√≥n */}\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleDialogClose}\n                className=\"flex-1 tech-button-3d border-2 border-gray-300 hover:border-gray-400\"\n                data-testid=\"button-cancel-service\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Cancelar\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={createServiceMutation.isPending}\n                className=\"flex-1 tech-button-3d bg-gradient-to-br from-cyan-50 to-blue-50 border-2 border-cyan-300 text-cyan-700 dark:bg-gradient-to-br dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-cyan-300 dark:border-cyan-500/30 hover:from-cyan-100 hover:to-blue-100 hover:border-cyan-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n                data-testid=\"button-save-service\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                {createServiceMutation.isPending ? \"Guardando...\" : editingService ? \"Actualizar Servicio\" : \"Crear Servicio\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Estado vac√≠o mejorado */}\n      {services.length === 0 && (\n        <Card className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-gray-300 dark:border-gray-500/30 rounded-xl shadow-sm\">\n          <CardContent className=\"flex flex-col items-center justify-center py-12 space-y-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-gray-400 to-gray-600 rounded-2xl flex items-center justify-center tech-glow\">\n              <Package className=\"w-8 h-8 text-white\" />\n            </div>\n            <div className=\"text-center space-y-2\">\n              <h3 className=\"text-xl font-bold text-gray-800 dark:text-white\">No hay servicios configurados</h3>\n              <p className=\"text-gray-600 dark:text-gray-400 max-w-md\">Comienza creando tu primer servicio con precios personalizados para diferentes tipos de lavander√≠a.</p>\n            </div>\n            <Button \n              onClick={() => {\n                setServiceTypes([\n                  { id: `service_${Date.now()}`, name: \"\", price: \"\" }\n                ]);\n                setIsDialogOpen(true);\n              }}\n              className=\"tech-button-3d bg-gradient-to-br from-cyan-50 to-blue-50 border-2 border-cyan-300 text-cyan-700 dark:bg-gradient-to-br dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-cyan-300 dark:border-cyan-500/30 hover:from-cyan-100 hover:to-blue-100 hover:border-cyan-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 transform hover:scale-105 tech-glow px-6 py-3\"\n              data-testid=\"button-add-first-service\"\n            >\n              <Plus className=\"w-5 h-5 mr-2\" />\n              Configurar Primer Servicio\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":27061},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = {\n    'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n  };\n  \n  if (data) {\n    headers['Content-Type'] = 'application/json';\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers: {\n        'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n      },\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1624},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { type Employee, type User } from \"@shared/schema\";\nimport LandingPage from \"@/components/landing-page\";\nimport RegisterModal from \"@/components/register-modal\";\nimport LoginModal from \"@/components/login-modal\";\nimport Dashboard from \"@/components/dashboard\";\nimport NotificationModal from \"@/components/notification-modal\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthenticatedUser = Employee | User;\n\nexport default function Home() {\n  const [currentUser, setCurrentUser] = useState<AuthenticatedUser | null>(null);\n  const [userType, setUserType] = useState<\"employee\" | \"user\" | null>(null);\n  const [showLoginModal, setShowLoginModal] = useState(false);\n  const [showRegisterModal, setShowRegisterModal] = useState(false);\n  const { toast } = useToast();\n\n  const showNotification = (message: string) => {\n    toast({\n      title: \"Billtracky\",\n      description: message,\n    });\n  };\n\n  const handleGetStarted = () => {\n    setShowRegisterModal(true);\n  };\n\n  const handleLogin = () => {\n    setShowLoginModal(true);\n  };\n\n  const handleUserLogin = (user: User) => {\n    setCurrentUser(user);\n    setUserType(\"user\");\n    setShowLoginModal(false);\n    showNotification(`Bienvenido ${user.firstName}!`);\n  };\n\n  const handleEmployeeLogin = (employee: Employee, accessCode?: string) => {\n    // Store employee ID and access code in localStorage for authenticated requests\n    localStorage.setItem('employeeId', employee.id);\n    if (accessCode) {\n      localStorage.setItem('employeeAccessCode', accessCode);\n    }\n    setCurrentUser(employee);\n    setUserType(\"employee\");\n    setShowLoginModal(false);\n    showNotification(`Bienvenido ${employee.name}!`);\n  };\n\n  const handleRegisterSuccess = () => {\n    setShowRegisterModal(false);\n    showNotification(\"¬°Cuenta creada exitosamente! Revisa tu email para activar tu cuenta.\");\n  };\n\n  const logout = () => {\n    // Clear stored employee data from localStorage\n    localStorage.removeItem('employeeId');\n    localStorage.removeItem('employeeAccessCode');\n    setCurrentUser(null);\n    setUserType(null);\n    showNotification(\"Sesi√≥n cerrada correctamente.\");\n  };\n\n  const switchToLogin = () => {\n    setShowRegisterModal(false);\n    setShowLoginModal(true);\n  };\n\n  const switchToRegister = () => {\n    setShowLoginModal(false);\n    setShowRegisterModal(true);\n  };\n\n  // Si no hay usuario autenticado, mostrar landing page\n  if (!currentUser) {\n    return (\n      <>\n        <LandingPage \n          onGetStarted={handleGetStarted}\n          onLogin={handleLogin}\n        />\n        <RegisterModal\n          isOpen={showRegisterModal}\n          onClose={() => setShowRegisterModal(false)}\n          onLoginClick={switchToLogin}\n          onSuccess={handleRegisterSuccess}\n        />\n        <LoginModal\n          isOpen={showLoginModal}\n          onClose={() => setShowLoginModal(false)}\n          onRegisterClick={switchToRegister}\n          onUserLogin={handleUserLogin}\n          onEmployeeLogin={handleEmployeeLogin}\n        />\n      </>\n    );\n  }\n\n  // Si hay usuario autenticado, mostrar dashboard\n  return (\n    <Dashboard \n      user={currentUser as Employee} // Temporal hasta que adaptemos el dashboard para usuarios\n      onLogout={logout} \n      onNotification={showNotification} \n    />\n  );\n}\n","size_bytes":3323},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payment-methods.tsx":{"content":"import { useState } from \"react\";\nimport PaymentMethodsConfig from \"@/components/payment-methods-config\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function PaymentMethodsPage() {\n  const { toast } = useToast();\n\n  const handleNotification = (message: string) => {\n    toast({\n      title: \"M√©todos de Pago\",\n      description: message,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <PaymentMethodsConfig onNotification={handleNotification} />\n    </div>\n  );\n}","size_bytes":516},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        plain: \"\",\n      },\n      size: {\n        default: \"h-11 px-4 py-2\",\n        sm: \"h-11 rounded-md px-3\",\n        lg: \"h-12 rounded-md px-8\",\n        icon: \"h-11 w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size }), className)}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1921},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-11 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/order-management.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { \n  FileText, \n  Search, \n  Filter, \n  Eye, \n  DollarSign, \n  Printer, \n  X, \n  Check, \n  Clock, \n  Package, \n  AlertCircle,\n  Phone,\n  Calendar,\n  User,\n  CreditCard,\n  Banknote,\n  Landmark,\n  RefreshCw,\n  CheckCircle,\n  XCircle,\n  Trash2,\n  MoreVertical,\n  ChevronDown,\n  Settings\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { Invoice, InvoiceItem, PaymentMethod } from '@shared/schema';\n\n// Helper function for authenticated API requests\nasync function authenticatedRequest(url: string, method: string, data?: any) {\n  const res = await fetch(url, {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n    },\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: 'include',\n  });\n  \n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(text || res.statusText);\n  }\n  \n  return res.json();\n}\n\ninterface OrderWithItems extends Invoice {\n  items?: InvoiceItem[];\n}\n\ninterface OrderManagementProps {\n  onNotification: (message: string) => void;\n}\n\nexport default function OrderManagement({ onNotification }: OrderManagementProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [filterPayment, setFilterPayment] = useState('all');\n  const [selectedOrder, setSelectedOrder] = useState<OrderWithItems | null>(null);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showStatusModal, setShowStatusModal] = useState(false);\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [showCancelModal, setShowCancelModal] = useState(false);\n  const [showWorkTicketModal, setShowWorkTicketModal] = useState(false);\n  const [cancelReason, setCancelReason] = useState('');\n  const [paymentReference, setPaymentReference] = useState('');\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('');\n\n  const queryClient = useQueryClient();\n\n  // Obtener √≥rdenes\n  const { \n    data: orders = [], \n    isLoading: ordersLoading, \n    error: ordersError, \n    refetch: refetchOrders \n  } = useQuery<Invoice[]>({\n    queryKey: ['/api/invoices'],\n    retry: 2,\n    retryDelay: 1000,\n  });\n\n  // Obtener m√©todos de pago\n  const { \n    data: paymentMethods = [], \n    isLoading: paymentMethodsLoading, \n    error: paymentMethodsError, \n    refetch: refetchPaymentMethods \n  } = useQuery<PaymentMethod[]>({\n    queryKey: ['/api/payment-methods'],\n    retry: 2,\n    retryDelay: 1000,\n  });\n\n  // Obtener items de la orden seleccionada\n  const { \n    data: orderItems = [], \n    isLoading: orderItemsLoading, \n    error: orderItemsError, \n    refetch: refetchOrderItems \n  } = useQuery<InvoiceItem[]>({\n    queryKey: ['/api/invoices', selectedOrder?.id, 'items'],\n    enabled: !!selectedOrder?.id,\n    retry: 2,\n    retryDelay: 1000,\n  });\n\n  // Mutaciones\n  const statusMutation = useMutation({\n    mutationFn: ({ id, status }: { id: string; status: string }) =>\n      authenticatedRequest(`/api/invoices/${id}/status`, 'PATCH', { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      setShowStatusModal(false);\n      onNotification(\"Estado actualizado: El estado de la orden se ha actualizado exitosamente.\");\n    },\n    onError: (error: any) => {\n      onNotification(\"Error: \" + (error.message || \"No se pudo actualizar el estado\"));\n    },\n  });\n\n  const paymentMutation = useMutation({\n    mutationFn: ({ id, paymentMethod, paymentReference }: { id: string; paymentMethod: string; paymentReference?: string }) =>\n      authenticatedRequest(`/api/invoices/${id}/pay`, 'PATCH', { paymentMethod, paymentReference }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      setShowPaymentModal(false);\n      setPaymentReference('');\n      setSelectedPaymentMethod('');\n      onNotification(\"Pago procesado: El pago se ha procesado exitosamente.\");\n    },\n    onError: (error: any) => {\n      onNotification(\"Error: \" + (error.message || \"No se pudo procesar el pago\"));\n    },\n  });\n\n  const cancelMutation = useMutation({\n    mutationFn: ({ id, reason }: { id: string; reason: string }) =>\n      authenticatedRequest(`/api/invoices/${id}/cancel`, 'PATCH', { reason }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      setShowCancelModal(false);\n      setCancelReason('');\n      onNotification(\"Orden cancelada: La orden se ha cancelado exitosamente.\");\n    },\n    onError: (error: any) => {\n      onNotification(\"Error: \" + (error.message || \"No se pudo cancelar la orden\"));\n    },\n  });\n\n  // Error handling effects\n  useEffect(() => {\n    if (ordersError) {\n      onNotification(\"Error al cargar √≥rdenes: \" + (ordersError instanceof Error ? ordersError.message : \"No se pudieron cargar las √≥rdenes\"));\n    }\n  }, [ordersError, onNotification]);\n\n  useEffect(() => {\n    if (paymentMethodsError) {\n      onNotification(\"Error al cargar m√©todos de pago: \" + (paymentMethodsError instanceof Error ? paymentMethodsError.message : \"No se pudieron cargar los m√©todos de pago\"));\n    }\n  }, [paymentMethodsError, onNotification]);\n\n  useEffect(() => {\n    if (orderItemsError) {\n      onNotification(\"Error al cargar items de la orden: \" + (orderItemsError instanceof Error ? orderItemsError.message : \"No se pudieron cargar los items de la orden\"));\n    }\n  }, [orderItemsError, onNotification]);\n\n  // Configuraci√≥n de estados con colores pasteles profesionales\n  const statusConfig = {\n    received: { name: 'Recibido', colorClass: 'bg-sky-200 text-sky-800 border border-sky-300 px-2 py-1 text-xs font-semibold rounded-full', icon: Package },\n    in_process: { name: 'En Proceso', colorClass: 'bg-amber-200 text-amber-800 border border-amber-300 px-2 py-1 text-xs font-semibold rounded-full', icon: RefreshCw },\n    ready: { name: 'Listo para Entrega', colorClass: 'bg-violet-200 text-violet-800 border border-violet-300 px-2 py-1 text-xs font-semibold rounded-full', icon: CheckCircle },\n    delivered: { name: 'Entregado', colorClass: 'bg-emerald-200 text-emerald-800 border border-emerald-300 px-2 py-1 text-xs font-semibold rounded-full', icon: Check },\n    cancelled: { name: 'Cancelado', colorClass: 'bg-rose-200 text-rose-800 border border-rose-300 px-2 py-1 text-xs font-semibold rounded-full', icon: XCircle },\n  };\n\n  // Helper function para obtener clases de estado con colores pasteles profesionales\n  const getStatusClasses = (status: string | null) => {\n    // Pastel colors with dark text for AA contrast + professional appearance\n    if (!status) return 'bg-slate-200 text-slate-800 border border-slate-300 px-2 py-1 text-xs font-semibold rounded-full';\n    \n    switch(status) {\n      case 'received': return 'bg-sky-200 text-sky-800 border border-sky-300 px-2 py-1 text-xs font-semibold rounded-full';\n      case 'in_process': return 'bg-amber-200 text-amber-800 border border-amber-300 px-2 py-1 text-xs font-semibold rounded-full';\n      case 'ready': return 'bg-violet-200 text-violet-800 border border-violet-300 px-2 py-1 text-xs font-semibold rounded-full';\n      case 'delivered': return 'bg-emerald-200 text-emerald-800 border border-emerald-300 px-2 py-1 text-xs font-semibold rounded-full';\n      case 'cancelled': return 'bg-rose-200 text-rose-800 border border-rose-300 px-2 py-1 text-xs font-semibold rounded-full';\n      default: return 'bg-slate-200 text-slate-800 border border-slate-300 px-2 py-1 text-xs font-semibold rounded-full';\n    }\n  };\n\n  // Helper function para obtener clases de pago de forma segura\n  const getPaymentClasses = (paid: boolean | null) => {\n    return paid ? 'bg-gradient-to-br from-green-500/20 to-emerald-600/20 text-green-300 border border-green-400/30 tech-glow' : 'bg-gradient-to-br from-yellow-500/20 to-orange-600/20 text-yellow-300 border border-yellow-400/30 tech-glow';\n  };\n\n  const paymentMethodConfig = {\n    cash: { name: 'Efectivo', icon: Banknote, color: 'text-green-600 dark:text-green-400' },\n    card: { name: 'Tarjeta', icon: CreditCard, color: 'text-blue-600 dark:text-blue-400' },\n    tarjeta: { name: 'Tarjeta', icon: CreditCard, color: 'text-blue-600 dark:text-blue-400' },\n    transfer: { name: 'Transferencia', icon: Landmark, color: 'text-indigo-600 dark:text-indigo-400' },\n    tansferencia: { name: 'Transferencia', icon: Landmark, color: 'text-indigo-600 dark:text-indigo-400' },\n    mobile_pay: { name: 'Pago M√≥vil', icon: Phone, color: 'text-purple-600 dark:text-purple-400' },\n    pending: { name: 'Pendiente', icon: Clock, color: 'text-yellow-600 dark:text-yellow-400' },\n  };\n\n  // Funciones utilitarias\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `RD$${num.toFixed(2)}`;\n  };\n\n  const formatDate = (date: Date | string | null) => {\n    if (!date) return 'N/A';\n    return new Date(date).toLocaleDateString('es-DO', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  // Filtrar √≥rdenes\n  const filteredOrders = orders.filter(order => {\n    const matchesSearch = \n      order.number?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.customerName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.customerPhone?.includes(searchTerm) || false;\n    \n    const matchesStatus = filterStatus === 'all' || order.status === filterStatus;\n    \n    // Filtrado mejorado por m√©todo de pago\n    const matchesPayment = filterPayment === 'all' || \n                          (filterPayment === 'paid' && order.paid) ||\n                          (filterPayment === 'pending' && !order.paid) ||\n                          (order.paid && order.paymentMethod === filterPayment);\n    \n    return matchesSearch && matchesStatus && matchesPayment;\n  });\n\n  // Funciones de acci√≥n\n  const openWorkTicketModal = (order: OrderWithItems) => {\n    setSelectedOrder(order);\n    setShowWorkTicketModal(true);\n  };\n\n  const handleStatusChange = (newStatus: string) => {\n    if (!selectedOrder) return;\n    statusMutation.mutate({ id: selectedOrder.id, status: newStatus });\n  };\n\n  const handlePayment = () => {\n    if (!selectedOrder || !selectedPaymentMethod) return;\n    \n    const method = paymentMethods.find(pm => pm.code === selectedPaymentMethod);\n    if (!method) {\n      onNotification(\"Error: M√©todo de pago no encontrado\");\n      return;\n    }\n\n    paymentMutation.mutate({\n      id: selectedOrder.id,\n      paymentMethod: selectedPaymentMethod,\n      paymentReference: method.requiresReference ? paymentReference : undefined\n    });\n  };\n\n  const handleDirectPayment = (order: OrderWithItems, paymentMethodCode: string) => {\n    const method = paymentMethods.find(pm => pm.code === paymentMethodCode);\n    if (!method) {\n      onNotification(\"Error: M√©todo de pago no encontrado\");\n      return;\n    }\n\n    // Si el m√©todo requiere referencia, abrir el modal completo\n    if (method.requiresReference) {\n      setSelectedOrder(order);\n      setSelectedPaymentMethod(paymentMethodCode);\n      setShowPaymentModal(true);\n      return;\n    }\n\n    // Para m√©todos que no requieren referencia, cobrar directamente\n    paymentMutation.mutate({\n      id: order.id,\n      paymentMethod: paymentMethodCode,\n      paymentReference: undefined\n    }, {\n      onSuccess: () => {\n        onNotification(`‚úÖ Pago registrado en ${method.name} - Orden ${order.number}`);\n      }\n    });\n  };\n\n  const handleCancel = () => {\n    if (!selectedOrder || !cancelReason.trim()) return;\n    cancelMutation.mutate({ id: selectedOrder.id, reason: cancelReason });\n  };\n\n  const openDetailsModal = (order: Invoice) => {\n    setSelectedOrder(order);\n    setShowDetailsModal(true);\n  };\n\n  const isLoading = ordersLoading || paymentMethodsLoading;\n  const hasError = ordersError || paymentMethodsError;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <RefreshCw className=\"h-8 w-8 animate-spin text-foreground\" />\n        <span className=\"ml-2 text-foreground\">Cargando √≥rdenes...</span>\n      </div>\n    );\n  }\n\n  if (hasError) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-64 space-y-4\">\n        <AlertCircle className=\"h-12 w-12 text-red-500 dark:text-red-400\" />\n        <div className=\"text-center space-y-2\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Error al cargar datos</h3>\n          <p className=\"text-muted-foreground\">No se pudieron cargar las √≥rdenes o m√©todos de pago</p>\n        </div>\n        <div className=\"flex space-x-2\">\n          <Button \n            onClick={() => refetchOrders()} \n            variant=\"outline\"\n            data-testid=\"button-retry-orders\"\n          >\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Reintentar √ìrdenes\n          </Button>\n          <Button \n            onClick={() => refetchPaymentMethods()} \n            variant=\"outline\"\n            data-testid=\"button-retry-payment-methods\"\n          >\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Reintentar M√©todos de Pago\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Gesti√≥n de √ìrdenes</h1>\n          <p className=\"text-muted-foreground\">Administra el estado y pago de las √≥rdenes</p>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <div className=\"tech-button-3d bg-white border-2 border-violet-300 text-violet-700 dark:from-purple-500/20 dark:to-pink-600/20 dark:text-white dark:border-purple-500/30 rounded-xl shadow-sm px-4 py-2 hover:bg-violet-50 hover:border-violet-400 dark:hover:from-purple-400/30 dark:hover:to-pink-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm\">\n            <div className=\"flex items-center gap-2\">\n              <Package className=\"w-5 h-5\" />\n              <span className=\"font-bold\">{filteredOrders.length} √≥rdenes</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Filtros */}\n      <Card className=\"bg-card dark:bg-gray-800/50 dark:shadow-lg tech-glow border border-border dark:border-cyan-500/20\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-600 dark:text-blue-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Buscar por n√∫mero, cliente o tel√©fono...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 tech-button-3d bg-white border-2 border-blue-300 text-blue-700 dark:from-blue-500/20 dark:to-blue-600/20 dark:text-white dark:border-blue-500/30 rounded-lg shadow-sm hover:bg-blue-50 hover:border-blue-400 dark:hover:from-blue-400/30 dark:hover:to-blue-500/30 transition-all duration-300 focus:ring-2 focus:ring-blue-500/50\"\n                data-testid=\"input-search-orders\"\n              />\n            </div>\n            \n            <Select value={filterStatus} onValueChange={setFilterStatus} data-testid=\"select-status-filter\">\n              <SelectTrigger className=\"tech-button-3d bg-white border-2 border-orange-300 text-orange-700 dark:from-orange-500/20 dark:to-orange-600/20 dark:text-white dark:border-orange-500/30 rounded-lg shadow-sm hover:bg-orange-50 hover:border-orange-400 dark:hover:from-orange-400/30 dark:hover:to-orange-500/30 transition-all duration-300\">\n                <SelectValue placeholder=\"Estado\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos los estados</SelectItem>\n                <SelectItem value=\"received\">Recibido</SelectItem>\n                <SelectItem value=\"in_process\">En Proceso</SelectItem>\n                <SelectItem value=\"ready\">Listo</SelectItem>\n                <SelectItem value=\"delivered\">Entregado</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelado</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filterPayment} onValueChange={setFilterPayment} data-testid=\"select-payment-filter\">\n              <SelectTrigger className=\"tech-button-3d bg-white border-2 border-emerald-300 text-emerald-700 dark:from-emerald-500/20 dark:to-emerald-600/20 dark:text-white dark:border-emerald-500/30 rounded-lg shadow-sm hover:bg-emerald-50 hover:border-emerald-400 dark:hover:from-emerald-400/30 dark:hover:to-emerald-500/30 transition-all duration-300\">\n                <SelectValue placeholder=\"M√©todos de Pago\" />\n              </SelectTrigger>\n              <SelectContent className=\"tech-button-3d bg-white dark:from-slate-800 dark:to-slate-900 border-2 border-emerald-200 dark:border-emerald-500/50 shadow-xl\">\n                <SelectItem value=\"all\">Todos los pagos</SelectItem>\n                <SelectItem value=\"paid\">Pagado</SelectItem>\n                <SelectItem value=\"pending\">Pendiente</SelectItem>\n                <div className=\"border-t border-emerald-300 dark:border-emerald-500/50 my-2 mx-2\"></div>\n                {paymentMethods.filter(pm => pm.active).map((method) => {\n                  const config = paymentMethodConfig[method.code as keyof typeof paymentMethodConfig] || { name: method.name, icon: CreditCard, color: 'text-emerald-600' };\n                  const IconComponent = config.icon;\n                  return (\n                    <SelectItem key={method.code} value={method.code} className=\"hover:bg-gradient-to-br hover:from-emerald-100 hover:to-emerald-200 dark:hover:from-emerald-900/30 dark:hover:to-emerald-800/30 py-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <IconComponent className={`h-4 w-4 ${config.color}`} />\n                        <span className=\"font-medium\">{method.name}</span>\n                      </div>\n                    </SelectItem>\n                  );\n                })}\n              </SelectContent>\n            </Select>\n\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSearchTerm('');\n                setFilterStatus('all');\n                setFilterPayment('all');\n              }}\n              data-testid=\"button-clear-filters\"\n            >\n              <X className=\"h-4 w-4 mr-2\" />\n              Limpiar\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Lista de √≥rdenes */}\n      <div className=\"grid gap-6\">\n        {filteredOrders.map((order) => {\n          const status = statusConfig[order.status as keyof typeof statusConfig];\n          const StatusIcon = status?.icon || Package;\n          const paymentMethod = paymentMethodConfig[order.paymentMethod as keyof typeof paymentMethodConfig];\n          \n          return (\n            <Card key={order.id} className=\"tech-button-3d bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800/50 dark:to-slate-900/50 hover:shadow-xl dark:hover:shadow-cyan-500/25 border-2 border-slate-200 dark:border-cyan-500/30 transition-all duration-300 hover:scale-[1.02] hover:shadow-2xl\" data-testid={`card-order-${order.id}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1 grid grid-cols-1 md:grid-cols-5 gap-4 items-center\">\n                    <div className=\"space-y-1\">\n                      <div className=\"font-bold text-lg bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\" data-testid={`text-order-number-${order.id}`}>\n                        {order.number}\n                      </div>\n                      <div className=\"text-sm text-slate-600 dark:text-slate-400 font-medium\">\n                        {formatDate(order.date)}\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-1\">\n                      <div className=\"font-bold text-slate-800 dark:text-slate-200\" data-testid={`text-customer-name-${order.id}`}>\n                        <User className=\"w-4 h-4 inline mr-2 text-slate-500\" />\n                        {order.customerName}\n                      </div>\n                      <div className=\"text-sm text-slate-600 dark:text-slate-400 flex items-center\">\n                        <Phone className=\"w-3 h-3 mr-1\" />\n                        {order.customerPhone}\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-col gap-2\">\n                      <Badge className=\"tech-button-3d bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900/30 dark:to-blue-800/30 border-2 border-blue-300 dark:border-blue-500/50 text-blue-800 dark:text-blue-300 font-bold px-3 py-1 rounded-lg shadow-lg\" data-testid={`badge-status-${order.id}`}>\n                        <StatusIcon className=\"h-4 w-4 mr-2\" />\n                        {status?.name || order.status}\n                      </Badge>\n                      {order.paid ? (\n                        <div className=\"tech-button-3d bg-gradient-to-br from-green-100 to-emerald-200 dark:from-green-900/30 dark:to-emerald-800/30 border-2 border-green-400 dark:border-green-500/50 text-green-800 dark:text-green-300 px-2 py-1 rounded-lg text-xs font-bold flex items-center\">\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          PAGADO - {(() => {\n                            const method = paymentMethods.find(pm => pm.code === order.paymentMethod);\n                            const config = paymentMethodConfig[order.paymentMethod as keyof typeof paymentMethodConfig];\n                            return config ? config.name : (method?.name || order.paymentMethod || 'M√©todo desconocido');\n                          })()}\n                        </div>\n                      ) : (\n                        <div className=\"tech-button-3d bg-gradient-to-br from-yellow-100 to-orange-200 dark:from-yellow-900/30 dark:to-orange-800/30 border-2 border-yellow-400 dark:border-yellow-500/50 text-yellow-800 dark:text-yellow-300 px-2 py-1 rounded-lg text-xs font-bold flex items-center animate-pulse\">\n                          <AlertCircle className=\"h-3 w-3 mr-1\" />\n                          COBRO PENDIENTE\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"space-y-1\">\n                      <div className=\"font-black text-2xl bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent\" data-testid={`text-total-${order.id}`}>\n                        {formatCurrency(order.total)}\n                      </div>\n                      <div className=\"text-sm text-slate-600 dark:text-slate-400 flex items-center\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {formatDate(order.deliveryDate)}\n                      </div>\n                    </div>\n                    \n                    \n                    {/* Panel de acciones profesionales */}\n                    <div className=\"flex items-center gap-3 justify-end\">\n                      {/* BOT√ìN DE COBRO DESPLEGABLE para pagos pendientes */}\n                      {!order.paid && (\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button\n                              size=\"sm\"\n                              disabled={paymentMutation.isPending}\n                              className=\"tech-button-3d bg-white border-2 border-emerald-300 text-emerald-700 dark:from-green-500/20 dark:to-emerald-600/20 dark:text-white dark:border-emerald-500/30 rounded-lg shadow-sm p-3 hover:bg-emerald-50 hover:border-emerald-400 dark:hover:from-green-400/30 dark:hover:to-emerald-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm font-bold disabled:opacity-50\"\n                              data-testid={`button-collect-payment-${order.id}`}\n                              title=\"Cobrar pago - seleccionar m√©todo\"\n                            >\n                              {paymentMutation.isPending ? (\n                                <>\n                                  <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                                  PROCESANDO...\n                                </>\n                              ) : (\n                                <>\n                                  <DollarSign className=\"h-4 w-4 mr-2\" />\n                                  COBRAR\n                                  <ChevronDown className=\"h-3 w-3 ml-1\" />\n                                </>\n                              )}\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"center\" className=\"w-56 tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-emerald-200 dark:border-emerald-500/50 shadow-2xl backdrop-blur-sm\">\n                            {paymentMethods.filter((method: PaymentMethod) => method.active && method.code !== 'pending').map((method: PaymentMethod) => {\n                              const config = paymentMethodConfig[method.code as keyof typeof paymentMethodConfig] || { name: method.name, icon: CreditCard, color: 'text-gray-600' };\n                              const IconComponent = config.icon;\n                              return (\n                                <DropdownMenuItem\n                                  key={method.id}\n                                  onClick={() => !paymentMutation.isPending && handleDirectPayment(order, method.code)}\n                                  disabled={paymentMutation.isPending}\n                                  className={`hover:bg-gradient-to-br hover:from-emerald-100 hover:to-emerald-200 dark:hover:from-emerald-900/30 dark:hover:to-emerald-800/30 text-emerald-800 dark:text-emerald-300 font-semibold py-3 cursor-pointer ${paymentMutation.isPending ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                  data-testid={`button-pay-${method.code}-${order.id}`}\n                                >\n                                  <IconComponent className={`mr-3 h-4 w-4 ${config.color}`} />\n                                  {method.name}\n                                  {method.requiresReference && <span className=\"ml-auto text-xs opacity-70\">(con ref.)</span>}\n                                </DropdownMenuItem>\n                              );\n                            })}\n                            <DropdownMenuSeparator className=\"bg-gradient-to-r from-transparent via-emerald-300 to-transparent dark:via-emerald-600\" />\n                            <DropdownMenuItem\n                              onClick={() => {\n                                setSelectedOrder(order);\n                                setShowPaymentModal(true);\n                              }}\n                              className=\"hover:bg-gradient-to-br hover:from-blue-100 hover:to-blue-200 dark:hover:from-blue-900/30 dark:hover:to-blue-800/30 text-blue-800 dark:text-blue-300 font-semibold py-3\"\n                              data-testid={`button-payment-modal-${order.id}`}\n                            >\n                              <Settings className=\"mr-3 h-4 w-4\" />\n                              M√°s opciones...\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      )}\n                      \n                      {/* Botones de acci√≥n principales mejorados */}\n                      <Button\n                        size=\"sm\"\n                        onClick={() => openDetailsModal(order)}\n                        className=\"tech-button-3d bg-white border-2 border-blue-300 text-blue-700 dark:from-blue-500/20 dark:to-purple-600/20 dark:text-white dark:border-blue-500/30 rounded-lg shadow-sm p-3 hover:bg-blue-50 hover:border-blue-400 dark:hover:from-blue-400/30 dark:hover:to-purple-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm font-semibold\"\n                        data-testid={`button-details-${order.id}`}\n                        title=\"Ver detalles completos\"\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      \n                      <Button\n                        size=\"sm\"\n                        onClick={() => {\n                          const phoneNumber = order.customerPhone.replace(/[^\\d]/g, '');\n                          const message = `¬°Hola ${order.customerName}! Tu pedido ${order.number} est√° ${order.status === 'ready' ? 'listo para recoger' : 'en proceso'}. Total: ${formatCurrency(order.total)}`;\n                          const whatsappUrl = `https://wa.me/1${phoneNumber}?text=${encodeURIComponent(message)}`;\n                          window.open(whatsappUrl, '_blank');\n                        }}\n                        className=\"tech-button-3d bg-white border-2 border-teal-300 text-teal-700 dark:from-teal-500/20 dark:to-green-600/20 dark:text-white dark:border-teal-500/30 rounded-lg shadow-sm p-3 hover:bg-teal-50 hover:border-teal-400 dark:hover:from-teal-400/30 dark:hover:to-green-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm font-semibold\"\n                        data-testid={`button-whatsapp-${order.id}`}\n                        title=\"Enviar notificaci√≥n por WhatsApp\"\n                      >\n                        <Phone className=\"h-4 w-4\" />\n                      </Button>\n                      \n                      {/* Men√∫ dropdown mejorado con dise√±o 3D */}\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button\n                            size=\"sm\"\n                            className=\"tech-button-3d bg-white border-2 border-slate-300 text-slate-700 dark:from-slate-500/20 dark:to-slate-600/20 dark:text-white dark:border-slate-500/30 rounded-lg shadow-sm p-3 hover:bg-slate-50 hover:border-slate-400 dark:hover:from-slate-400/30 dark:hover:to-slate-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm font-bold\"\n                            data-testid={`button-actions-${order.id}`}\n                            title=\"M√°s opciones\"\n                          >\n                            <MoreVertical className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\" className=\"w-64 tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-slate-300 dark:border-slate-600 shadow-2xl backdrop-blur-sm\">\n                          <DropdownMenuItem\n                            onClick={() => openWorkTicketModal(order)}\n                            className=\"hover:bg-gradient-to-br hover:from-purple-100 hover:to-purple-200 dark:hover:from-purple-900/30 dark:hover:to-purple-800/30 text-purple-800 dark:text-purple-300 font-semibold py-3\"\n                            data-testid={`menu-ticket-${order.id}`}\n                          >\n                            <FileText className=\"mr-3 h-5 w-5\" />\n                            Ticket de Trabajo\n                          </DropdownMenuItem>\n                          \n                          <DropdownMenuItem\n                            onClick={() => window.print()}\n                            className=\"hover:bg-gradient-to-br hover:from-blue-100 hover:to-blue-200 dark:hover:from-blue-900/30 dark:hover:to-blue-800/30 text-blue-800 dark:text-blue-300 font-semibold py-3\"\n                            data-testid={`menu-print-${order.id}`}\n                          >\n                            <Printer className=\"mr-3 h-5 w-5\" />\n                            Imprimir Recibo\n                          </DropdownMenuItem>\n                          \n                          {order.status !== 'cancelled' && order.status !== 'delivered' && (\n                            <>\n                              <DropdownMenuSeparator className=\"bg-gradient-to-r from-transparent via-slate-300 to-transparent dark:via-slate-600\" />\n                              \n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedOrder(order);\n                                  setShowStatusModal(true);\n                                }}\n                                className=\"hover:bg-gradient-to-br hover:from-orange-100 hover:to-orange-200 dark:hover:from-orange-900/30 dark:hover:to-orange-800/30 text-orange-800 dark:text-orange-300 font-semibold py-3\"\n                                data-testid={`menu-status-${order.id}`}\n                              >\n                                <RefreshCw className=\"mr-3 h-5 w-5\" />\n                                Cambiar Estado\n                              </DropdownMenuItem>\n                              \n                              {!order.paid && (\n                                <DropdownMenuItem\n                                  onClick={() => {\n                                    setSelectedOrder(order);\n                                    setShowPaymentModal(true);\n                                  }}\n                                  className=\"hover:bg-gradient-to-br hover:from-green-100 hover:to-green-200 dark:hover:from-green-900/30 dark:hover:to-green-800/30 text-green-800 dark:text-green-300 font-semibold py-3\"\n                                  data-testid={`menu-payment-${order.id}`}\n                                >\n                                  <DollarSign className=\"mr-3 h-5 w-5\" />\n                                  Procesar Pago\n                                </DropdownMenuItem>\n                              )}\n                              \n                              <DropdownMenuSeparator className=\"bg-gradient-to-r from-transparent via-slate-400 to-transparent dark:via-slate-500 my-2\" />\n                              \n                              <DropdownMenuItem\n                                onClick={() => {\n                                  setSelectedOrder(order);\n                                  setShowCancelModal(true);\n                                }}\n                                className=\"hover:bg-gradient-to-br hover:from-red-100 hover:to-red-200 dark:hover:from-red-900/30 dark:hover:to-red-800/30 text-red-800 dark:text-red-300 font-semibold py-3\"\n                                data-testid={`menu-cancel-${order.id}`}\n                              >\n                                <XCircle className=\"mr-3 h-5 w-5\" />\n                                Cancelar Orden\n                              </DropdownMenuItem>\n                            </>\n                          )}\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {filteredOrders.length === 0 && (\n        <Card className=\"bg-card dark:bg-gray-800/50 dark:shadow-lg tech-glow border border-border dark:border-cyan-500/20\">\n          <CardContent className=\"p-8 text-center\">\n            <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No hay √≥rdenes</h3>\n            <p className=\"text-muted-foreground\">No se encontraron √≥rdenes que coincidan con los filtros aplicados.</p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Modal de detalles */}\n      <Dialog open={showDetailsModal} onOpenChange={setShowDetailsModal}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto bg-card dark:bg-gray-800/50 dark:border-cyan-500/20\">\n          <DialogHeader>\n            <DialogTitle className=\"text-foreground\">Detalles de la Orden {selectedOrder?.number}</DialogTitle>\n          </DialogHeader>\n          {selectedOrder && (\n            <div className=\"space-y-6\">\n              {/* Informaci√≥n del cliente */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <User className=\"h-5 w-5\" />\n                    Informaci√≥n del Cliente\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium\">Nombre</Label>\n                      <div className=\"mt-1\" data-testid=\"text-detail-customer-name\">\n                        {selectedOrder.customerName}\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium\">Tel√©fono</Label>\n                      <div className=\"mt-1\" data-testid=\"text-detail-customer-phone\">\n                        {selectedOrder.customerPhone}\n                      </div>\n                    </div>\n                    {selectedOrder.customerEmail && (\n                      <div>\n                        <Label className=\"text-sm font-medium\">Email</Label>\n                        <div className=\"mt-1\" data-testid=\"text-detail-customer-email\">\n                          {selectedOrder.customerEmail}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Informaci√≥n de la orden */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <FileText className=\"h-5 w-5\" />\n                    Informaci√≥n de la Orden\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium\">Estado</Label>\n                      <div className=\"mt-1\">\n                        <Badge className={getStatusClasses(selectedOrder.status)}>\n                          {statusConfig[selectedOrder.status as keyof typeof statusConfig]?.name || selectedOrder.status}\n                        </Badge>\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium\">Fecha de recibo</Label>\n                      <div className=\"mt-1\" data-testid=\"text-detail-date\">\n                        {formatDate(selectedOrder.date)}\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium\">Fecha de entrega</Label>\n                      <div className=\"mt-1\" data-testid=\"text-detail-delivery-date\">\n                        {formatDate(selectedOrder.deliveryDate)}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Items de la orden */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Package className=\"h-5 w-5\" />\n                    Art√≠culos\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {orderItemsLoading ? (\n                    <div className=\"flex items-center justify-center py-8\">\n                      <RefreshCw className=\"h-6 w-6 animate-spin mr-2\" />\n                      <span>Cargando art√≠culos...</span>\n                    </div>\n                  ) : orderItemsError ? (\n                    <div className=\"text-center py-8 space-y-4\">\n                      <AlertCircle className=\"h-8 w-8 text-red-500 mx-auto\" />\n                      <div>\n                        <p className=\"text-red-600 font-medium\">Error al cargar art√≠culos</p>\n                        <p className=\"text-sm text-muted-foreground mt-1\">\n                          {orderItemsError instanceof Error ? orderItemsError.message : \"No se pudieron cargar los art√≠culos\"}\n                        </p>\n                      </div>\n                      <Button \n                        onClick={() => refetchOrderItems()} \n                        variant=\"outline\" \n                        size=\"sm\"\n                        data-testid=\"button-retry-order-items\"\n                      >\n                        <RefreshCw className=\"h-4 w-4 mr-2\" />\n                        Reintentar\n                      </Button>\n                    </div>\n                  ) : orderItems.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      {orderItems.map((item, index) => (\n                        <div key={item.id} className=\"flex justify-between items-center p-2 border rounded\" data-testid={`item-${index}`}>\n                          <div>\n                            <div className=\"font-medium\">{item.serviceName}</div>\n                            <div className=\"text-sm text-muted-foreground\">Cantidad: {item.quantity}</div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\" data-testid={`item-total-${index}`}>\n                              {formatCurrency(item.total)}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {formatCurrency(item.unitPrice)} c/u\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center text-muted-foreground py-4\">\n                      No hay art√≠culos para mostrar\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Resumen financiero */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <DollarSign className=\"h-5 w-5\" />\n                    Resumen Financiero\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span>Subtotal:</span>\n                      <span data-testid=\"text-detail-subtotal\">{formatCurrency(selectedOrder.subtotal)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>ITBIS (18%):</span>\n                      <span data-testid=\"text-detail-tax\">{formatCurrency(selectedOrder.tax)}</span>\n                    </div>\n                    <div className=\"flex justify-between font-bold text-lg border-t pt-2\">\n                      <span>Total:</span>\n                      <span data-testid=\"text-detail-total\">{formatCurrency(selectedOrder.total)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Estado del pago:</span>\n                      <Badge variant={selectedOrder.paid ? \"default\" : \"secondary\"}>\n                        {selectedOrder.paid ? \"Pagado\" : \"Pendiente\"}\n                      </Badge>\n                    </div>\n                    {selectedOrder.paymentMethod && selectedOrder.paymentMethod !== 'pending' && (\n                      <div className=\"flex justify-between\">\n                        <span>M√©todo de pago:</span>\n                        <span>{paymentMethodConfig[selectedOrder.paymentMethod as keyof typeof paymentMethodConfig]?.name}</span>\n                      </div>\n                    )}\n                    {selectedOrder.paymentReference && (\n                      <div className=\"flex justify-between\">\n                        <span>Referencia:</span>\n                        <span>{selectedOrder.paymentReference}</span>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Informaci√≥n de cancelaci√≥n si aplica */}\n              {selectedOrder.status === 'cancelled' && (\n                <Card className=\"border-red-200\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2 text-red-600\">\n                      <XCircle className=\"h-5 w-5\" />\n                      Informaci√≥n de Cancelaci√≥n\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div>\n                        <Label className=\"text-sm font-medium\">Fecha de cancelaci√≥n</Label>\n                        <div className=\"mt-1\">{formatDate(selectedOrder.cancelledAt)}</div>\n                      </div>\n                      <div>\n                        <Label className=\"text-sm font-medium\">Motivo de cancelaci√≥n</Label>\n                        <div className=\"mt-1\">{selectedOrder.cancellationReason}</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de cambio de estado */}\n      <Dialog open={showStatusModal} onOpenChange={setShowStatusModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Cambiar Estado de la Orden</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p>¬øQu√© estado deseas asignar a la orden <strong>{selectedOrder?.number}</strong>?</p>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {['received', 'in_process', 'ready', 'delivered'].map((status) => {\n                const config = statusConfig[status as keyof typeof statusConfig];\n                const Icon = config.icon;\n                return (\n                  <Button\n                    key={status}\n                    variant=\"outline\"\n                    className=\"h-auto p-4\"\n                    onClick={() => handleStatusChange(status)}\n                    disabled={statusMutation.isPending}\n                    data-testid={`button-set-status-${status}`}\n                  >\n                    <div className=\"flex flex-col items-center gap-2\">\n                      <Icon className=\"h-6 w-6\" />\n                      <span>{config.name}</span>\n                    </div>\n                  </Button>\n                );\n              })}\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de pago profesional mejorado */}\n      <Dialog open={showPaymentModal} onOpenChange={setShowPaymentModal}>\n        <DialogContent className=\"tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-green-200 dark:border-green-500/50 shadow-2xl max-w-md\">\n          <DialogHeader className=\"text-center\">\n            <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent flex items-center justify-center gap-3\">\n              <DollarSign className=\"h-8 w-8 text-green-600\" />\n              Cobrar Pago\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6 py-4\">\n            {/* Informaci√≥n de la orden */}\n            <div className=\"tech-button-3d bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/30 dark:to-blue-800/30 border-2 border-blue-200 dark:border-blue-500/30 rounded-xl p-4\">\n              <div className=\"text-center space-y-2\">\n                <div className=\"text-lg font-bold text-blue-800 dark:text-blue-300\">\n                  Orden: {selectedOrder?.number}\n                </div>\n                <div className=\"text-3xl font-black bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent\">\n                  {selectedOrder && formatCurrency(selectedOrder.total)}\n                </div>\n                <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                  Cliente: {selectedOrder?.customerName}\n                </div>\n              </div>\n            </div>\n            \n            {/* M√©todo de pago */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-lg font-bold text-slate-700 dark:text-slate-300\">M√©todo de pago</Label>\n              <Select value={selectedPaymentMethod} onValueChange={setSelectedPaymentMethod} data-testid=\"select-payment-method\">\n                <SelectTrigger className=\"tech-button-3d border-2 border-slate-300 dark:border-slate-600 rounded-lg h-12 text-lg\">\n                  <SelectValue placeholder=\"Selecciona c√≥mo pagar\" />\n                </SelectTrigger>\n                <SelectContent className=\"bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-600 rounded-lg shadow-lg z-[60]\">\n                  {paymentMethods.filter((pm: PaymentMethod) => pm.active && pm.code !== 'pending').map((method: PaymentMethod) => {\n                    const config = paymentMethodConfig[method.code as keyof typeof paymentMethodConfig] || { name: method.name, icon: CreditCard, color: 'text-gray-600' };\n                    const IconComponent = config.icon;\n                    return (\n                      <SelectItem key={method.id} value={method.code} className=\"hover:bg-green-50 dark:hover:bg-green-900/20 py-3 text-base cursor-pointer\">\n                        <div className=\"flex items-center gap-3\">\n                          <IconComponent className={`h-5 w-5 ${config.color}`} />\n                          {method.name}\n                        </div>\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {/* Referencia si es necesaria */}\n            {(() => {\n              const method = paymentMethods.find((pm: PaymentMethod) => pm.code === selectedPaymentMethod);\n              return method?.requiresReference && (\n                <div className=\"space-y-3\">\n                  <Label className=\"text-lg font-bold text-slate-700 dark:text-slate-300\">Referencia de pago</Label>\n                  <Input\n                    id=\"payment-reference\"\n                    placeholder=\"N√∫mero de referencia o c√≥digo\"\n                    value={paymentReference}\n                    onChange={(e) => setPaymentReference(e.target.value)}\n                    className=\"tech-button-3d border-2 border-slate-300 dark:border-slate-600 rounded-lg h-12 text-lg\"\n                    data-testid=\"input-payment-reference\"\n                  />\n                </div>\n              );\n            })()}\n            \n            {/* Botones de acci√≥n */}\n            <div className=\"flex gap-4 pt-4\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowPaymentModal(false)} \n                className=\"tech-button-3d flex-1 bg-white border-2 border-slate-300 text-slate-700 dark:from-slate-500/20 dark:to-slate-600/20 dark:text-white dark:border-slate-500/30 rounded-lg shadow-sm p-3 hover:bg-slate-50 hover:border-slate-400 dark:hover:from-slate-400/30 dark:hover:to-slate-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm font-bold\"\n                data-testid=\"button-cancel-payment\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                onClick={handlePayment} \n                disabled={!selectedPaymentMethod || paymentMutation.isPending}\n                className=\"tech-button-3d flex-1 bg-white border-2 border-emerald-300 text-emerald-700 dark:from-green-500/20 dark:to-emerald-600/20 dark:text-white dark:border-emerald-500/30 rounded-lg shadow-sm p-3 hover:bg-emerald-50 hover:border-emerald-400 dark:hover:from-green-400/30 dark:hover:to-emerald-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm font-bold disabled:opacity-50\"\n                data-testid=\"button-process-payment\"\n              >\n                {paymentMutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <RefreshCw className=\"h-4 w-4 animate-spin\" />\n                    Procesando...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <DollarSign className=\"h-5 w-5\" />\n                    COBRAR AHORA\n                  </div>\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de cancelaci√≥n */}\n      <Dialog open={showCancelModal} onOpenChange={setShowCancelModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Cancelar Orden</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p>¬øEst√°s seguro de que deseas cancelar la orden <strong>{selectedOrder?.number}</strong>?</p>\n            <div>\n              <Label htmlFor=\"cancel-reason\">Motivo de cancelaci√≥n *</Label>\n              <Textarea\n                id=\"cancel-reason\"\n                placeholder=\"Explica el motivo de la cancelaci√≥n...\"\n                value={cancelReason}\n                onChange={(e) => setCancelReason(e.target.value)}\n                data-testid=\"textarea-cancel-reason\"\n              />\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowCancelModal(false)} data-testid=\"button-cancel-cancel\">\n                Cancelar\n              </Button>\n              <Button \n                variant=\"destructive\"\n                onClick={handleCancel}\n                disabled={!cancelReason.trim() || cancelMutation.isPending}\n                data-testid=\"button-confirm-cancel\"\n              >\n                {cancelMutation.isPending ? \"Cancelando...\" : \"Confirmar Cancelaci√≥n\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de ticket de trabajo */}\n      <Dialog open={showWorkTicketModal} onOpenChange={setShowWorkTicketModal}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" data-testid=\"modal-work-ticket\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5 text-purple-600\" />\n              Ticket de Trabajo - Orden {selectedOrder?.number}\n            </DialogTitle>\n          </DialogHeader>\n          {selectedOrder && (\n            <div className=\"space-y-6\">\n              {/* Informaci√≥n del cliente */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-sm\">\n                    <User className=\"h-4 w-4\" />\n                    Cliente: {selectedOrder.customerName}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                    <div>\n                      <span className=\"font-medium\">Tel√©fono:</span> {selectedOrder.customerPhone}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Fecha de entrega:</span> {formatDate(selectedOrder.deliveryDate)}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Estado:</span> \n                      <Badge className={`${getStatusClasses(selectedOrder.status)} ml-2`}>\n                        {statusConfig[selectedOrder.status as keyof typeof statusConfig]?.name || selectedOrder.status}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Desglose de prendas */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Package className=\"h-5 w-5 text-purple-600\" />\n                    Desglose de Prendas a Procesar\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {orderItemsLoading ? (\n                      <p className=\"text-center text-muted-foreground\" data-testid=\"text-loading-items\">Cargando items...</p>\n                    ) : orderItems.length > 0 ? (\n                      orderItems.map((item, index) => (\n                        <div key={item.id || index} className=\"border border-border dark:border-cyan-500/20 rounded-lg p-4 bg-card dark:bg-gray-800/50\" data-testid={`work-ticket-item-${index}`}>\n                          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 items-center\">\n                            <div>\n                              <h4 className=\"font-semibold text-purple-700 dark:text-purple-300\" data-testid={`item-service-name-${index}`}>\n                                {item.serviceName}\n                              </h4>\n                              <p className=\"text-sm text-muted-foreground\" data-testid={`item-quantity-${index}`}>\n                                Cantidad: {item.quantity}\n                              </p>\n                            </div>\n                            \n                            <div className=\"space-y-2\">\n                              <h5 className=\"font-medium text-sm\">Servicios a realizar:</h5>\n                              <div className=\"space-y-1\" data-testid={`service-indicators-${index}`}>\n                                {item.serviceType === 'wash' && (\n                                  <div className=\"flex items-center gap-2\" data-testid={`wash-indicator-${index}`}>\n                                    <div className=\"w-3 h-3 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-full shadow-sm dark:shadow-cyan-400/20\"></div>\n                                    <span className=\"text-sm\">Lavado</span>\n                                  </div>\n                                )}\n                                {item.serviceType === 'iron' && (\n                                  <div className=\"flex items-center gap-2\" data-testid={`iron-indicator-${index}`}>\n                                    <div className=\"w-3 h-3 bg-gradient-to-br from-orange-500 to-red-600 rounded-full shadow-sm dark:shadow-orange-400/20\"></div>\n                                    <span className=\"text-sm\">Planchado</span>\n                                  </div>\n                                )}\n                                {item.serviceType === 'both' && (\n                                  <>\n                                    <div className=\"flex items-center gap-2\" data-testid={`wash-indicator-${index}`}>\n                                      <div className=\"w-3 h-3 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-full shadow-sm dark:shadow-cyan-400/20\"></div>\n                                      <span className=\"text-sm\">Lavado</span>\n                                    </div>\n                                    <div className=\"flex items-center gap-2\" data-testid={`iron-indicator-${index}`}>\n                                      <div className=\"w-3 h-3 bg-gradient-to-br from-orange-500 to-red-600 rounded-full shadow-sm dark:shadow-orange-400/20\"></div>\n                                      <span className=\"text-sm\">Planchado</span>\n                                    </div>\n                                  </>\n                                )}\n                              </div>\n                            </div>\n                            \n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Precio unitario:</p>\n                              <p className=\"font-semibold\" data-testid={`item-unit-price-${index}`}>{formatCurrency(item.unitPrice)}</p>\n                            </div>\n                            \n                            <div>\n                              <p className=\"text-sm text-muted-foreground\">Total:</p>\n                              <p className=\"font-bold text-green-600\" data-testid={`item-total-${index}`}>{formatCurrency(item.total)}</p>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    ) : (\n                      <p className=\"text-center text-muted-foreground\" data-testid=\"text-no-items\">No hay items en esta orden</p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Resumen del ticket */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-sm\">\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                    Resumen de Trabajo\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                    <div className=\"text-center p-3 bg-gradient-to-br from-cyan-500/20 to-blue-600/20 border border-cyan-400/30 tech-glow rounded-lg\" data-testid=\"wash-counter\">\n                      <div className=\"font-bold text-lg text-cyan-300\" data-testid=\"wash-count\">\n                        {orderItems.filter(item => item.serviceType === 'wash' || item.serviceType === 'both').reduce((acc, item) => acc + item.quantity, 0)}\n                      </div>\n                      <div className=\"text-cyan-300\">Prendas para lavar</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-gradient-to-br from-orange-500/20 to-red-600/20 border border-orange-400/30 tech-glow rounded-lg\" data-testid=\"iron-counter\">\n                      <div className=\"font-bold text-lg text-orange-300\" data-testid=\"iron-count\">\n                        {orderItems.filter(item => item.serviceType === 'iron' || item.serviceType === 'both').reduce((acc, item) => acc + item.quantity, 0)}\n                      </div>\n                      <div className=\"text-orange-300\">Prendas para planchar</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-gradient-to-br from-green-500/20 to-emerald-600/20 border border-green-400/30 tech-glow rounded-lg\" data-testid=\"total-counter\">\n                      <div className=\"font-bold text-lg text-green-300\" data-testid=\"order-total\">\n                        {formatCurrency(selectedOrder.total)}\n                      </div>\n                      <div className=\"text-green-300\">Total de la orden</div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":64901},"client/src/components/invoice-creation.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport {\n  FileText,\n  Plus,\n  Trash2,\n  DollarSign,\n  Calendar,\n  User,\n  Phone,\n  Mail,\n  Search,\n  X,\n  Clock,\n  Check,\n  CheckCircle,\n  Users,\n  CreditCard,\n  Banknote,\n  Landmark,\n  Calculator,\n  Percent,\n  Minus,\n  AlertCircle,\n  Edit,\n  Printer,\n  MessageCircle,\n  MoreVertical,\n  Save\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport type { \n  Customer, \n  Service, \n  PaymentMethod, \n  Invoice, \n  InvoiceItem,\n  InsertInvoice, \n  InsertInvoiceItem,\n  InsertCustomer \n} from '@shared/schema';\n\n// Helper function for authenticated API requests\nasync function authenticatedRequest(url: string, method: string, data?: any) {\n  const res = await fetch(url, {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n    },\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: 'include',\n  });\n  \n  if (!res.ok) {\n    const errorText = await res.text();\n    let errorMessage;\n    try {\n      const errorJson = JSON.parse(errorText);\n      errorMessage = errorJson.message || errorText;\n    } catch {\n      errorMessage = errorText || res.statusText;\n    }\n    throw new Error(errorMessage);\n  }\n  \n  return res.json();\n}\n\n// Form schemas\nconst invoiceFormSchema = z.object({\n  customerName: z.string().min(1, 'El nombre del cliente es requerido'),\n  customerPhone: z.string().min(10, 'El tel√©fono debe tener al menos 10 d√≠gitos'),\n  customerEmail: z.string().email('Email inv√°lido').optional().or(z.literal('')),\n  deliveryDate: z.string().optional(),\n});\n\nconst itemFormSchema = z.object({\n  serviceId: z.string().min(1, 'Seleccione un servicio'),\n  serviceType: z.enum(['wash', 'iron', 'both']),\n  quantity: z.number().min(1, 'La cantidad debe ser al menos 1'),\n});\n\ntype InvoiceFormData = z.infer<typeof invoiceFormSchema>;\ntype ItemFormData = z.infer<typeof itemFormSchema>;\n\ninterface InvoiceCreationProps {\n  onNotification: (message: string) => void;\n}\n\ninterface InvoiceItemWithService extends InvoiceItem {\n  service?: Service;\n}\n\ninterface CurrentInvoice {\n  customerName: string;\n  customerPhone: string;\n  customerEmail: string;\n  deliveryDate: string;\n  items: InvoiceItemWithService[];\n  subtotal: number;\n  tax: number;\n  discount: number;\n  total: number;\n  paymentMethodId: string;\n}\n\nexport default function InvoiceCreation({ onNotification }: InvoiceCreationProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Estado local\n  const [currentInvoice, setCurrentInvoice] = useState<CurrentInvoice>({\n    customerName: '',\n    customerPhone: '',\n    customerEmail: '',\n    deliveryDate: '',\n    items: [],\n    subtotal: 0,\n    tax: 0,\n    discount: 0,\n    total: 0,\n    paymentMethodId: '',\n  });\n\n  // Estados de modales\n  const [showCustomerSearchModal, setShowCustomerSearchModal] = useState(false);\n  const [showDiscountModal, setShowDiscountModal] = useState(false);\n  const [showDateModal, setShowDateModal] = useState(false);\n  const [showAddItemModal, setShowAddItemModal] = useState(false);\n  const [showEditItemModal, setShowEditItemModal] = useState(false);\n  const [showActionsModal, setShowActionsModal] = useState(false);\n  const [editingItem, setEditingItem] = useState<InvoiceItemWithService | null>(null);\n\n  // Estados para el flujo de pago estilo Shopify POS\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<string>('');\n  const [savedInvoiceId, setSavedInvoiceId] = useState<string | null>(null);\n  const [isDraft, setIsDraft] = useState(false);\n\n  // Estados para el nuevo selector de servicios escalable\n  const [serviceSearchTerm, setServiceSearchTerm] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [selectedServiceType, setSelectedServiceType] = useState<'wash' | 'iron' | 'both'>('wash');\n  const [itemQuantity, setItemQuantity] = useState(1);\n  const [selectedDeliveryDate, setSelectedDeliveryDate] = useState('');\n  \n  // Estados de descuento\n  const [discountData, setDiscountData] = useState({\n    type: 'amount' as 'amount' | 'percentage',\n    value: 0,\n    reason: ''\n  });\n\n  // B√∫squeda de clientes\n  const [customerSearchTerm, setCustomerSearchTerm] = useState('');\n\n  // Formularios\n  const invoiceForm = useForm<InvoiceFormData>({\n    resolver: zodResolver(invoiceFormSchema),\n    defaultValues: {\n      customerName: '',\n      customerPhone: '',\n      customerEmail: '',\n      deliveryDate: '',\n    },\n  });\n\n  // Queries para datos\n  const { data: customers = [], isLoading: customersLoading } = useQuery<Customer[]>({\n    queryKey: ['/api/customers'],\n    retry: 2,\n  });\n\n  const { data: services = [], isLoading: servicesLoading } = useQuery<Service[]>({\n    queryKey: ['/api/services'],\n    retry: 2,\n  });\n\n  const { data: paymentMethods = [], isLoading: paymentMethodsLoading } = useQuery<PaymentMethod[]>({\n    queryKey: ['/api/payment-methods'],\n    retry: 2,\n  });\n\n  // Generar n√∫mero de factura\n  const { data: nextInvoiceNumber } = useQuery<{ number: string }>({\n    queryKey: ['/api/invoices/next-number'],\n    retry: 2,\n  });\n\n  // Mutaci√≥n para crear factura\n  const createInvoiceMutation = useMutation({\n    mutationFn: async (payload: { invoice: InsertInvoice, items: InsertInvoiceItem[] }) => {\n      console.log('[DEBUG] Starting invoice creation mutation...');\n      const result = await authenticatedRequest('/api/invoices', 'POST', payload);\n      console.log('[DEBUG] Invoice creation mutation completed successfully');\n      return result;\n    },\n    onSuccess: (data) => {\n      console.log('[DEBUG] Invoice creation onSuccess called');\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/customers'] });\n      \n      // Guardar ID de la factura creada y marcar como borrador o pagada\n      setSavedInvoiceId(data.invoice.id);\n      setIsDraft(!data.invoice.paid);\n      \n      toast({\n        title: data.invoice.paid ? \"Factura pagada exitosamente\" : \"Pedido guardado exitosamente\",\n        description: `Factura ${data.invoice.number} por ${formatCurrency(data.invoice.total)} ha sido ${data.invoice.paid ? 'pagada' : 'guardada como borrador'}.`,\n      });\n\n      // Abrir modal de acciones post-guardado\n      setShowActionsModal(true);\n      console.log('[DEBUG] Invoice creation onSuccess completed');\n    },\n    onError: (error: any) => {\n      console.error('[ERROR] Invoice creation failed:', error);\n      toast({\n        title: \"Error al crear factura\",\n        description: error.message || \"No se pudo crear la factura\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Funciones utilitarias\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `RD$${num.toFixed(2)}`;\n  };\n\n  const formatDate = (dateStr: string) => {\n    if (!dateStr) return '';\n    // Evitar problemas de zona horaria al parsear fechas ISO\n    const [year, month, day] = dateStr.split('-').map(Number);\n    return new Date(year, month - 1, day).toLocaleDateString('es-DO');\n  };\n\n  // Calcular totales\n  const calculateTotals = (items: InvoiceItemWithService[], discount = currentInvoice.discount) => {\n    const subtotal = items.reduce((acc, item) => {\n      const itemTotal = parseFloat(item.total || '0');\n      return acc + itemTotal;\n    }, 0);\n    \n    const discountAmount = discountData.type === 'percentage' \n      ? subtotal * (discount / 100)\n      : discount;\n    \n    const subtotalWithDiscount = subtotal - discountAmount;\n    const tax = subtotalWithDiscount * 0.18; // ITBIS 18%\n    const total = subtotalWithDiscount + tax;\n    \n    return {\n      subtotal,\n      discount: discountAmount,\n      tax,\n      total: Math.max(0, total)\n    };\n  };\n\n  // Agregar art√≠culo\n  const addItem = (service: Service, serviceType: 'wash' | 'iron' | 'both', quantity: number = 1) => {\n    let unitPrice: number;\n    switch (serviceType) {\n      case 'wash':\n        unitPrice = parseFloat(service.washPrice);\n        break;\n      case 'iron':\n        unitPrice = parseFloat(service.ironPrice);\n        break;\n      case 'both':\n        unitPrice = parseFloat(service.bothPrice);\n        break;\n    }\n\n    const newItem: InvoiceItemWithService = {\n      id: `temp-${Date.now()}`,\n      invoiceId: 'temp',\n      serviceId: service.id,\n      serviceName: service.name,\n      serviceType,\n      quantity,\n      unitPrice: unitPrice.toString(),\n      total: (unitPrice * quantity).toString(),\n      service\n    };\n\n    const newItems = [...currentInvoice.items, newItem];\n    const totals = calculateTotals(newItems);\n    \n    setCurrentInvoice({\n      ...currentInvoice,\n      items: newItems,\n      ...totals\n    });\n  };\n\n  // Eliminar art√≠culo\n  const removeItem = (itemId: string) => {\n    const newItems = currentInvoice.items.filter(item => item.id !== itemId);\n    const totals = calculateTotals(newItems);\n    \n    setCurrentInvoice({\n      ...currentInvoice,\n      items: newItems,\n      ...totals\n    });\n  };\n\n  // Actualizar cantidad de art√≠culo\n  const updateItemQuantity = (itemId: string, newQuantity: number) => {\n    if (newQuantity < 1) return;\n\n    const newItems = currentInvoice.items.map(item => {\n      if (item.id === itemId) {\n        const unitPrice = parseFloat(item.unitPrice);\n        const newTotal = unitPrice * newQuantity;\n        return {\n          ...item,\n          quantity: newQuantity,\n          total: newTotal.toString()\n        };\n      }\n      return item;\n    });\n\n    const totals = calculateTotals(newItems);\n    \n    setCurrentInvoice({\n      ...currentInvoice,\n      items: newItems,\n      ...totals\n    });\n  };\n\n  // Actualizar art√≠culo existente\n  const updateItem = (itemId: string, service: Service, serviceType: 'wash' | 'iron' | 'both', quantity: number) => {\n    let unitPrice: number;\n    switch (serviceType) {\n      case 'wash':\n        unitPrice = parseFloat(service.washPrice);\n        break;\n      case 'iron':\n        unitPrice = parseFloat(service.ironPrice);\n        break;\n      case 'both':\n        unitPrice = parseFloat(service.bothPrice);\n        break;\n    }\n\n    const newItems = currentInvoice.items.map(item => {\n      if (item.id === itemId) {\n        return {\n          ...item,\n          serviceId: service.id,\n          serviceName: service.name,\n          serviceType,\n          quantity,\n          unitPrice: unitPrice.toString(),\n          total: (unitPrice * quantity).toString(),\n          service\n        };\n      }\n      return item;\n    });\n\n    const totals = calculateTotals(newItems);\n    \n    setCurrentInvoice({\n      ...currentInvoice,\n      items: newItems,\n      ...totals\n    });\n  };\n\n  // Seleccionar cliente\n  const selectCustomer = (customer: Customer) => {\n    setCurrentInvoice({\n      ...currentInvoice,\n      customerName: customer.name,\n      customerPhone: customer.phone,\n      customerEmail: customer.email || '',\n    });\n    \n    invoiceForm.setValue('customerName', customer.name);\n    invoiceForm.setValue('customerPhone', customer.phone);\n    invoiceForm.setValue('customerEmail', customer.email || '');\n    \n    setShowCustomerSearchModal(false);\n  };\n\n  // Aplicar descuento\n  const applyDiscount = () => {\n    const totals = calculateTotals(currentInvoice.items, discountData.value);\n    setCurrentInvoice({\n      ...currentInvoice,\n      ...totals\n    });\n    setShowDiscountModal(false);\n  };\n\n  // Resetear formulario\n  const resetForm = () => {\n    setCurrentInvoice({\n      customerName: '',\n      customerPhone: '',\n      customerEmail: '',\n      deliveryDate: '',\n      items: [],\n      subtotal: 0,\n      tax: 0,\n      discount: 0,\n      total: 0,\n      paymentMethodId: '',\n    });\n    \n    // Resetear estados del flujo POS\n    setSelectedPaymentMethod('');\n    setSavedInvoiceId(null);\n    setIsDraft(false);\n    \n    invoiceForm.reset();\n    setDiscountData({ type: 'amount', value: 0, reason: '' });\n  };\n\n  // Guardar pedido como borrador (nuevo flujo estilo Shopify POS)\n  const saveOrderDraft = () => {\n    const formData = invoiceForm.getValues();\n    \n    if (!formData.customerName || !formData.customerPhone || currentInvoice.items.length === 0) {\n      toast({\n        title: \"Campos incompletos\",\n        description: \"Complete todos los campos requeridos y agregue al menos un art√≠culo\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Preparar datos de factura como borrador\n    const invoiceData: InsertInvoice = {\n      number: nextInvoiceNumber?.number || 'FAC-001',\n      customerId: null,\n      customerName: formData.customerName,\n      customerPhone: formData.customerPhone,\n      customerEmail: formData.customerEmail || null,\n      date: new Date(),\n      deliveryDate: formData.deliveryDate ? new Date(formData.deliveryDate) : null,\n      subtotal: currentInvoice.subtotal.toString(),\n      tax: currentInvoice.tax.toString(),\n      total: currentInvoice.total.toString(),\n      paymentMethod: 'pending',\n      paymentReference: null,\n      status: 'received',\n      employeeId: localStorage.getItem('employeeId'),\n      paid: false, // Borrador no pagado\n      delivered: false,\n      cancelledAt: null,\n      cancellationReason: null,\n    };\n\n    const items: InsertInvoiceItem[] = currentInvoice.items.map(item => ({\n      invoiceId: 'temp',\n      serviceId: item.serviceId,\n      serviceName: item.serviceName,\n      serviceType: item.serviceType,\n      quantity: item.quantity,\n      unitPrice: item.unitPrice,\n      total: item.total,\n    }));\n\n    const payload = { invoice: invoiceData, items: items };\n    createInvoiceMutation.mutate(payload);\n  };\n\n  // Procesar pago (nuevo flujo estilo Shopify POS)\n  const processPayment = () => {\n    if (!selectedPaymentMethod) {\n      toast({\n        title: \"M√©todo de pago requerido\",\n        description: \"Seleccione un m√©todo de pago antes de procesar\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const formData = invoiceForm.getValues();\n    \n    if (!formData.customerName || !formData.customerPhone || currentInvoice.items.length === 0) {\n      toast({\n        title: \"Campos incompletos\",\n        description: \"Complete todos los campos requeridos y agregue al menos un art√≠culo\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Preparar datos de factura pagada\n    const invoiceData: InsertInvoice = {\n      number: nextInvoiceNumber?.number || 'FAC-001',\n      customerId: null,\n      customerName: formData.customerName,\n      customerPhone: formData.customerPhone,\n      customerEmail: formData.customerEmail || null,\n      date: new Date(),\n      deliveryDate: formData.deliveryDate ? new Date(formData.deliveryDate) : null,\n      subtotal: currentInvoice.subtotal.toString(),\n      tax: currentInvoice.tax.toString(),\n      total: currentInvoice.total.toString(),\n      paymentMethod: selectedPaymentMethod,\n      paymentReference: null,\n      status: 'received',\n      employeeId: localStorage.getItem('employeeId'),\n      paid: true, // Factura pagada\n      delivered: false,\n      cancelledAt: null,\n      cancellationReason: null,\n    };\n\n    const items: InsertInvoiceItem[] = currentInvoice.items.map(item => ({\n      invoiceId: 'temp',\n      serviceId: item.serviceId,\n      serviceName: item.serviceName,\n      serviceType: item.serviceType,\n      quantity: item.quantity,\n      unitPrice: item.unitPrice,\n      total: item.total,\n    }));\n\n    const payload = { invoice: invoiceData, items: items };\n    createInvoiceMutation.mutate(payload);\n  };\n\n  // Crear factura (funci√≥n original mantenida para compatibilidad)\n  const createInvoice = (paymentMethodCode: string, isPending = false) => {\n    const formData = invoiceForm.getValues();\n    \n    if (!formData.customerName || !formData.customerPhone || currentInvoice.items.length === 0) {\n      toast({\n        title: \"Campos incompletos\",\n        description: \"Complete todos los campos requeridos y agregue al menos un art√≠culo\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Preparar datos de factura (sin items)\n    const invoiceData: InsertInvoice = {\n      number: nextInvoiceNumber?.number || 'FAC-001',\n      customerId: null,\n      customerName: formData.customerName,\n      customerPhone: formData.customerPhone,\n      customerEmail: formData.customerEmail || null,\n      date: new Date(),\n      deliveryDate: formData.deliveryDate ? new Date(formData.deliveryDate) : null,\n      subtotal: currentInvoice.subtotal.toString(),\n      tax: currentInvoice.tax.toString(),\n      total: currentInvoice.total.toString(),\n      paymentMethod: isPending ? 'pending' : paymentMethodCode,\n      paymentReference: null,\n      status: 'received',\n      employeeId: localStorage.getItem('employeeId'),\n      paid: !isPending,\n      delivered: false,\n      cancelledAt: null,\n      cancellationReason: null,\n    };\n\n    // Preparar items de factura\n    const items: InsertInvoiceItem[] = currentInvoice.items.map(item => ({\n      invoiceId: 'temp', // Will be updated by server\n      serviceId: item.serviceId,\n      serviceName: item.serviceName,\n      serviceType: item.serviceType,\n      quantity: item.quantity,\n      unitPrice: item.unitPrice,\n      total: item.total,\n    }));\n\n    // Enviar con la estructura que espera el backend\n    const payload = {\n      invoice: invoiceData,\n      items: items\n    };\n\n    createInvoiceMutation.mutate(payload);\n  };\n\n  // Filtrar clientes para b√∫squeda\n  const filteredCustomers = customers.filter(customer =>\n    customer.name.toLowerCase().includes(customerSearchTerm.toLowerCase()) ||\n    customer.phone.includes(customerSearchTerm)\n  );\n\n  // Obtener categor√≠as √∫nicas de servicios (basado en nombres comunes)\n  const getServiceCategories = () => {\n    const categories = new Set<string>();\n    services.forEach(service => {\n      // Extraer categor√≠a basada en el nombre del servicio\n      const name = service.name.toLowerCase();\n      if (name.includes('pantalon') || name.includes('jean') || name.includes('short')) {\n        categories.add('Pantalones');\n      } else if (name.includes('camisa') || name.includes('blusa') || name.includes('polo')) {\n        categories.add('Camisas');\n      } else if (name.includes('vestido') || name.includes('falda') || name.includes('saco')) {\n        categories.add('Vestidos');\n      } else if (name.includes('ropa interior') || name.includes('calcetines') || name.includes('medias')) {\n        categories.add('Ropa Interior');\n      } else if (name.includes('abrigo') || name.includes('chaqueta') || name.includes('sueter')) {\n        categories.add('Abrigos');\n      } else if (name.includes('cortina') || name.includes('sabana') || name.includes('funda')) {\n        categories.add('Hogar');\n      } else {\n        categories.add('Otros');\n      }\n    });\n    return Array.from(categories).sort();\n  };\n\n  // Filtrar servicios por categor√≠a y b√∫squeda\n  const filteredServices = services.filter(service => {\n    const matchesSearch = service.name.toLowerCase().includes(serviceSearchTerm.toLowerCase());\n    \n    if (selectedCategory === 'all') return matchesSearch;\n    \n    const name = service.name.toLowerCase();\n    const categoryMatch = {\n      'Pantalones': name.includes('pantalon') || name.includes('jean') || name.includes('short'),\n      'Camisas': name.includes('camisa') || name.includes('blusa') || name.includes('polo'),\n      'Vestidos': name.includes('vestido') || name.includes('falda') || name.includes('saco'),\n      'Ropa Interior': name.includes('ropa interior') || name.includes('calcetines') || name.includes('medias'),\n      'Abrigos': name.includes('abrigo') || name.includes('chaqueta') || name.includes('sueter'),\n      'Hogar': name.includes('cortina') || name.includes('sabana') || name.includes('funda'),\n      'Otros': true // Otros incluye todo lo que no est√° en las categor√≠as anteriores\n    };\n    \n    return matchesSearch && categoryMatch[selectedCategory as keyof typeof categoryMatch];\n  });\n\n  // Resetear selecci√≥n cuando cambia la b√∫squeda/categor√≠a\n  const resetItemSelection = () => {\n    setSelectedService(null);\n    setSelectedServiceType('wash');\n    setItemQuantity(1);\n  };\n\n  // Agregar art√≠culo desde la interfaz directa\n  const addItemFromModal = () => {\n    if (!selectedService) return;\n    \n    addItem(selectedService, selectedServiceType, itemQuantity);\n    resetItemSelection();\n  };\n\n  // Actualizar art√≠culo desde el modal de edici√≥n\n  const updateItemFromModal = () => {\n    if (!selectedService || !editingItem) return;\n    \n    updateItem(editingItem.id, selectedService, selectedServiceType, itemQuantity);\n    resetItemSelection();\n    setEditingItem(null);\n    setShowEditItemModal(false);\n  };\n\n  if (customersLoading || servicesLoading || paymentMethodsLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 dark:border-blue-400 mx-auto mb-2\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-card dark:bg-gray-800/50 rounded-2xl dark:shadow-lg tech-glow border border-border dark:border-cyan-500/20 p-6 backdrop-blur-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-14 h-14 bg-gradient-to-br from-cyan-400 to-purple-500 rounded-2xl flex items-center justify-center dark:shadow-lg tech-glow\">\n              <FileText className=\"w-8 h-8 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold text-card-foreground dark:text-white tech-text-glow\">Nueva Factura</h1>\n              <div className=\"flex items-center space-x-4 mt-1\">\n                <span className=\"text-gray-600 dark:text-gray-400\">#{nextInvoiceNumber?.number || 'FAC-001'}</span>\n                <span className=\"text-gray-400\">‚Ä¢</span>\n                <span className=\"text-gray-600 dark:text-gray-400\">{formatDate(new Date().toISOString())}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Panel Principal */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Informaci√≥n del Cliente */}\n          <Card className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-cyan-300 dark:border-cyan-500/30 rounded-xl shadow-sm hover:bg-cyan-50 hover:border-cyan-400 dark:hover:bg-gray-700/50 transition-all duration-300 dark:backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-lg flex items-center justify-center mr-3 tech-glow\">\n                    <User className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <span className=\"text-cyan-700 dark:text-cyan-300 tech-text-glow\">Informaci√≥n del Cliente</span>\n                </div>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setShowCustomerSearchModal(true)}\n                  className=\"tech-button-3d bg-gradient-to-br from-cyan-50 to-blue-50 border-2 border-cyan-300 text-cyan-700 dark:bg-gradient-to-br dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-cyan-300 dark:border-cyan-500/30 hover:from-cyan-100 hover:to-blue-100 hover:border-cyan-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n                  data-testid=\"button-search-customer\"\n                >\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  Buscar Cliente\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div>\n                  <Label htmlFor=\"customerName\">Nombre Completo *</Label>\n                  <Input\n                    id=\"customerName\"\n                    data-testid=\"input-customer-name\"\n                    {...invoiceForm.register('customerName')}\n                    onChange={(e) => {\n                      invoiceForm.setValue('customerName', e.target.value);\n                      setCurrentInvoice({...currentInvoice, customerName: e.target.value});\n                    }}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"customerPhone\">Tel√©fono *</Label>\n                  <Input\n                    id=\"customerPhone\"\n                    data-testid=\"input-customer-phone\"\n                    {...invoiceForm.register('customerPhone')}\n                    onChange={(e) => {\n                      invoiceForm.setValue('customerPhone', e.target.value);\n                      setCurrentInvoice({...currentInvoice, customerPhone: e.target.value});\n                    }}\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-1 gap-4\">\n                <div>\n                  <Label htmlFor=\"customerEmail\">Email (Opcional)</Label>\n                  <Input\n                    id=\"customerEmail\"\n                    type=\"email\"\n                    data-testid=\"input-customer-email\"\n                    {...invoiceForm.register('customerEmail')}\n                    onChange={(e) => {\n                      invoiceForm.setValue('customerEmail', e.target.value);\n                      setCurrentInvoice({...currentInvoice, customerEmail: e.target.value});\n                    }}\n                  />\n                </div>\n                <div>\n                  <Label>Fecha de Entrega</Label>\n                  <Button\n                    variant=\"outline\"\n                    className=\"tech-button-3d w-full justify-start bg-gradient-to-br from-purple-50 to-pink-50 border-2 border-purple-300 text-purple-700 dark:bg-gradient-to-br dark:from-purple-500/20 dark:to-pink-600/20 dark:text-purple-300 dark:border-purple-500/30 hover:from-purple-100 hover:to-pink-100 hover:border-purple-400 dark:hover:from-purple-400/30 dark:hover:to-pink-500/30 transition-all duration-300 tech-glow\"\n                    onClick={() => setShowDateModal(true)}\n                    data-testid=\"button-select-delivery-date\"\n                  >\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    {currentInvoice.deliveryDate ? formatDate(currentInvoice.deliveryDate) : 'Seleccionar fecha'}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Art√≠culos del Pedido */}\n          <Card className=\"bg-white dark:bg-gray-800/50 border-2 border-blue-300 dark:border-blue-500/30 rounded-xl shadow-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center mr-3\">\n                  <Calculator className=\"w-5 h-5 text-white\" />\n                </div>\n                <span className=\"text-blue-700 dark:text-blue-300\">Art√≠culos del Pedido</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* Interfaz directa para agregar art√≠culos */}\n              <div className=\"space-y-4\">\n                {/* Headers de columnas */}\n                <div className=\"hidden md:grid grid-cols-6 gap-4 text-sm font-medium text-gray-600 dark:text-gray-400 pb-2 border-b dark:border-gray-700\">\n                  <div>Art√≠culo</div>\n                  <div>Cantidad</div>\n                  <div className=\"col-span-2\">Servicio</div>\n                  <div>Total</div>\n                  <div></div>\n                </div>\n\n                {/* Fila para agregar nuevo art√≠culo */}\n                <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4 items-center p-3 border-2 border-slate-300 dark:border-slate-500/30 rounded-lg bg-white dark:bg-gray-800/50\">\n                  {/* Dropdown de Art√≠culo */}\n                  <div>\n                    <Select value={selectedService?.id || \"\"} onValueChange={(value) => {\n                      const service = services.find(s => s.id === value);\n                      setSelectedService(service || null);\n                    }}>\n                      <SelectTrigger data-testid=\"select-article\">\n                        <SelectValue placeholder=\"Seleccionar\" />\n                      </SelectTrigger>\n                      <SelectContent className=\"max-h-48\">\n                        {services.map(service => (\n                          <SelectItem key={service.id} value={service.id}>\n                            {service.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Campo de Cantidad */}\n                  <div>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      value={itemQuantity}\n                      onChange={(e) => setItemQuantity(Math.max(1, parseInt(e.target.value) || 1))}\n                      className=\"text-center tech3d-input tech3d-text\"\n                      data-testid=\"input-direct-quantity\"\n                    />\n                  </div>\n\n                  {/* Dropdown de Servicio con precios */}\n                  <div className=\"col-span-2\">\n                    <Select \n                      value={selectedServiceType} \n                      onValueChange={(value: 'wash' | 'iron' | 'both') => setSelectedServiceType(value)}\n                      disabled={!selectedService}\n                    >\n                      <SelectTrigger className=\"tech3d-input tech3d-text\" data-testid=\"select-service-type\">\n                        <SelectValue placeholder=\"Seleccionar servicio\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {selectedService && (\n                          <>\n                            <SelectItem value=\"wash\">\n                              Lavado - {formatCurrency(selectedService.washPrice)}\n                            </SelectItem>\n                            <SelectItem value=\"iron\">\n                              Planchado - {formatCurrency(selectedService.ironPrice)}\n                            </SelectItem>\n                            <SelectItem value=\"both\">\n                              Lavado y Planchado - {formatCurrency(selectedService.bothPrice)}\n                            </SelectItem>\n                          </>\n                        )}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  {/* Total calculado */}\n                  <div className=\"text-right font-bold text-green-600 dark:text-green-400 tech3d-text\">\n                    {selectedService && (\n                      formatCurrency(\n                        parseFloat(\n                          selectedServiceType === 'wash' ? selectedService.washPrice :\n                          selectedServiceType === 'iron' ? selectedService.ironPrice :\n                          selectedService.bothPrice\n                        ) * itemQuantity\n                      )\n                    )}\n                  </div>\n\n                  {/* Bot√≥n para agregar */}\n                  <div>\n                    <Button\n                      onClick={addItemFromModal}\n                      disabled={!selectedService}\n                      size=\"sm\"\n                      variant=\"outline\"\n                      className=\"tech3d-button disabled:opacity-50\"\n                      data-testid=\"button-add-direct\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Lista de art√≠culos agregados */}\n              {currentInvoice.items.length > 0 && (\n                <div className=\"space-y-2 mt-4\">\n                  {currentInvoice.items.map((item) => (\n                    <div key={item.id} className=\"grid grid-cols-1 md:grid-cols-6 gap-4 items-center p-3 tech3d-card\">\n                      {/* Art√≠culo */}\n                      <div className=\"font-medium tech3d-text\">\n                        {item.serviceName}\n                      </div>\n\n                      {/* Cantidad */}\n                      <div className=\"text-center tech3d-text\">\n                        {item.quantity}\n                      </div>\n\n                      {/* Servicio con precio */}\n                      <div className=\"col-span-2\">\n                        <span className=\"tech3d-text-muted\">\n                          {item.serviceType === 'wash' && 'Lavado'}\n                          {item.serviceType === 'iron' && 'Planchado'}\n                          {item.serviceType === 'both' && 'Lavado y Planchado'}\n                          {' - '}{formatCurrency(item.unitPrice)}\n                        </span>\n                      </div>\n\n                      {/* Total */}\n                      <div className=\"text-right font-bold text-green-600 dark:text-green-400 tech3d-text\">\n                        {formatCurrency(item.total)}\n                      </div>\n\n                      {/* Bot√≥n de eliminar */}\n                      <div className=\"text-center\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => removeItem(item.id)}\n                          data-testid={`button-remove-item-${item.id}`}\n                          className=\"tech3d-button-secondary border-red-300 text-red-600 dark:text-red-400 hover:border-red-400\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Panel de Resumen */}\n        <div className=\"space-y-6\">\n          {/* Totales */}\n          <Card className=\"tech-button-3d bg-white dark:bg-gray-800/50 border-2 border-purple-300 dark:border-purple-500/30 rounded-xl shadow-sm hover:bg-purple-50 hover:border-purple-400 dark:hover:bg-gray-700/50 transition-all duration-300 dark:backdrop-blur-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg flex items-center justify-center mr-3 tech-glow\">\n                  <DollarSign className=\"w-5 h-5 text-white\" />\n                </div>\n                <span className=\"text-purple-700 dark:text-purple-300 tech-text-glow\">Resumen</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">Subtotal:</span>\n                  <span data-testid=\"text-subtotal\">{formatCurrency(currentInvoice.subtotal)}</span>\n                </div>\n                {currentInvoice.discount > 0 && (\n                  <div className=\"flex justify-between text-red-600 dark:text-red-400\">\n                    <span>Descuento:</span>\n                    <span data-testid=\"text-discount\">-{formatCurrency(currentInvoice.discount)}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600 dark:text-gray-400\">ITBIS (18%):</span>\n                  <span data-testid=\"text-tax\">{formatCurrency(currentInvoice.tax)}</span>\n                </div>\n                <div className=\"border-t pt-3\">\n                  <div className=\"flex justify-between font-bold text-lg\">\n                    <span>Total:</span>\n                    <span data-testid=\"text-total\">{formatCurrency(currentInvoice.total)}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Secci√≥n de Checkout estilo Shopify POS */}\n              <div className=\"space-y-4 pt-4 border-t\">\n                {/* Bot√≥n aplicar descuento */}\n                <Button\n                  variant=\"outline\"\n                  className=\"tech-button-3d w-full bg-gradient-to-br from-cyan-50 to-blue-50 border-2 border-cyan-300 text-cyan-700 dark:bg-gradient-to-br dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-cyan-300 dark:border-cyan-500/30 hover:from-cyan-100 hover:to-blue-100 hover:border-cyan-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n                  onClick={() => setShowDiscountModal(true)}\n                  data-testid=\"button-apply-discount\"\n                >\n                  <Percent className=\"w-4 h-4 mr-2\" />\n                  Aplicar Descuento\n                </Button>\n                \n                {/* Selector de m√©todo de pago */}\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    M√©todo de Pago\n                  </label>\n                  <select\n                    value={selectedPaymentMethod}\n                    onChange={(e) => setSelectedPaymentMethod(e.target.value)}\n                    className=\"tech-button-3d w-full p-3 bg-gradient-to-br from-slate-50 to-gray-50 border-2 border-slate-300 rounded-md focus:ring-2 focus:ring-cyan-500 focus:border-cyan-400 dark:bg-gradient-to-br dark:from-slate-800/40 dark:to-gray-800/40 dark:border-slate-500/30 dark:text-slate-200 text-slate-700 transition-all duration-300 hover:from-slate-100 hover:to-gray-100 tech-glow\"\n                    data-testid=\"select-payment-method\"\n                  >\n                    <option value=\"\">Seleccionar m√©todo de pago...</option>\n                    {paymentMethods.filter(pm => pm.active).map((method) => (\n                      <option key={method.id} value={method.code}>\n                        {method.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Botones de acci√≥n estilo Shopify POS */}\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {/* Bot√≥n Guardar Pedido - Estilo 3D */}\n                  <Button\n                    variant=\"outline\"\n                    className=\"tech-button-3d h-12 bg-gradient-to-br from-cyan-50 to-blue-50 border-2 border-cyan-300 text-cyan-700 dark:bg-gradient-to-br dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-cyan-300 dark:border-cyan-500/30 hover:from-cyan-100 hover:to-blue-100 hover:border-cyan-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 transform hover:scale-105 tech-glow relative overflow-hidden\"\n                    onClick={saveOrderDraft}\n                    disabled={currentInvoice.items.length === 0 || createInvoiceMutation.isPending || !!savedInvoiceId}\n                    data-testid=\"button-save-order\"\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 transform -translate-x-full hover:translate-x-full transition-transform duration-1000\"></div>\n                    {createInvoiceMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    ) : (\n                      <Save className=\"w-4 h-4 mr-2\" />\n                    )}\n                    Guardar Pedido\n                  </Button>\n\n                  {/* Bot√≥n Procesar Pago */}\n                  <Button\n                    variant=\"outline\"\n                    className=\"tech-button-3d h-12 bg-gradient-to-br from-purple-50 to-pink-50 border-2 border-purple-300 text-purple-700 dark:bg-gradient-to-br dark:from-purple-500/20 dark:to-pink-600/20 dark:text-purple-300 dark:border-purple-500/30 hover:from-purple-100 hover:to-pink-100 hover:border-purple-400 dark:hover:from-purple-400/30 dark:hover:to-pink-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n                    onClick={processPayment}\n                    disabled={currentInvoice.items.length === 0 || !selectedPaymentMethod || createInvoiceMutation.isPending || !!savedInvoiceId}\n                    data-testid=\"button-process-payment\"\n                  >\n                    {createInvoiceMutation.isPending ? (\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    ) : (\n                      <CreditCard className=\"w-4 h-4 mr-2\" />\n                    )}\n                    Procesar Pago\n                  </Button>\n                </div>\n\n                {/* Estado del pedido guardado */}\n                {savedInvoiceId && (\n                  <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg dark:bg-blue-900/20 dark:border-blue-800\">\n                    <div className=\"flex items-center space-x-2\">\n                      <CheckCircle className=\"w-5 h-5 text-blue-600 dark:text-blue-400\" />\n                      <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                        {isDraft ? 'Pedido guardado como borrador' : 'Factura pagada exitosamente'}\n                      </span>\n                    </div>\n                  </div>\n                )}\n\n                {/* Bot√≥n de acciones */}\n                <Button\n                  variant=\"outline\"\n                  className=\"tech-button-3d w-full bg-gradient-to-br from-cyan-50 to-blue-50 border-2 border-cyan-300 text-cyan-700 dark:bg-gradient-to-br dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-cyan-300 dark:border-cyan-500/30 hover:from-cyan-100 hover:to-blue-100 hover:border-cyan-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n                  onClick={() => setShowActionsModal(true)}\n                  disabled={!savedInvoiceId}\n                  data-testid=\"button-invoice-actions\"\n                >\n                  <span className=\"text-lg mr-2\">üöÄ</span>\n                  Acciones de Factura\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Modal de B√∫squeda de Clientes */}\n      <Dialog open={showCustomerSearchModal} onOpenChange={setShowCustomerSearchModal}>\n        <DialogContent className=\"max-w-2xl max-h-96\" data-testid=\"modal-customer-search\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center justify-between\">\n              Base de Clientes\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowCustomerSearchModal(false)}\n              >\n                <X className=\"w-6 h-6\" />\n              </Button>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"relative\">\n              <Search className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n              <Input\n                placeholder=\"Buscar cliente...\"\n                value={customerSearchTerm}\n                onChange={(e) => setCustomerSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-customer-search\"\n              />\n            </div>\n            \n            <div className=\"max-h-64 overflow-y-auto\">\n              <div className=\"space-y-2\">\n                {filteredCustomers.map((customer) => (\n                  <Button\n                    key={customer.id}\n                    variant=\"outline\"\n                    className=\"tech-button-3d w-full p-4 h-auto justify-start text-left bg-gradient-to-br from-blue-50 to-cyan-50 border-2 border-blue-300 text-blue-700 dark:bg-gradient-to-br dark:from-blue-500/20 dark:to-cyan-600/20 dark:text-blue-300 dark:border-blue-500/30 hover:from-blue-100 hover:to-cyan-100 hover:border-blue-400 dark:hover:from-blue-400/30 dark:hover:to-cyan-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n                    onClick={() => selectCustomer(customer)}\n                    data-testid={`button-select-customer-${customer.id}`}\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold\">{customer.name}</h4>\n                        <Badge variant=\"secondary\">{customer.ordersCount || 0} √≥rdenes</Badge>\n                      </div>\n                      <div className=\"space-y-1 text-sm text-gray-600 dark:text-gray-400\">\n                        <div className=\"flex items-center\">\n                          <Phone className=\"w-3 h-3 mr-2\" />\n                          {customer.phone}\n                        </div>\n                        {customer.email && (\n                          <div className=\"flex items-center\">\n                            <Mail className=\"w-3 h-3 mr-2\" />\n                            {customer.email}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Descuento */}\n      <Dialog open={showDiscountModal} onOpenChange={setShowDiscountModal}>\n        <DialogContent className=\"max-w-md\" data-testid=\"modal-discount\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">\n              <Percent className=\"w-12 h-12 text-green-600 dark:text-green-400 mx-auto mb-4\" />\n              Aplicar Descuento\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label className=\"block mb-2\">Tipo de Descuento</Label>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <Button\n                  variant={discountData.type === 'amount' ? 'default' : 'outline'}\n                  onClick={() => setDiscountData({...discountData, type: 'amount'})}\n                  data-testid=\"button-discount-amount\"\n                >\n                  <DollarSign className=\"w-4 h-4 mr-2\" />\n                  Monto Fijo\n                </Button>\n                <Button\n                  variant={discountData.type === 'percentage' ? 'default' : 'outline'}\n                  onClick={() => setDiscountData({...discountData, type: 'percentage'})}\n                  data-testid=\"button-discount-percentage\"\n                >\n                  <Percent className=\"w-4 h-4 mr-2\" />\n                  Porcentaje\n                </Button>\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"discountValue\">\n                Valor del Descuento {discountData.type === 'percentage' ? '(%)' : '(RD$)'}\n              </Label>\n              <Input\n                id=\"discountValue\"\n                type=\"number\"\n                min=\"0\"\n                value={discountData.value}\n                onChange={(e) => setDiscountData({...discountData, value: parseFloat(e.target.value) || 0})}\n                data-testid=\"input-discount-value\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"discountReason\">Motivo (Opcional)</Label>\n              <Input\n                id=\"discountReason\"\n                value={discountData.reason}\n                onChange={(e) => setDiscountData({...discountData, reason: e.target.value})}\n                placeholder=\"Cliente frecuente, promoci√≥n, etc.\"\n                data-testid=\"input-discount-reason\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={() => setShowDiscountModal(false)}\n            >\n              Cancelar\n            </Button>\n            <Button\n              className=\"tech-button-3d flex-1 bg-gradient-to-r from-green-600 to-emerald-700 hover:from-green-500 hover:to-emerald-600 text-white border-0 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 tech-glow\"\n              onClick={applyDiscount}\n              disabled={discountData.value <= 0}\n              data-testid=\"button-apply-discount-confirm\"\n            >\n              Aplicar Descuento\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Fecha de Entrega */}\n      <Dialog open={showDateModal} onOpenChange={setShowDateModal}>\n        <DialogContent className=\"max-w-md\" data-testid=\"modal-delivery-date\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">\n              <Calendar className=\"w-12 h-12 text-blue-600 dark:text-blue-400 mx-auto mb-4\" />\n              Fecha de Entrega\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"deliveryDate\">Fecha de Entrega</Label>\n              <Input\n                id=\"deliveryDate\"\n                type=\"date\"\n                value={selectedDeliveryDate}\n                onChange={(e) => setSelectedDeliveryDate(e.target.value)}\n                min={new Date().toISOString().split('T')[0]}\n                data-testid=\"input-delivery-date\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={() => setShowDateModal(false)}\n            >\n              Cancelar\n            </Button>\n            <Button\n              className=\"flex-1\"\n              onClick={() => {\n                setCurrentInvoice({...currentInvoice, deliveryDate: selectedDeliveryDate});\n                invoiceForm.setValue('deliveryDate', selectedDeliveryDate);\n                setShowDateModal(false);\n              }}\n              data-testid=\"button-confirm-delivery-date\"\n            >\n              Confirmar\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Agregar Art√≠culo - Escalable para muchos servicios */}\n      <Dialog open={showAddItemModal} onOpenChange={(open) => {\n        setShowAddItemModal(open);\n        if (!open) resetItemSelection();\n      }}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-hidden flex flex-col\" data-testid=\"modal-add-item\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">\n              <Plus className=\"w-12 h-12 text-blue-600 dark:text-blue-400 mx-auto mb-4\" />\n              Agregar Art√≠culo\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"flex-1 overflow-hidden space-y-4\">\n            {/* B√∫squeda y Filtros */}\n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"service-search\">Buscar Servicio</Label>\n                <Input\n                  id=\"service-search\"\n                  type=\"text\"\n                  placeholder=\"Buscar por nombre de servicio...\"\n                  value={serviceSearchTerm}\n                  onChange={(e) => setServiceSearchTerm(e.target.value)}\n                  className=\"w-full\"\n                  data-testid=\"input-service-search\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"category-filter\">Categor√≠a</Label>\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger data-testid=\"select-category\">\n                    <SelectValue placeholder=\"Seleccionar categor√≠a\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todas las categor√≠as</SelectItem>\n                    {getServiceCategories().map(category => (\n                      <SelectItem key={category} value={category}>{category}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Lista de Servicios Filtrados */}\n            <div className=\"flex-1 overflow-hidden\">\n              <Label>Servicios ({filteredServices.length})</Label>\n              <div className=\"border rounded-lg h-48 overflow-y-auto mt-2\">\n                {filteredServices.length === 0 ? (\n                  <div className=\"p-4 text-center text-gray-500\">\n                    No se encontraron servicios\n                  </div>\n                ) : (\n                  <div className=\"space-y-1 p-2\">\n                    {filteredServices.map(service => (\n                      <div\n                        key={service.id}\n                        className={`p-3 rounded cursor-pointer transition-colors ${\n                          selectedService?.id === service.id \n                            ? 'bg-blue-100 dark:bg-blue-900 border-blue-300' \n                            : 'hover:bg-gray-50 dark:hover:bg-gray-700'\n                        }`}\n                        onClick={() => setSelectedService(service)}\n                        data-testid={`service-option-${service.id}`}\n                      >\n                        <div className=\"font-medium\">{service.name}</div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          Lavado: {formatCurrency(service.washPrice)} | \n                          Planchado: {formatCurrency(service.ironPrice)} | \n                          Ambos: {formatCurrency(service.bothPrice)}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Configuraci√≥n del Art√≠culo */}\n            {selectedService && (\n              <div className=\"space-y-3 border-t pt-4\">\n                <div>\n                  <Label>Tipo de Servicio</Label>\n                  <Select value={selectedServiceType} onValueChange={(value: 'wash' | 'iron' | 'both') => setSelectedServiceType(value)}>\n                    <SelectTrigger data-testid=\"select-service-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"wash\">Lavado - {formatCurrency(selectedService.washPrice)}</SelectItem>\n                      <SelectItem value=\"iron\">Planchado - {formatCurrency(selectedService.ironPrice)}</SelectItem>\n                      <SelectItem value=\"both\">Lavado y Planchado - {formatCurrency(selectedService.bothPrice)}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Cantidad</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"tech-button-3d bg-gradient-to-br from-red-50 to-pink-50 border-2 border-red-300 text-red-600 dark:bg-gradient-to-br dark:from-red-500/20 dark:to-pink-600/20 dark:text-red-300 dark:border-red-500/30 hover:from-red-100 hover:to-pink-100 hover:border-red-400 dark:hover:from-red-400/30 dark:hover:to-pink-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n                      onClick={() => setItemQuantity(Math.max(1, itemQuantity - 1))}\n                      data-testid=\"button-decrease-quantity\"\n                    >\n                      <Minus className=\"w-4 h-4\" />\n                    </Button>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      value={itemQuantity}\n                      onChange={(e) => setItemQuantity(Math.max(1, parseInt(e.target.value) || 1))}\n                      className=\"w-20 text-center\"\n                      data-testid=\"input-quantity\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      className=\"bg-blue-100 hover:bg-blue-200 border-blue-300 text-blue-700 shadow-md\"\n                      onClick={() => setItemQuantity(itemQuantity + 1)}\n                      data-testid=\"button-increase-quantity\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Vista Previa del Precio */}\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">Total del art√≠culo:</span>\n                    <span className=\"text-lg font-bold text-blue-600 dark:text-blue-400\">\n                      {formatCurrency(\n                        parseFloat(\n                          selectedServiceType === 'wash' ? selectedService.washPrice :\n                          selectedServiceType === 'iron' ? selectedService.ironPrice :\n                          selectedService.bothPrice\n                        ) * itemQuantity\n                      )}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4 border-t\">\n            <Button\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={() => setShowAddItemModal(false)}\n              data-testid=\"button-cancel-add-item\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              className=\"flex-1\"\n              onClick={addItemFromModal}\n              disabled={!selectedService}\n              data-testid=\"button-add-item-confirm\"\n            >\n              Agregar Art√≠culo\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Editar Art√≠culo - Escalable para muchos servicios */}\n      <Dialog open={showEditItemModal} onOpenChange={(open) => {\n        setShowEditItemModal(open);\n        if (!open) {\n          resetItemSelection();\n          setEditingItem(null);\n        }\n      }}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-hidden flex flex-col\" data-testid=\"modal-edit-item\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">\n              <Edit className=\"w-12 h-12 text-green-600 dark:text-green-400 mx-auto mb-4\" />\n              Editar Art√≠culo\n            </DialogTitle>\n            {editingItem && (\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 text-center\">\n                Editando: {editingItem.serviceName}\n              </p>\n            )}\n          </DialogHeader>\n          \n          <div className=\"flex-1 overflow-hidden space-y-4\">\n            {/* B√∫squeda y Filtros */}\n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"edit-service-search\">Buscar Servicio</Label>\n                <Input\n                  id=\"edit-service-search\"\n                  type=\"text\"\n                  placeholder=\"Buscar por nombre de servicio...\"\n                  value={serviceSearchTerm}\n                  onChange={(e) => setServiceSearchTerm(e.target.value)}\n                  className=\"w-full\"\n                  data-testid=\"input-edit-service-search\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"edit-category-filter\">Categor√≠a</Label>\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger data-testid=\"select-edit-category\">\n                    <SelectValue placeholder=\"Seleccionar categor√≠a\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todas las categor√≠as</SelectItem>\n                    {getServiceCategories().map(category => (\n                      <SelectItem key={category} value={category}>{category}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Lista de Servicios Filtrados */}\n            <div className=\"flex-1 overflow-hidden\">\n              <Label>Servicios ({filteredServices.length})</Label>\n              <div className=\"border rounded-lg h-48 overflow-y-auto mt-2\">\n                {filteredServices.length === 0 ? (\n                  <div className=\"p-4 text-center text-gray-500\">\n                    No se encontraron servicios\n                  </div>\n                ) : (\n                  <div className=\"space-y-1 p-2\">\n                    {filteredServices.map(service => (\n                      <div\n                        key={service.id}\n                        className={`p-3 rounded cursor-pointer transition-colors ${\n                          selectedService?.id === service.id \n                            ? 'bg-green-100 dark:bg-green-900 border-green-300' \n                            : 'hover:bg-gray-50 dark:hover:bg-gray-700'\n                        }`}\n                        onClick={() => setSelectedService(service)}\n                        data-testid={`edit-service-option-${service.id}`}\n                      >\n                        <div className=\"font-medium\">{service.name}</div>\n                        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          Lavado: {formatCurrency(service.washPrice)} | \n                          Planchado: {formatCurrency(service.ironPrice)} | \n                          Ambos: {formatCurrency(service.bothPrice)}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Configuraci√≥n del Art√≠culo */}\n            {selectedService && (\n              <div className=\"space-y-3 border-t pt-4\">\n                <div>\n                  <Label>Tipo de Servicio</Label>\n                  <Select value={selectedServiceType} onValueChange={(value: 'wash' | 'iron' | 'both') => setSelectedServiceType(value)}>\n                    <SelectTrigger data-testid=\"select-edit-service-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"wash\">Lavado - {formatCurrency(selectedService.washPrice)}</SelectItem>\n                      <SelectItem value=\"iron\">Planchado - {formatCurrency(selectedService.ironPrice)}</SelectItem>\n                      <SelectItem value=\"both\">Lavado y Planchado - {formatCurrency(selectedService.bothPrice)}</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Cantidad</Label>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"tech-button-3d bg-gradient-to-br from-red-50 to-pink-50 border-2 border-red-300 text-red-600 dark:bg-gradient-to-br dark:from-red-500/20 dark:to-pink-600/20 dark:text-red-300 dark:border-red-500/30 hover:from-red-100 hover:to-pink-100 hover:border-red-400 dark:hover:from-red-400/30 dark:hover:to-pink-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n                      onClick={() => setItemQuantity(Math.max(1, itemQuantity - 1))}\n                      data-testid=\"button-edit-decrease-quantity\"\n                    >\n                      <Minus className=\"w-4 h-4\" />\n                    </Button>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      value={itemQuantity}\n                      onChange={(e) => setItemQuantity(Math.max(1, parseInt(e.target.value) || 1))}\n                      className=\"w-20 text-center\"\n                      data-testid=\"input-edit-quantity\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      size=\"icon\"\n                      className=\"bg-blue-100 hover:bg-blue-200 border-blue-300 text-blue-700 shadow-md\"\n                      onClick={() => setItemQuantity(itemQuantity + 1)}\n                      data-testid=\"button-edit-increase-quantity\"\n                    >\n                      <Plus className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Vista Previa del Precio */}\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"font-medium\">Total del art√≠culo:</span>\n                    <span className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n                      {formatCurrency(\n                        parseFloat(\n                          selectedServiceType === 'wash' ? selectedService.washPrice :\n                          selectedServiceType === 'iron' ? selectedService.ironPrice :\n                          selectedService.bothPrice\n                        ) * itemQuantity\n                      )}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4 border-t\">\n            <Button\n              variant=\"outline\"\n              className=\"tech-button-3d flex-1 bg-gradient-to-br from-gray-50 to-slate-50 border-2 border-gray-300 text-gray-700 dark:bg-gradient-to-br dark:from-gray-500/20 dark:to-slate-600/20 dark:text-gray-300 dark:border-gray-500/30 hover:from-gray-100 hover:to-slate-100 hover:border-gray-400 dark:hover:from-gray-400/30 dark:hover:to-slate-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n              onClick={() => setShowEditItemModal(false)}\n              data-testid=\"button-cancel-edit-item\"\n            >\n              Cancelar\n            </Button>\n            <Button\n              className=\"flex-1 bg-green-600 hover:bg-green-700\"\n              onClick={updateItemFromModal}\n              disabled={!selectedService}\n              data-testid=\"button-update-item-confirm\"\n            >\n              Actualizar Art√≠culo\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Acciones Post-Guardado (Estilo Shopify POS) */}\n      <Dialog open={showActionsModal} onOpenChange={setShowActionsModal}>\n        <DialogContent className=\"max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-blue-100 to-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <CheckCircle className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              {isDraft ? 'Pedido Guardado Exitosamente' : 'Factura Procesada Exitosamente'}\n            </DialogTitle>\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {isDraft \n                  ? 'El pedido ha sido guardado como borrador. Puede procesar el pago m√°s tarde.' \n                  : 'La factura ha sido pagada y procesada correctamente.'}\n              </p>\n              <div className=\"mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg dark:bg-blue-900/20 dark:border-blue-800\">\n                <p className=\"text-lg font-semibold text-blue-800 dark:text-blue-200\">\n                  Total: {formatCurrency(currentInvoice.total)}\n                </p>\n                <p className=\"text-sm text-blue-600 dark:text-blue-300\">\n                  Cliente: {currentInvoice.customerName}\n                </p>\n              </div>\n            </div>\n          </DialogHeader>\n          \n          <div className=\"space-y-3\">\n            {/* Bot√≥n Imprimir */}\n            <Button\n              variant=\"outline\"\n              className=\"tech-button-3d w-full p-4 h-auto justify-start bg-gradient-to-br from-gray-50 to-slate-50 border-2 border-gray-300 text-gray-700 dark:bg-gradient-to-br dark:from-gray-500/20 dark:to-slate-600/20 dark:text-gray-300 dark:border-gray-500/30 hover:from-gray-100 hover:to-slate-100 hover:border-gray-400 dark:hover:from-gray-400/30 dark:hover:to-slate-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n              onClick={() => {\n                window.print();\n                setShowActionsModal(false);\n              }}\n              data-testid=\"button-print-invoice\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-gray-100 rounded-lg\">\n                  <Printer className=\"w-5 h-5 text-gray-700 dark:text-gray-300\" />\n                </div>\n                <div className=\"text-left\">\n                  <div className=\"font-medium text-gray-800 dark:text-gray-200\">Imprimir Recibo</div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">Generar versi√≥n impresa para el cliente</div>\n                </div>\n              </div>\n            </Button>\n\n            {/* Bot√≥n WhatsApp */}\n            <Button\n              variant=\"outline\"\n              className=\"tech-button-3d w-full p-4 h-auto justify-start bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 text-green-700 dark:bg-gradient-to-br dark:from-green-500/20 dark:to-emerald-600/20 dark:text-green-300 dark:border-green-500/30 hover:from-green-100 hover:to-emerald-100 hover:border-green-400 dark:hover:from-green-400/30 dark:hover:to-emerald-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n              onClick={() => {\n                const phoneNumber = currentInvoice.customerPhone.replace(/[^\\d]/g, '');\n                const message = isDraft \n                  ? `¬°Hola ${currentInvoice.customerName}! Hemos recibido tu pedido de lavander√≠a. Total: ${formatCurrency(currentInvoice.total)}. Te notificaremos cuando est√© listo para recoger.`\n                  : `¬°Hola ${currentInvoice.customerName}! Tu pedido de lavander√≠a est√° listo para recoger. Total: ${formatCurrency(currentInvoice.total)}. ${currentInvoice.deliveryDate ? `Fecha de entrega: ${formatDate(currentInvoice.deliveryDate)}` : 'Puedes pasar a recogerlo cuando gustes.'}`;\n                const whatsappUrl = `https://wa.me/1${phoneNumber}?text=${encodeURIComponent(message)}`;\n                window.open(whatsappUrl, '_blank');\n                setShowActionsModal(false);\n              }}\n              disabled={!currentInvoice.customerPhone}\n              data-testid=\"button-whatsapp-invoice\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <MessageCircle className=\"w-5 h-5 text-green-700 dark:text-green-400\" />\n                </div>\n                <div className=\"text-left\">\n                  <div className=\"font-medium text-green-800 dark:text-green-300\">Enviar por WhatsApp</div>\n                  <div className=\"text-sm text-green-600 dark:text-green-400\">\n                    {currentInvoice.customerPhone ? 'Notificar al cliente directamente' : 'Tel√©fono no disponible'}\n                  </div>\n                </div>\n              </div>\n            </Button>\n\n            {/* Bot√≥n Email */}\n            <Button\n              variant=\"outline\"\n              className=\"tech-button-3d w-full p-4 h-auto justify-start bg-gradient-to-br from-blue-50 to-indigo-50 border-2 border-blue-300 text-blue-700 dark:bg-gradient-to-br dark:from-blue-500/20 dark:to-indigo-600/20 dark:text-blue-300 dark:border-blue-500/30 hover:from-blue-100 hover:to-indigo-100 hover:border-blue-400 dark:hover:from-blue-400/30 dark:hover:to-indigo-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n              onClick={() => {\n                const subject = `${isDraft ? 'Pedido Recibido' : 'Factura de Lavander√≠a'} - Billtracky`;\n                const body = isDraft\n                  ? `Estimado/a ${currentInvoice.customerName},%0D%0A%0D%0AHemos recibido su pedido de lavander√≠a.%0D%0A%0D%0ATotal: ${formatCurrency(currentInvoice.total)}%0D%0A%0D%0ALe notificaremos cuando est√© listo para recoger.%0D%0A%0D%0AGracias por confiar en Billtracky.`\n                  : `Estimado/a ${currentInvoice.customerName},%0D%0A%0D%0ASu pedido est√° listo para recoger.%0D%0A%0D%0ATotal: ${formatCurrency(currentInvoice.total)}%0D%0A${currentInvoice.deliveryDate ? `Fecha de entrega: ${formatDate(currentInvoice.deliveryDate)}%0D%0A` : ''}%0D%0AGracias por confiar en Billtracky.`;\n                const mailtoUrl = `mailto:${currentInvoice.customerEmail}?subject=${subject}&body=${body}`;\n                window.location.href = mailtoUrl;\n                setShowActionsModal(false);\n              }}\n              disabled={!currentInvoice.customerEmail}\n              data-testid=\"button-email-invoice\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Mail className=\"w-5 h-5 text-blue-700\" />\n                </div>\n                <div className=\"text-left\">\n                  <div className=\"font-medium text-blue-800\">Enviar por Correo</div>\n                  <div className=\"text-sm text-blue-600 dark:text-blue-400\">\n                    {currentInvoice.customerEmail ? 'Notificar por email' : 'Email no disponible'}\n                  </div>\n                </div>\n              </div>\n            </Button>\n          </div>\n\n          <div className=\"flex space-x-3 pt-4 border-t\">\n            {/* Bot√≥n Nuevo Pedido */}\n            <Button\n              className=\"tech-button-3d flex-1 bg-gradient-to-r from-cyan-600 to-blue-700 hover:from-cyan-500 hover:to-blue-600 text-white border-0 shadow-lg hover:shadow-xl dark:shadow-lg dark:hover:shadow-xl transform hover:scale-105 active:scale-95 transition-all duration-300 tech-glow\"\n              onClick={() => {\n                resetForm();\n                setShowActionsModal(false);\n              }}\n              data-testid=\"button-new-order\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Nuevo Pedido\n            </Button>\n            \n            {/* Bot√≥n Cerrar */}\n            <Button\n              variant=\"outline\"\n              className=\"tech-button-3d flex-1 bg-gradient-to-br from-gray-50 to-slate-50 border-2 border-gray-300 text-gray-700 dark:bg-gradient-to-br dark:from-gray-500/20 dark:to-slate-600/20 dark:text-gray-300 dark:border-gray-500/30 hover:from-gray-100 hover:to-slate-100 hover:border-gray-400 dark:hover:from-gray-400/30 dark:hover:to-slate-500/30 transition-all duration-300 transform hover:scale-105 tech-glow\"\n              onClick={() => setShowActionsModal(false)}\n              data-testid=\"button-close-actions\"\n            >\n              Finalizar\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":77144},"client/src/components/cash-closure.tsx":{"content":"import { useState, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { format } from 'date-fns';\nimport { es } from 'date-fns/locale';\nimport { \n  BarChart3, \n  DollarSign, \n  FileText, \n  Printer, \n  Download, \n  CheckCircle,\n  Clock,\n  CreditCard,\n  Banknote,\n  Landmark,\n  Users,\n  Phone,\n  ArrowLeft,\n  Calendar,\n  Loader2,\n  Calculator,\n  Save,\n  AlertTriangle,\n  TrendingUp,\n  TrendingDown,\n  Edit,\n  Lock\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport type { Invoice, Employee, PaymentMethod } from '@shared/schema';\n\n// Interfaces espec√≠ficas para el cierre de caja\ninterface PaymentSummary {\n  [key: string]: {\n    quantity: number;\n    total: number;\n  };\n}\n\ninterface EmployeeStats {\n  [employeeName: string]: {\n    sales: number;\n    total: number;\n  };\n}\n\ninterface DailySummary {\n  totalInvoices: number;\n  deliveredInvoices: number;\n  pendingInvoices: number;\n  totalRevenue: number;\n  totalSubtotal: number;\n  totalTax: number;\n  totalItems: number;\n  urgentOrders: number;\n  paymentSummary: PaymentSummary;\n  employeeStats: EmployeeStats;\n}\n\ninterface CashClosureProps {\n  onBack: () => void;\n}\n\nexport default function CashClosure({ onBack }: CashClosureProps) {\n  const [selectedDate, setSelectedDate] = useState<string>(\n    new Date().toISOString().split('T')[0]\n  );\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const [modalMessage, setModalMessage] = useState('');\n  const [openingCash, setOpeningCash] = useState<string>('5000');\n  const [countedCash, setCountedCash] = useState<string>('0');\n  const [notes, setNotes] = useState<string>('');\n  const [showCashForm, setShowCashForm] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Obtener datos de facturas para la fecha seleccionada\n  const { data: invoices = [], isLoading: invoicesLoading } = useQuery({\n    queryKey: ['/api/invoices', selectedDate],\n    queryFn: async () => {\n      const response = await fetch('/api/invoices', {\n        headers: {\n          'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n        },\n      });\n      if (!response.ok) throw new Error('Error al cargar facturas');\n      const data = await response.json();\n      \n      // Filtrar por fecha seleccionada\n      return data.filter((invoice: Invoice) => {\n        if (!invoice.date) return false;\n        const invoiceDate = new Date(invoice.date).toISOString().split('T')[0];\n        return invoiceDate === selectedDate;\n      });\n    },\n  });\n\n  // Obtener m√©todos de pago\n  const { data: paymentMethods = [], isLoading: paymentMethodsLoading } = useQuery({\n    queryKey: ['/api/payment-methods'],\n    queryFn: async () => {\n      const response = await fetch('/api/payment-methods', {\n        headers: {\n          'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n        },\n      });\n      if (!response.ok) throw new Error('Error al cargar m√©todos de pago');\n      return response.json();\n    },\n  });\n\n  // Obtener empleados\n  const { data: employees = [], isLoading: employeesLoading } = useQuery({\n    queryKey: ['/api/employees'],\n    queryFn: async () => {\n      const response = await fetch('/api/employees', {\n        headers: {\n          'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n        },\n      });\n      if (!response.ok) throw new Error('Error al cargar empleados');\n      return response.json();\n    },\n  });\n\n  // Obtener cierre de caja existente para la fecha seleccionada\n  const { data: existingClosure, isLoading: closureLoading, refetch: refetchClosure } = useQuery({\n    queryKey: ['/api/cash-closures/by-date', selectedDate],\n    queryFn: async () => {\n      const response = await fetch(`/api/cash-closures/by-date/${selectedDate}`, {\n        headers: {\n          'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n        },\n      });\n      if (response.status === 404) return null;\n      if (!response.ok) throw new Error('Error al cargar cierre de caja');\n      return response.json();\n    },\n    enabled: !!selectedDate,\n  });\n\n  // Mutaci√≥n para crear cierre de caja\n  const createCashClosureMutation = useMutation({\n    mutationFn: async (data: { closingDate: string; openingCash: number; countedCash: number; notes?: string }) => {\n      const response = await fetch('/api/cash-closures', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n        },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Error al crear cierre de caja');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"‚úÖ Cierre de caja creado\",\n        description: \"El cierre de caja se ha registrado correctamente\",\n        duration: 3000,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/cash-closures/by-date', selectedDate] });\n      refetchClosure();\n      setShowCashForm(false);\n      setCountedCash('0');\n      setNotes('');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"‚ùå Error al crear cierre\",\n        description: error.message,\n        variant: \"destructive\",\n        duration: 5000,\n      });\n    },\n  });\n\n  // Calcular resumen diario\n  const dailySummary: DailySummary = useMemo(() => {\n    const deliveredInvoices = invoices.filter((invoice: Invoice) => \n      invoice.status === 'delivered' && invoice.paid\n    );\n    \n    const pendingInvoices = invoices.filter((invoice: Invoice) => \n      !invoice.paid && invoice.status !== 'cancelled'\n    );\n\n    // Resumen por m√©todo de pago\n    const paymentSummary: PaymentSummary = {};\n    paymentMethods.forEach((method: PaymentMethod) => {\n      paymentSummary[method.name] = { quantity: 0, total: 0 };\n    });\n    paymentSummary['Pendiente'] = { quantity: 0, total: 0 };\n\n    deliveredInvoices.forEach((invoice: Invoice) => {\n      const methodName = paymentMethods.find((m: PaymentMethod) => m.code === invoice.paymentMethod)?.name || 'Pendiente';\n      if (paymentSummary[methodName]) {\n        paymentSummary[methodName].quantity++;\n        paymentSummary[methodName].total += parseFloat(invoice.total);\n      }\n    });\n\n    // Estad√≠sticas por empleado\n    const employeeStats: EmployeeStats = {};\n    deliveredInvoices.forEach((invoice: Invoice) => {\n      const employee = employees.find((e: Employee) => e.id === invoice.employeeId);\n      const employeeName = employee?.name || 'Desconocido';\n      \n      if (!employeeStats[employeeName]) {\n        employeeStats[employeeName] = { sales: 0, total: 0 };\n      }\n      employeeStats[employeeName].sales++;\n      employeeStats[employeeName].total += parseFloat(invoice.total);\n    });\n\n    return {\n      totalInvoices: invoices.length,\n      deliveredInvoices: deliveredInvoices.length,\n      pendingInvoices: pendingInvoices.length,\n      totalRevenue: deliveredInvoices.reduce((sum: number, inv: Invoice) => sum + parseFloat(inv.total), 0),\n      totalSubtotal: deliveredInvoices.reduce((sum: number, inv: Invoice) => sum + parseFloat(inv.subtotal), 0),\n      totalTax: deliveredInvoices.reduce((sum: number, inv: Invoice) => sum + parseFloat(inv.tax), 0),\n      totalItems: invoices.length, // Se podr√≠a mejorar con items reales\n      urgentOrders: 0, // Se podr√≠a agregar campo urgente al schema\n      paymentSummary,\n      employeeStats,\n    };\n  }, [invoices, paymentMethods, employees]);\n\n  // Calculate system cash\n  const systemCash = useMemo(() => {\n    if (!paymentMethods.length) return parseFloat(openingCash) || 0;\n    \n    // Find total cash payments\n    const cashMethod = paymentMethods.find((m: PaymentMethod) => m.code === 'cash');\n    if (!cashMethod) return parseFloat(openingCash) || 0;\n    \n    const cashPayments = dailySummary.paymentSummary[cashMethod.name];\n    return (parseFloat(openingCash) || 0) + (cashPayments?.total || 0);\n  }, [openingCash, dailySummary.paymentSummary, paymentMethods]);\n\n  // Calcular varianza\n  const variance = useMemo(() => {\n    const counted = parseFloat(countedCash) || 0;\n    return counted - systemCash;\n  }, [countedCash, systemCash]);\n\n  const formatCurrency = (amount: number): string => {\n    return `RD$${amount.toFixed(2)}`;\n  };\n\n  const handleCreateCashClosure = () => {\n    if (!countedCash || parseFloat(countedCash) < 0) {\n      toast({\n        title: \"‚ùå Error de validaci√≥n\",\n        description: \"Debe ingresar el dinero contado f√≠sicamente\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    createCashClosureMutation.mutate({\n      closingDate: selectedDate,\n      openingCash: parseFloat(openingCash) || 0,\n      countedCash: parseFloat(countedCash),\n      notes: notes || undefined,\n    });\n  };\n\n  const getPaymentMethodIcon = (methodCode: string) => {\n    switch (methodCode) {\n      case 'cash':\n        return <Banknote className=\"w-4 h-4 text-green-600\" />;\n      case 'card':\n        return <CreditCard className=\"w-4 h-4 text-blue-600\" />;\n      case 'transfer':\n        return <Landmark className=\"w-4 h-4 text-indigo-600\" />;\n      case 'mobile_pay':\n        return <Phone className=\"w-4 h-4 text-purple-600\" />;\n      default:\n        return <Clock className=\"w-4 h-4 text-yellow-600\" />;\n    }\n  };\n\n  const getPaymentMethodColor = (methodCode: string) => {\n    switch (methodCode) {\n      case 'cash':\n        return 'bg-green-50 dark:bg-green-900/20 text-green-700 dark:text-green-300 border-green-200 dark:border-green-700';\n      case 'card':\n        return 'bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 border-blue-200 dark:border-blue-700';\n      case 'transfer':\n        return 'bg-indigo-50 dark:bg-indigo-900/20 text-indigo-700 dark:text-indigo-300 border-indigo-200 dark:border-indigo-700';\n      case 'mobile_pay':\n        return 'bg-purple-50 dark:bg-purple-900/20 text-purple-700 dark:text-purple-300 border-purple-200 dark:border-purple-700';\n      default:\n        return 'bg-yellow-50 dark:bg-yellow-900/20 text-yellow-700 dark:text-yellow-300 border-yellow-200 dark:border-yellow-700';\n    }\n  };\n\n  const escapeHtml = (text: string): string => {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  };\n\n  const printCashClosure = () => {\n    const currentEmployee = employees.find((e: Employee) => e.id === localStorage.getItem('employeeId'));\n    \n    const printWindow = window.open('', '_blank');\n    if (!printWindow) return;\n    \n    // Crear contenido HTML completo de forma m√°s simple con escapado de seguridad\n    const htmlContent = `\n      <html>\n        <head>\n          <title>Cierre de Caja - ${escapeHtml(selectedDate)}</title>\n          <style>\n            body { \n              font-family: 'Courier New', monospace; \n              max-width: 350px; \n              margin: 0; \n              padding: 15px; \n              font-size: 12px;\n            }\n            .header { \n              text-align: center; \n              border-bottom: 2px solid #000; \n              padding-bottom: 10px; \n              margin-bottom: 15px; \n            }\n            .section { \n              margin: 12px 0; \n              border-bottom: 1px dashed #ccc;\n              padding-bottom: 8px;\n            }\n            .item { \n              display: flex; \n              justify-content: space-between; \n              margin: 3px 0; \n            }\n            .total { \n              font-weight: bold; \n              font-size: 14px; \n              border-top: 2px solid #000; \n              padding-top: 8px; \n              margin-top: 10px; \n            }\n            .subtitle {\n              font-weight: bold;\n              margin: 8px 0 4px 0;\n              text-decoration: underline;\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"header\">\n            <h2>BILLTRACKY LAVANDER√çA</h2>\n            <h3>CIERRE DE CAJA</h3>\n            <p>Fecha: ${escapeHtml(new Date(selectedDate).toLocaleDateString('es-DO'))}</p>\n            <p>Empleado: ${escapeHtml(currentEmployee?.name || 'Desconocido')}</p>\n            <p>Hora: ${new Date().toLocaleTimeString('es-DO')}</p>\n          </div>\n          \n          <div class=\"section\">\n            <div class=\"subtitle\">RESUMEN GENERAL</div>\n            <div class=\"item\"><span>Total Facturas:</span><span>${dailySummary.totalInvoices}</span></div>\n            <div class=\"item\"><span>Entregadas:</span><span>${dailySummary.deliveredInvoices}</span></div>\n            <div class=\"item\"><span>Pendientes:</span><span>${dailySummary.pendingInvoices}</span></div>\n          </div>\n          \n          <div class=\"section\">\n            <div class=\"subtitle\">M√âTODOS DE PAGO</div>\n            ${Object.entries(dailySummary.paymentSummary)\n              .filter(([_, data]) => data.quantity > 0)\n              .map(([method, data]) => \n                `<div class=\"item\"><span>${escapeHtml(method)} (${data.quantity}):</span><span>${escapeHtml(formatCurrency(data.total))}</span></div>`\n              ).join('')}\n          </div>\n          \n          <div class=\"section\">\n            <div class=\"subtitle\">EMPLEADOS</div>\n            ${Object.entries(dailySummary.employeeStats)\n              .map(([employee, data]) => \n                `<div class=\"item\"><span>${escapeHtml(employee)} (${data.sales}):</span><span>${escapeHtml(formatCurrency(data.total))}</span></div>`\n              ).join('')}\n          </div>\n          \n          <div class=\"total\">\n            <div class=\"item\"><span>TOTAL INGRESOS:</span><span>${formatCurrency(dailySummary.totalRevenue)}</span></div>\n            <div class=\"item\"><span>Subtotal:</span><span>${formatCurrency(dailySummary.totalSubtotal)}</span></div>\n            <div class=\"item\"><span>ITBIS (18%):</span><span>${formatCurrency(dailySummary.totalTax)}</span></div>\n          </div>\n          \n          <div style=\"text-align: center; margin-top: 20px; font-size: 10px;\">\n            <p>Reporte generado por Billtracky</p>\n            <p>${new Date().toLocaleString('es-DO')}</p>\n          </div>\n        </body>\n      </html>\n    `;\n    \n    printWindow.document.write(htmlContent);\n    printWindow.document.close();\n    printWindow.print();\n    \n    setModalMessage('Cierre de caja enviado a impresora correctamente');\n    setShowConfirmModal(true);\n  };\n\n  const exportToExcel = () => {\n    // Crear CSV simple para exportaci√≥n\n    const csvData = [\n      ['CIERRE DE CAJA', selectedDate],\n      [],\n      ['RESUMEN GENERAL'],\n      ['Total Facturas', dailySummary.totalInvoices],\n      ['Entregadas', dailySummary.deliveredInvoices],\n      ['Pendientes', dailySummary.pendingInvoices],\n      [],\n      ['M√âTODOS DE PAGO'],\n      ...Object.entries(dailySummary.paymentSummary)\n        .filter(([_, data]) => data.quantity > 0)\n        .map(([method, data]) => [method, data.quantity, data.total]),\n      [],\n      ['EMPLEADOS'],\n      ...Object.entries(dailySummary.employeeStats)\n        .map(([employee, data]) => [employee, data.sales, data.total]),\n      [],\n      ['TOTALES'],\n      ['Total Ingresos', dailySummary.totalRevenue],\n      ['Subtotal', dailySummary.totalSubtotal],\n      ['ITBIS', dailySummary.totalTax],\n    ];\n\n    const csvContent = csvData.map(row => row.join(',')).join('\\n');\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    \n    link.setAttribute('href', url);\n    link.setAttribute('download', `cierre-caja-${selectedDate}.csv`);\n    link.style.visibility = 'hidden';\n    \n    // Agregar al DOM de forma segura\n    document.body.appendChild(link);\n    \n    try {\n      link.click();\n    } finally {\n      // Cleanup seguro: verificar si el elemento a√∫n est√° en el DOM antes de eliminarlo\n      if (link.parentNode === document.body) {\n        document.body.removeChild(link);\n      }\n      // Liberar la URL del blob para evitar memory leaks\n      URL.revokeObjectURL(url);\n    }\n    \n    setModalMessage('Reporte exportado correctamente');\n    setShowConfirmModal(true);\n  };\n\n  if (invoicesLoading || paymentMethodsLoading || employeesLoading || closureLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-6\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin mr-3\" />\n            <span className=\"text-lg dark:text-gray-200\">Cargando datos del cierre...</span>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header con dise√±o tech 3D mejorado */}\n        <div className=\"tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-slate-200 dark:border-slate-600 rounded-xl shadow-2xl backdrop-blur-sm p-6 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                size=\"sm\"\n                onClick={onBack}\n                className=\"tech-button-3d bg-white border-2 border-slate-300 text-slate-700 dark:from-slate-500/20 dark:to-slate-600/20 dark:text-white dark:border-slate-500/30 rounded-lg shadow-sm p-3 hover:bg-slate-50 hover:border-slate-400 dark:hover:from-slate-400/30 dark:hover:to-slate-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm font-bold mr-3\"\n                data-testid=\"button-back-cash-closure\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Volver\n              </Button>\n              <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-500 via-blue-600 to-purple-600 rounded-xl flex items-center justify-center tech-glow shadow-xl transform hover:scale-105 transition-all duration-300\">\n                <BarChart3 className=\"w-8 h-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-black bg-gradient-to-r from-cyan-600 via-blue-600 to-purple-600 bg-clip-text text-transparent\">Cierre de Caja</h1>\n                <p className=\"text-slate-600 dark:text-slate-300 font-semibold\">Reportes y c√°lculos diarios profesionales</p>\n              </div>\n            </div>\n              \n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-4 w-4 text-gray-500 dark:text-gray-400\" />\n                  <Label htmlFor=\"fecha\" className=\"text-sm font-medium dark:text-gray-300\">\n                    Fecha:\n                  </Label>\n                  <Input\n                    id=\"fecha\"\n                    type=\"date\"\n                    value={selectedDate}\n                    onChange={(e) => setSelectedDate(e.target.value)}\n                    className=\"w-40\"\n                    data-testid=\"input-date-selector\"\n                  />\n                </div>\n                \n                <Button\n                  onClick={printCashClosure}\n                  className=\"tech-button-3d bg-white border-2 border-cyan-300 text-cyan-700 dark:from-cyan-500/20 dark:to-blue-600/20 dark:text-white dark:border-cyan-500/30 rounded-lg shadow-sm p-3 hover:bg-cyan-50 hover:border-cyan-400 dark:hover:from-cyan-400/30 dark:hover:to-blue-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm font-bold\"\n                  data-testid=\"button-print-closure\"\n                >\n                  <Printer className=\"w-4 h-4 mr-2\" />\n                  Imprimir\n                </Button>\n                <Button\n                  onClick={exportToExcel}\n                  className=\"tech-button-3d bg-white border-2 border-purple-300 text-purple-700 dark:from-purple-500/20 dark:to-pink-600/20 dark:text-white dark:border-purple-500/30 rounded-lg shadow-sm p-3 hover:bg-purple-50 hover:border-purple-400 dark:hover:from-purple-400/30 dark:hover:to-pink-500/30 transition-all duration-300 cursor-pointer transform hover:scale-105 hover:-translate-y-1 dark:backdrop-blur-sm font-bold\"\n                  data-testid=\"button-export-closure\"\n                >\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Exportar\n                </Button>\n              </div>\n            </div>\n        </div>\n\n        {/* Estad√≠sticas con dise√±o tech 3D */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <div className=\"tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-cyan-200 dark:border-cyan-500/50 rounded-xl shadow-2xl backdrop-blur-sm p-6 hover:shadow-xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-1\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <p className=\"text-sm font-semibold text-cyan-600 dark:text-cyan-400 mb-2\">üìä Total Facturas</p>\n                <p className=\"text-3xl font-black bg-gradient-to-r from-cyan-600 to-blue-600 bg-clip-text text-transparent\" data-testid=\"stat-total-invoices\">\n                  {dailySummary.totalInvoices}\n                </p>\n              </div>\n              <div className=\"w-14 h-14 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-xl flex items-center justify-center tech-glow shadow-lg\">\n                <FileText className=\"w-7 h-7 text-white\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-green-200 dark:border-green-500/50 rounded-xl shadow-2xl backdrop-blur-sm p-6 hover:shadow-xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-1\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <p className=\"text-sm font-semibold text-green-600 dark:text-green-400 mb-2\">‚úÖ Entregadas</p>\n                <p className=\"text-3xl font-black bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent\" data-testid=\"stat-delivered-invoices\">\n                  {dailySummary.deliveredInvoices}\n                </p>\n              </div>\n              <div className=\"w-14 h-14 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center tech-glow shadow-lg\">\n                <CheckCircle className=\"w-7 h-7 text-white\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-yellow-200 dark:border-yellow-500/50 rounded-xl shadow-2xl backdrop-blur-sm p-6 hover:shadow-xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-1\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <p className=\"text-sm font-semibold text-yellow-600 dark:text-yellow-400 mb-2\">‚è∞ Pendientes</p>\n                <p className=\"text-3xl font-black bg-gradient-to-r from-yellow-600 to-orange-600 bg-clip-text text-transparent\" data-testid=\"stat-pending-invoices\">\n                  {dailySummary.pendingInvoices}\n                </p>\n              </div>\n              <div className=\"w-14 h-14 bg-gradient-to-br from-yellow-500 to-orange-600 rounded-xl flex items-center justify-center tech-glow shadow-lg animate-pulse\">\n                <Clock className=\"w-7 h-7 text-white\" />\n              </div>\n            </div>\n          </div>\n\n          <div className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/30 dark:to-emerald-800/30 border-2 border-green-300 dark:border-green-500/50 rounded-xl shadow-2xl backdrop-blur-sm p-6 hover:shadow-xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 tech-glow\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <div>\n                <p className=\"text-sm font-semibold text-green-600 dark:text-green-400 mb-2\">üí∞ Total Ingresos</p>\n                <p className=\"text-3xl font-black bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent\" data-testid=\"stat-total-revenue\">\n                  {formatCurrency(dailySummary.totalRevenue)}\n                </p>\n              </div>\n              <div className=\"w-14 h-14 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center tech-glow shadow-lg animate-pulse\">\n                <DollarSign className=\"w-7 h-7 text-white\" />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* M√©todos de Pago con dise√±o tech-3D */}\n          <div className=\"tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-blue-200 dark:border-blue-500/50 rounded-xl shadow-2xl backdrop-blur-sm p-6 hover:shadow-xl transition-all duration-300\">\n            <div className=\"flex items-center gap-4 mb-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-xl flex items-center justify-center tech-glow shadow-lg\">\n                <CreditCard className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-black bg-gradient-to-r from-blue-600 via-cyan-600 to-purple-600 bg-clip-text text-transparent\">üí≥ M√©todos de Pago</h3>\n            </div>\n            <div className=\"space-y-3\">\n                {Object.entries(dailySummary.paymentSummary)\n                  .filter(([_, data]) => data.quantity > 0)\n                  .map(([methodName, data]) => {\n                    const method = paymentMethods.find((m: PaymentMethod) => m.name === methodName);\n                    const methodCode = method?.code || 'pending';\n                    \n                    return (\n                      <div key={methodName} className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-gray-700 rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"p-2 rounded-lg bg-gray-100 dark:bg-gray-800\">\n                            {getPaymentMethodIcon(methodCode)}\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-900 dark:text-white\">{methodName}</p>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">{data.quantity} transacciones</p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className=\"font-semibold text-gray-900 dark:text-white\" data-testid={`payment-${methodCode}-total`}>\n                            {formatCurrency(data.total)}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n            </div>\n          </div>\n\n          {/* Rendimiento por Empleado con dise√±o tech-3D */}\n          <div className=\"tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-purple-200 dark:border-purple-500/50 rounded-xl shadow-2xl backdrop-blur-sm p-6 hover:shadow-xl transition-all duration-300\">\n            <div className=\"flex items-center gap-4 mb-6\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center tech-glow shadow-lg\">\n                <Users className=\"w-6 h-6 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-black bg-gradient-to-r from-purple-600 via-pink-600 to-blue-600 bg-clip-text text-transparent\">üë• Rendimiento por Empleado</h3>\n            </div>\n            <div className=\"space-y-3\">\n                {Object.entries(dailySummary.employeeStats).map(([employeeName, stats]) => (\n                  <div key={employeeName} className=\"tech-button-3d bg-gradient-to-r from-white to-slate-50 dark:from-slate-700/50 dark:to-slate-800/50 border border-slate-200 dark:border-slate-600/50 rounded-lg p-4 hover:border-purple-300 dark:hover:border-purple-500/50 transition-all duration-300 transform hover:scale-[1.02] hover:-translate-y-0.5\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-pink-600 rounded-full flex items-center justify-center tech-glow shadow-lg\">\n                        <span className=\"text-white font-black text-lg\">\n                          {employeeName.charAt(0).toUpperCase()}\n                        </span>\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-bold text-slate-800 dark:text-white text-lg\">{employeeName}</p>\n                        <p className=\"text-sm font-semibold text-slate-600 dark:text-slate-400\">{stats.sales} ventas</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-xl font-black bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\" data-testid={`employee-${employeeName}-total`}>\n                          {formatCurrency(stats.total)}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n                {Object.keys(dailySummary.employeeStats).length === 0 && (\n                  <div className=\"tech-button-3d bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/30 dark:to-orange-900/30 border-2 border-yellow-300 dark:border-yellow-500/50 rounded-lg p-6 text-center tech-glow animate-pulse\">\n                    <p className=\"text-yellow-800 dark:text-yellow-300 font-bold text-lg\">‚ö†Ô∏è No hay ventas registradas para esta fecha</p>\n                  </div>\n                )}\n            </div>\n          </div>\n        </div>\n\n        {/* Professional POS-Style Cash Closure Display */}\n        {existingClosure && (\n          <div className=\"max-w-4xl mx-auto mt-8\">\n            {/* Header - Shopify Style */}\n            <div className=\"bg-white dark:bg-gray-800 rounded-t-xl border-2 border-gray-200 dark:border-gray-700 shadow-lg\">\n              <div className=\"px-8 py-6 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-4\">\n                    <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center\">\n                      <CheckCircle className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <div>\n                      <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">Cierre de Caja</h2>\n                      <p className=\"text-gray-600 dark:text-gray-400\">{format(new Date(selectedDate), \"dd 'de' MMMM, yyyy\", { locale: es })}</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">Estado</p>\n                    <span className=\"inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400\">\n                      ‚úÖ Completado\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Opening Cash - Fixed Amount Style */}\n              <div className=\"px-8 py-6 bg-gray-50 dark:bg-gray-800/50 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">üí∞ Dinero de Apertura</h3>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Monto inicial en caja</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"pos-opening-cash\">\n                      {formatCurrency(5000.00)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Payment Methods Breakdown - POS Style */}\n              <div className=\"px-8 py-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-6\">üí≥ Desglose por M√©todo de Pago</h3>\n                <div className=\"space-y-4\">\n                  {Object.entries(dailySummary.paymentSummary).map(([method, data]) => {\n                    const isEffectivo = method.toLowerCase() === 'cash' || method.toLowerCase() === 'efectivo';\n                    return (\n                      <div \n                        key={method} \n                        className={`flex items-center justify-between p-4 rounded-lg border-2 ${\n                          isEffectivo \n                            ? 'bg-green-50 border-green-200 dark:bg-green-900/20 dark:border-green-800' \n                            : 'bg-blue-50 border-blue-200 dark:bg-blue-900/20 dark:border-blue-800'\n                        }`}\n                      >\n                        <div className=\"flex items-center gap-4\">\n                          <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n                            isEffectivo \n                              ? 'bg-green-500 text-white' \n                              : 'bg-blue-500 text-white'\n                          }`}>\n                            {isEffectivo ? 'üíµ' : 'üí≥'}\n                          </div>\n                          <div>\n                            <p className={`font-bold ${\n                              isEffectivo \n                                ? 'text-green-800 dark:text-green-400' \n                                : 'text-blue-800 dark:text-blue-400'\n                            }`}>\n                              {method === 'cash' ? 'Efectivo' : \n                               method === 'tarjeta' ? 'Tarjeta' : \n                               method === 'tansferencia' ? 'Transferencia' : \n                               method}\n                            </p>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              {data.quantity} {data.quantity === 1 ? 'transacci√≥n' : 'transacciones'}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <p className={`text-xl font-bold ${\n                            isEffectivo \n                              ? 'text-green-700 dark:text-green-400' \n                              : 'text-blue-700 dark:text-blue-400'\n                          }`} data-testid={`pos-payment-${method}`}>\n                            {formatCurrency(data.total)}\n                          </p>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Cash Summary - Shopify Style */}\n              <div className=\"px-8 py-6 bg-gray-50 dark:bg-gray-800/50 border-t border-gray-200 dark:border-gray-700\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">üí∞ Efectivo Esperado</p>\n                    <p className=\"text-xl font-bold text-gray-900 dark:text-white\" data-testid=\"pos-expected-cash\">\n                      {formatCurrency(parseFloat(existingClosure.systemCash || '0'))}\n                    </p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">üßÆ Efectivo Contado</p>\n                    <p className=\"text-xl font-bold text-gray-900 dark:text-white\" data-testid=\"pos-counted-cash\">\n                      {formatCurrency(parseFloat(existingClosure.countedCash || '0'))}\n                    </p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">üîÑ Diferencia</p>\n                    <p className={`text-xl font-bold ${\n                      parseFloat(existingClosure.variance || '0') >= 0 \n                        ? 'text-green-600 dark:text-green-400' \n                        : 'text-red-600 dark:text-red-400'\n                    }`} data-testid=\"pos-variance\">\n                      {parseFloat(existingClosure.variance || '0') >= 0 ? '+' : ''}{formatCurrency(parseFloat(existingClosure.variance || '0'))}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Total Sales - Shopify POS Style */}\n              <div className=\"px-8 py-6 bg-blue-600 dark:bg-blue-700 text-white\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-lg font-semibold\">üìä Total de Ventas del D√≠a</h3>\n                    <p className=\"text-blue-100\">Todas las transacciones incluidas</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-3xl font-bold\" data-testid=\"pos-total-sales\">\n                      {formatCurrency(dailySummary.totalRevenue)}\n                    </p>\n                    <p className=\"text-blue-100\">{dailySummary.totalInvoices} {dailySummary.totalInvoices === 1 ? 'factura' : 'facturas'}</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Notes if exist */}\n              {existingClosure.notes && (\n                <div className=\"px-8 py-4 bg-yellow-50 dark:bg-yellow-900/20 border-t border-yellow-200 dark:border-yellow-800\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                      <span className=\"text-white text-xs\">üìù</span>\n                    </div>\n                    <div>\n                      <p className=\"font-semibold text-yellow-800 dark:text-yellow-300 mb-1\">Observaciones</p>\n                      <p className=\"text-yellow-700 dark:text-yellow-200\" data-testid=\"pos-notes\">{existingClosure.notes}</p>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Shopify POS Cash Counting Form */}\n        {!existingClosure && (\n          <div className=\"max-w-4xl mx-auto mt-8\">\n            <div className=\"bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-700 shadow-sm\">\n              <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Cierre de Caja</h2>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">{format(new Date(selectedDate), \"dd 'de' MMMM, yyyy\", { locale: es })}</p>\n                  </div>\n                  <Button\n                    onClick={() => setShowCashForm(!showCashForm)}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm rounded\"\n                    data-testid=\"button-toggle-cash-form\"\n                  >\n                    {showCashForm ? 'Cancelar' : 'Iniciar Conteo'}\n                  </Button>\n                </div>\n              </div>\n\n              {!showCashForm ? (\n                <div className=\"px-6 py-8 text-center bg-gray-50 dark:bg-gray-800\">\n                  <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-700 rounded mx-auto mb-4 flex items-center justify-center\">\n                    <Calculator className=\"h-6 w-6 text-gray-500 dark:text-gray-400\" />\n                  </div>\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">Conteo de Efectivo</h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-6\">\n                    Registre el dinero f√≠sico en caja para completar el cierre del d√≠a\n                  </p>\n                  <Button\n                    onClick={() => setShowCashForm(true)}\n                    className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 text-sm rounded\"\n                    data-testid=\"button-start-counting\"\n                  >\n                    Iniciar Conteo\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"p-8\">\n                  {/* Opening Cash - Editable */}\n                  <div className=\"mb-6\">\n                    <div className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-100 dark:from-green-900/30 dark:to-emerald-800/30 border-2 border-green-300 dark:border-green-500/50 rounded-lg p-6\">\n                      <Label htmlFor=\"opening-cash\" className=\"text-sm font-bold text-green-700 dark:text-green-300 mb-3 flex items-center gap-2\">\n                        üí∞ Dinero de Apertura\n                        <Badge className=\"bg-green-200 text-green-800 dark:bg-green-800/50 dark:text-green-200\">Modificable</Badge>\n                      </Label>\n                      <Input\n                        id=\"opening-cash\"\n                        type=\"number\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        value={openingCash}\n                        onChange={(e) => setOpeningCash(e.target.value)}\n                        placeholder=\"5000.00\"\n                        className=\"text-lg font-bold tech-button-3d\"\n                        data-testid=\"input-opening-cash\"\n                      />\n                      <p className=\"text-xs text-green-600 dark:text-green-400 mt-2\">Dinero inicial en caja al abrir</p>\n                      <div className=\"mt-4 p-3 bg-white dark:bg-green-900/20 rounded border border-green-200 dark:border-green-700\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-green-700 dark:text-green-400\">+ Ventas en Efectivo:</span>\n                          <span className=\"font-medium text-green-800 dark:text-green-300\">\n                            {formatCurrency((dailySummary.paymentSummary.cash?.total || 0))}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm mt-2 pt-2 border-t border-green-200 dark:border-green-700\">\n                          <span className=\"font-semibold text-green-800 dark:text-green-300\">= Total Esperado:</span>\n                          <span className=\"font-bold text-green-900 dark:text-green-200\">\n                            {formatCurrency(systemCash)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Payment Methods Summary - Shopify POS Style */}\n                  <div className=\"mb-6\">\n                    <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">Resumen de Ventas</h3>\n                    <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg divide-y divide-gray-200 dark:divide-gray-700\">\n                      {Object.entries(dailySummary.paymentSummary).map(([method, data]) => {\n                        return (\n                          <div key={method} className=\"px-4 py-3 flex items-center justify-between\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"w-6 h-6 bg-gray-100 dark:bg-gray-700 rounded flex items-center justify-center\">\n                                <span className=\"text-xs\">\n                                  {method === 'cash' || method.toLowerCase() === 'efectivo' ? 'üíµ' : 'üí≥'}\n                                </span>\n                              </div>\n                              <div>\n                                <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                                  {method === 'cash' ? 'Efectivo' : \n                                   method === 'tarjeta' ? 'Tarjeta' : \n                                   method === 'tansferencia' ? 'Transferencia' : \n                                   method}\n                                </p>\n                                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                                  {data.quantity} transacciones\n                                </p>\n                              </div>\n                            </div>\n                            <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n                              {formatCurrency(data.total)}\n                            </p>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n\n                  {/* Cash Counting Input - Shopify POS Style */}\n                  <div className=\"mb-6\">\n                    <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">Conteo de Efectivo</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {/* Cash Counting Input */}\n                      <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                        <label htmlFor=\"counted-cash\" className=\"text-xs text-gray-500 dark:text-gray-400 mb-2 block\">\n                          Dinero f√≠sico contado\n                        </label>\n                        <Input\n                          id=\"counted-cash\"\n                          type=\"number\"\n                          min=\"0\"\n                          step=\"0.01\"\n                          value={countedCash}\n                          onChange={(e) => setCountedCash(e.target.value)}\n                          placeholder=\"0.00\"\n                          className=\"text-xl font-semibold text-center border-0 bg-transparent p-0 focus-visible:ring-0\"\n                          data-testid=\"input-counted-cash\"\n                        />\n                      </div>\n                      \n                      {/* Expected Cash Display */}\n                      <div className=\"bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400 mb-2\">Efectivo esperado</p>\n                        <p className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                          {formatCurrency(systemCash)}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Variance Display - Shopify POS Style */}\n                  <div className=\"mb-6 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">Diferencia</p>\n                        <p className={`text-lg font-semibold ${\n                          variance >= 0 \n                            ? 'text-green-600 dark:text-green-400' \n                            : 'text-red-600 dark:text-red-400'\n                        }`}>\n                          {variance >= 0 ? '+' : ''}{formatCurrency(variance)}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <span className={`inline-flex items-center px-2 py-1 rounded text-xs font-medium ${\n                          Math.abs(variance) < 10 \n                            ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'\n                            : Math.abs(variance) < 50 \n                              ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' \n                              : 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400'\n                        }`}>\n                          {Math.abs(variance) < 10 ? 'OK' : \n                           Math.abs(variance) < 50 ? 'ADVERTENCIA' : \n                           'REVISAR'}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Notes - Shopify POS Style */}\n                  <div className=\"mb-6\">\n                    <label htmlFor=\"notes\" className=\"text-xs text-gray-500 dark:text-gray-400 mb-2 block\">\n                      Observaciones (opcional)\n                    </label>\n                    <textarea\n                      id=\"notes\"\n                      value={notes}\n                      onChange={(e) => setNotes(e.target.value)}\n                      placeholder=\"Agregar observaciones...\"\n                      className=\"w-full p-3 border border-gray-200 dark:border-gray-700 rounded-lg resize-none bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-sm\"\n                      rows={3}\n                      data-testid=\"input-notes\"\n                    />\n                  </div>\n\n                  {/* Action Buttons - Shopify POS Style */}\n                  <div className=\"flex justify-end gap-3 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                    <Button\n                      onClick={() => setShowCashForm(false)}\n                      variant=\"ghost\"\n                      className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n                      data-testid=\"button-cancel-closure\"\n                    >\n                      Cancelar\n                    </Button>\n                    <Button\n                      onClick={handleCreateCashClosure}\n                      disabled={createCashClosureMutation.isPending}\n                      className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 text-sm font-medium\"\n                      data-testid=\"button-create-closure\"\n                    >\n                      {createCashClosureMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                          Guardando...\n                        </>\n                      ) : (\n                        'Completar Cierre'\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Financial Breakdown Section - Shopify POS style */}\n        <div className=\"max-w-4xl mx-auto mt-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-3\">\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <div>\n                  <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">Resumen Financiero</h2>\n                  <p className=\"text-gray-600 dark:text-gray-400 text-sm\">Desglose completo de ingresos del d√≠a</p>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg text-center\">\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">Subtotal</p>\n                  <p className=\"text-xl font-bold text-gray-900 dark:text-white\" data-testid=\"financial-subtotal\">\n                    {formatCurrency(dailySummary.totalSubtotal)}\n                  </p>\n                </div>\n                <div className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg text-center\">\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">ITBIS (18%)</p>\n                  <p className=\"text-xl font-bold text-gray-900 dark:text-white\" data-testid=\"financial-tax\">\n                    {formatCurrency(dailySummary.totalTax)}\n                  </p>\n                </div>\n                <div className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg text-center\">\n                  <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400 mb-2\">Total Ingresos</p>\n                  <p className=\"text-2xl font-bold text-green-600 dark:text-green-400\" data-testid=\"financial-total\">\n                    {formatCurrency(dailySummary.totalRevenue)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Confirmation Modal */}\n        <Dialog open={showConfirmModal} onOpenChange={setShowConfirmModal}>\n          <DialogContent className=\"max-w-md\" data-testid=\"modal-confirmation\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <CheckCircle className=\"h-5 w-5 text-green-600\" />\n                Cierre de Caja\n              </DialogTitle>\n            </DialogHeader>\n            <div className=\"text-center py-4\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <CheckCircle className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <p className=\"text-gray-600 dark:text-gray-300 mb-6\" data-testid=\"modal-message\">{modalMessage}</p>\n              <Button\n                onClick={() => setShowConfirmModal(false)}\n                className=\"w-full\"\n                data-testid=\"button-modal-accept\"\n              >\n                Aceptar\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":55411},"client/src/components/company-config.tsx":{"content":"import { useState } from 'react';\nimport { \n  Building2, \n  Save, \n  X, \n  Check, \n  Mail, \n  Phone, \n  MapPin, \n  Camera, \n  Upload, \n  Settings, \n  AlertCircle, \n  Eye,\n  Clock\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CompanyConfigProps {\n  onBack?: () => void;\n}\n\nexport default function CompanyConfig({ onBack }: CompanyConfigProps) {\n  const [configuracion, setConfiguracion] = useState({\n    nombre: 'CleanWash Lavander√≠a',\n    nombreComercial: 'CleanWash',\n    email: 'admin@cleanwash.com',\n    telefono: '809-555-0123',\n    telefono2: '809-555-0124',\n    direccion: 'Av. Principal #123, Santo Domingo',\n    sucursal: 'Sucursal Centro',\n    ciudad: 'Santo Domingo',\n    provincia: 'Distrito Nacional',\n    codigoPostal: '10101',\n    rnc: '131-12345-6',\n    website: 'www.cleanwash.com',\n    redesSociales: {\n      facebook: '@cleanwashrd',\n      instagram: '@cleanwash_rd',\n      whatsapp: '8095550123'\n    },\n    horarios: {\n      lunes: { apertura: '08:00', cierre: '18:00', activo: true },\n      martes: { apertura: '08:00', cierre: '18:00', activo: true },\n      miercoles: { apertura: '08:00', cierre: '18:00', activo: true },\n      jueves: { apertura: '08:00', cierre: '18:00', activo: true },\n      viernes: { apertura: '08:00', cierre: '18:00', activo: true },\n      sabado: { apertura: '08:00', cierre: '16:00', activo: true },\n      domingo: { apertura: '09:00', cierre: '14:00', activo: false }\n    },\n    configuracionFactura: {\n      mostrarRnc: true,\n      mostrarDireccion: true,\n      mostrarTelefono: true,\n      mostrarEmail: true,\n      mensajePie: 'Gracias por preferirnos - CleanWash Lavander√≠a'\n    }\n  });\n\n  const [activeTab, setActiveTab] = useState('general');\n  const [modalMessage, setModalMessage] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [showPreview, setShowPreview] = useState(false);\n  const [hasChanges, setHasChanges] = useState(false);\n  const [logoPreview, setLogoPreview] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const openModal = (message: string) => {\n    setModalMessage(message);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalMessage('');\n  };\n\n  const updateField = (field: string, value: string) => {\n    setHasChanges(true);\n    setConfiguracion(prev => ({ ...prev, [field]: value }));\n  };\n\n  const updateSocial = (field: string, value: string) => {\n    setHasChanges(true);\n    setConfiguracion(prev => ({\n      ...prev,\n      redesSociales: { ...prev.redesSociales, [field]: value }\n    }));\n  };\n\n  const updateFactura = (field: string, value: boolean | string) => {\n    setHasChanges(true);\n    setConfiguracion(prev => ({\n      ...prev,\n      configuracionFactura: { ...prev.configuracionFactura, [field]: value }\n    }));\n  };\n\n  const updateHorario = (dia: string, campo: string, valor: boolean | string) => {\n    setHasChanges(true);\n    setConfiguracion(prev => ({\n      ...prev,\n      horarios: {\n        ...prev.horarios,\n        [dia]: { ...prev.horarios[dia as keyof typeof prev.horarios], [campo]: valor }\n      }\n    }));\n  };\n\n  const saveConfig = () => {\n    if (!configuracion.nombre || !configuracion.telefono) {\n      toast({\n        title: \"Campos requeridos\",\n        description: \"Complete al menos el nombre y tel√©fono de la empresa.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setHasChanges(false);\n    toast({\n      title: \"Configuraci√≥n guardada\",\n      description: \"Configuraci√≥n actualizada exitosamente.\",\n    });\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"Archivo muy grande\",\n          description: \"El archivo debe ser menor a 5MB.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setLogoPreview(e.target?.result as string);\n        setHasChanges(true);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const diasSemana = {\n    lunes: 'Lunes',\n    martes: 'Martes',\n    miercoles: 'Mi√©rcoles',\n    jueves: 'Jueves',\n    viernes: 'Viernes',\n    sabado: 'S√°bado',\n    domingo: 'Domingo'\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header con dise√±o tech-3D */}\n        <div className=\"tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-slate-200 dark:border-slate-600 rounded-xl shadow-2xl backdrop-blur-sm p-6 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              {onBack && (\n                <Button\n                  onClick={onBack}\n                  className=\"tech3d-button-secondary p-3 mr-3\"\n                  data-testid=\"button-back-company-config\"\n                >\n                  <X className=\"h-4 w-4 mr-2\" />\n                  Volver\n                </Button>\n              )}\n              <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 via-indigo-600 to-purple-600 rounded-xl flex items-center justify-center tech-glow shadow-xl transform hover:scale-105 transition-all duration-300\">\n                <Building2 className=\"w-8 h-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-black bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-600 bg-clip-text text-transparent\">üè¢ Configuraci√≥n de Empresa</h1>\n                <p className=\"text-slate-600 dark:text-slate-300 font-semibold\">Datos generales y configuraci√≥n del negocio</p>\n              </div>\n            </div>\n              \n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={() => setShowPreview(true)}\n                className=\"tech3d-button-secondary p-3\"\n                data-testid=\"button-preview-company\"\n              >\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Vista Previa\n              </Button>\n              <Button\n                onClick={saveConfig}\n                disabled={!hasChanges}\n                className=\"tech3d-button p-3 disabled:opacity-50\"\n                data-testid=\"button-save-company-config\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                Guardar Cambios\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Navegaci√≥n de Pesta√±as con dise√±o tech-3D */}\n        <div className=\"tech3d-panel mb-6\">\n          <div className=\"border-b border-slate-200 dark:border-slate-600\">\n            <nav className=\"flex space-x-4 p-6\">\n              <button\n                onClick={() => setActiveTab('general')}\n                className={`px-4 py-3 ${\n                  activeTab === 'general'\n                    ? 'tech3d-button'\n                    : 'tech3d-button-secondary'\n                }`}\n                data-testid=\"tab-general-config\"\n              >\n                <Building2 className=\"w-4 h-4\" />\n                <span>üè¢ Informaci√≥n General</span>\n              </button>\n              <button\n                onClick={() => setActiveTab('contacto')}\n                className={`px-4 py-3 ${\n                  activeTab === 'contacto'\n                    ? 'tech3d-button'\n                    : 'tech3d-button-secondary'\n                }`}\n                data-testid=\"tab-contact-config\"\n              >\n                <Phone className=\"w-4 h-4\" />\n                <span>üìû Contacto y Ubicaci√≥n</span>\n              </button>\n              <button\n                onClick={() => setActiveTab('horarios')}\n                className={`px-4 py-3 ${\n                  activeTab === 'horarios'\n                    ? 'tech3d-button'\n                    : 'tech3d-button-secondary'\n                }`}\n                data-testid=\"tab-schedule-config\"\n              >\n                <Clock className=\"w-4 h-4\" />\n                <span>‚è∞ Horarios de Atenci√≥n</span>\n              </button>\n              <button\n                onClick={() => setActiveTab('facturacion')}\n                className={`px-4 py-3 ${\n                  activeTab === 'facturacion'\n                    ? 'tech3d-button'\n                    : 'tech3d-button-secondary'\n                }`}\n                data-testid=\"tab-billing-config\"\n              >\n                <Settings className=\"w-4 h-4\" />\n                <span>‚öôÔ∏è Configuraci√≥n de Factura</span>\n              </button>\n            </nav>\n          </div>\n\n          <div className=\"p-6\">\n            {/* General Tab */}\n            {activeTab === 'general' && (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"nombre\">Nombre de la Empresa *</Label>\n                    <Input\n                      id=\"nombre\"\n                      value={configuracion.nombre}\n                      onChange={(e) => updateField('nombre', e.target.value)}\n                      placeholder=\"CleanWash Lavander√≠a S.R.L.\"\n                      className=\"tech3d-input\"\n                      data-testid=\"input-company-name\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"nombreComercial\">Nombre Comercial</Label>\n                    <Input\n                      id=\"nombreComercial\"\n                      value={configuracion.nombreComercial}\n                      onChange={(e) => updateField('nombreComercial', e.target.value)}\n                      placeholder=\"CleanWash\"\n                      className=\"tech3d-input\"\n                      data-testid=\"input-trade-name\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"rnc\">RNC</Label>\n                    <Input\n                      id=\"rnc\"\n                      value={configuracion.rnc}\n                      onChange={(e) => updateField('rnc', e.target.value)}\n                      placeholder=\"131-12345-6\"\n                      className=\"tech3d-input\"\n                      data-testid=\"input-company-rnc\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"website\">Sitio Web</Label>\n                    <Input\n                      id=\"website\"\n                      value={configuracion.website}\n                      onChange={(e) => updateField('website', e.target.value)}\n                      placeholder=\"www.empresa.com\"\n                      className=\"tech3d-input\"\n                      data-testid=\"input-company-website\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Logo de la Empresa</Label>\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-20 h-20 bg-muted dark:bg-gray-700/50 rounded-lg flex items-center justify-center border-2 border-dashed border-muted-foreground/25 dark:border-cyan-500/30\">\n                      {logoPreview ? (\n                        <img src={logoPreview} alt=\"Logo\" className=\"w-full h-full object-contain rounded-lg\" />\n                      ) : (\n                        <Camera className=\"w-8 h-8 text-muted-foreground\" />\n                      )}\n                    </div>\n                    <div>\n                      <input \n                        type=\"file\" \n                        id=\"logo\" \n                        accept=\"image/*\" \n                        onChange={handleFileUpload} \n                        className=\"hidden\" \n                        data-testid=\"input-logo-upload\"\n                      />\n                      <Button variant=\"outline\" asChild>\n                        <label htmlFor=\"logo\" className=\"cursor-pointer\">\n                          <Upload className=\"w-4 h-4 mr-2\" />\n                          Subir Logo\n                        </label>\n                      </Button>\n                      <p className=\"text-xs text-muted-foreground dark:text-gray-400 mt-1\">PNG, JPG hasta 5MB</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Contact Tab */}\n            {activeTab === 'contacto' && (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Principal *</Label>\n                    <div className=\"relative\">\n                      <Mail className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={configuracion.email}\n                        onChange={(e) => updateField('email', e.target.value)}\n                        className=\"pl-10\"\n                        placeholder=\"admin@empresa.com\"\n                        data-testid=\"input-company-email\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"telefono\">Tel√©fono Principal *</Label>\n                    <div className=\"relative\">\n                      <Phone className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n                      <Input\n                        id=\"telefono\"\n                        type=\"tel\"\n                        value={configuracion.telefono}\n                        onChange={(e) => updateField('telefono', e.target.value)}\n                        className=\"pl-10\"\n                        placeholder=\"809-000-0000\"\n                        data-testid=\"input-company-phone\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"telefono2\">Tel√©fono Secundario</Label>\n                    <div className=\"relative\">\n                      <Phone className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n                      <Input\n                        id=\"telefono2\"\n                        type=\"tel\"\n                        value={configuracion.telefono2}\n                        onChange={(e) => updateField('telefono2', e.target.value)}\n                        className=\"pl-10\"\n                        placeholder=\"809-000-0001\"\n                        data-testid=\"input-company-phone2\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"sucursal\">Sucursal</Label>\n                    <Input\n                      id=\"sucursal\"\n                      value={configuracion.sucursal}\n                      onChange={(e) => updateField('sucursal', e.target.value)}\n                      placeholder=\"Sucursal Centro\"\n                      data-testid=\"input-company-branch\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"direccion\">Direcci√≥n Completa</Label>\n                  <div className=\"relative\">\n                    <MapPin className=\"w-4 h-4 absolute left-3 top-3 text-muted-foreground\" />\n                    <Textarea\n                      id=\"direccion\"\n                      value={configuracion.direccion}\n                      onChange={(e) => updateField('direccion', e.target.value)}\n                      className=\"pl-10 min-h-[80px]\"\n                      placeholder=\"Av. Principal #123, Sector Centro\"\n                      data-testid=\"input-company-address\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"ciudad\">Ciudad</Label>\n                    <Input\n                      id=\"ciudad\"\n                      value={configuracion.ciudad}\n                      onChange={(e) => updateField('ciudad', e.target.value)}\n                      placeholder=\"Santo Domingo\"\n                      data-testid=\"input-company-city\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"provincia\">Provincia</Label>\n                    <Input\n                      id=\"provincia\"\n                      value={configuracion.provincia}\n                      onChange={(e) => updateField('provincia', e.target.value)}\n                      placeholder=\"Distrito Nacional\"\n                      data-testid=\"input-company-province\"\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"codigoPostal\">C√≥digo Postal</Label>\n                    <Input\n                      id=\"codigoPostal\"\n                      value={configuracion.codigoPostal}\n                      onChange={(e) => updateField('codigoPostal', e.target.value)}\n                      placeholder=\"10101\"\n                      data-testid=\"input-company-postal\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\">Redes Sociales</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"facebook\">Facebook</Label>\n                      <Input\n                        id=\"facebook\"\n                        value={configuracion.redesSociales.facebook}\n                        onChange={(e) => updateSocial('facebook', e.target.value)}\n                        placeholder=\"@empresa\"\n                        data-testid=\"input-facebook\"\n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"instagram\">Instagram</Label>\n                      <Input\n                        id=\"instagram\"\n                        value={configuracion.redesSociales.instagram}\n                        onChange={(e) => updateSocial('instagram', e.target.value)}\n                        placeholder=\"@empresa\"\n                        data-testid=\"input-instagram\"\n                      />\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"whatsapp\">WhatsApp Business</Label>\n                      <Input\n                        id=\"whatsapp\"\n                        value={configuracion.redesSociales.whatsapp}\n                        onChange={(e) => updateSocial('whatsapp', e.target.value)}\n                        placeholder=\"8095550000\"\n                        data-testid=\"input-whatsapp\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Schedule Tab */}\n            {activeTab === 'horarios' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-4\">Horarios de Atenci√≥n</h3>\n                  <div className=\"space-y-4\">\n                    {Object.entries(configuracion.horarios).map(([dia, horario]) => (\n                      <Card key={dia} className=\"p-4 dark:bg-gray-700/30 dark:border-cyan-500/20 dark:shadow-lg tech-glow\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-24\">\n                            <span className=\"font-medium\">{diasSemana[dia as keyof typeof diasSemana]}</span>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              checked={horario.activo}\n                              onCheckedChange={(checked) => updateHorario(dia, 'activo', checked)}\n                              data-testid={`checkbox-${dia}-active`}\n                            />\n                            <Label className=\"text-sm\">Abierto</Label>\n                          </div>\n                          \n                          {horario.activo && (\n                            <div className=\"flex space-x-4\">\n                              <div>\n                                <Label className=\"text-xs mb-1\">Apertura</Label>\n                                <Input\n                                  type=\"time\"\n                                  value={horario.apertura}\n                                  onChange={(e) => updateHorario(dia, 'apertura', e.target.value)}\n                                  className=\"w-28\"\n                                  data-testid={`input-${dia}-open`}\n                                />\n                              </div>\n                              \n                              <div>\n                                <Label className=\"text-xs mb-1\">Cierre</Label>\n                                <Input\n                                  type=\"time\"\n                                  value={horario.cierre}\n                                  onChange={(e) => updateHorario(dia, 'cierre', e.target.value)}\n                                  className=\"w-28\"\n                                  data-testid={`input-${dia}-close`}\n                                />\n                              </div>\n                            </div>\n                          )}\n                          \n                          {!horario.activo && (\n                            <span className=\"text-destructive text-sm font-medium\">Cerrado</span>\n                          )}\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Billing Tab */}\n            {activeTab === 'facturacion' && (\n              <div className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-4\">Configuraci√≥n de Factura</h3>\n                  \n                  <div className=\"space-y-4\">\n                    <Card className=\"p-4 dark:bg-gray-700/30 dark:border-cyan-500/20 dark:shadow-lg tech-glow\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">Mostrar RNC en facturas</p>\n                          <p className=\"text-sm text-muted-foreground\">Incluir n√∫mero de RNC en las facturas impresas</p>\n                        </div>\n                        <Checkbox\n                          checked={configuracion.configuracionFactura.mostrarRnc}\n                          onCheckedChange={(checked) => updateFactura('mostrarRnc', checked)}\n                          data-testid=\"checkbox-show-rnc\"\n                        />\n                      </div>\n                    </Card>\n                    \n                    <Card className=\"p-4 dark:bg-gray-700/30 dark:border-cyan-500/20 dark:shadow-lg tech-glow\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">Mostrar direcci√≥n en facturas</p>\n                          <p className=\"text-sm text-muted-foreground\">Incluir direcci√≥n completa en las facturas</p>\n                        </div>\n                        <Checkbox\n                          checked={configuracion.configuracionFactura.mostrarDireccion}\n                          onCheckedChange={(checked) => updateFactura('mostrarDireccion', checked)}\n                          data-testid=\"checkbox-show-address\"\n                        />\n                      </div>\n                    </Card>\n                    \n                    <Card className=\"p-4 dark:bg-gray-700/30 dark:border-cyan-500/20 dark:shadow-lg tech-glow\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">Mostrar tel√©fono en facturas</p>\n                          <p className=\"text-sm text-muted-foreground\">Incluir n√∫mero de tel√©fono en las facturas</p>\n                        </div>\n                        <Checkbox\n                          checked={configuracion.configuracionFactura.mostrarTelefono}\n                          onCheckedChange={(checked) => updateFactura('mostrarTelefono', checked)}\n                          data-testid=\"checkbox-show-phone\"\n                        />\n                      </div>\n                    </Card>\n                    \n                    <Card className=\"p-4 dark:bg-gray-700/30 dark:border-cyan-500/20 dark:shadow-lg tech-glow\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">Mostrar email en facturas</p>\n                          <p className=\"text-sm text-muted-foreground\">Incluir email de contacto en las facturas</p>\n                        </div>\n                        <Checkbox\n                          checked={configuracion.configuracionFactura.mostrarEmail}\n                          onCheckedChange={(checked) => updateFactura('mostrarEmail', checked)}\n                          data-testid=\"checkbox-show-email\"\n                        />\n                      </div>\n                    </Card>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"mensajePie\">Mensaje al pie de factura</Label>\n                      <Textarea\n                        id=\"mensajePie\"\n                        value={configuracion.configuracionFactura.mensajePie}\n                        onChange={(e) => updateFactura('mensajePie', e.target.value)}\n                        placeholder=\"Mensaje personalizado para el pie de la factura\"\n                        className=\"min-h-[80px]\"\n                        data-testid=\"input-footer-message\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Confirmation Modal */}\n        <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Configuraci√≥n</DialogTitle>\n            </DialogHeader>\n            <div className=\"py-4\">\n              <p>{modalMessage}</p>\n            </div>\n            <div className=\"flex justify-end\">\n              <Button onClick={closeModal} data-testid=\"button-modal-ok\">\n                Aceptar\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":27945},"client/src/components/whatsapp-config.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { \n  ArrowLeft, \n  Save, \n  MessageCircle, \n  Send, \n  Eye, \n  Copy, \n  RotateCcw, \n  FileText, \n  Clock, \n  CheckCircle, \n  DollarSign, \n  X,\n  Smartphone,\n  Mail\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface MensajeBase {\n  activo: boolean;\n  titulo: string;\n  mensaje: string;\n}\n\ninterface PedidoListo extends MensajeBase {\n  envioAutomatico: boolean;\n  horaEnvio: string;\n}\n\ninterface FacturaWhatsApp extends MensajeBase {\n  incluirDetalles: boolean;\n  formatoDetalles: string;\n}\n\ninterface Recordatorios extends MensajeBase {\n  diasAntes: number;\n}\n\ninterface PagosPendientes extends MensajeBase {\n  diasRecordatorio: number;\n}\n\ninterface ConfiguracionMensajes {\n  pedidoListo: PedidoListo;\n  facturaWhatsApp: FacturaWhatsApp;\n  recordatorios: Recordatorios;\n  pagosPendientes: PagosPendientes;\n}\n\ninterface Variables {\n  [key: string]: string;\n}\n\ninterface TipoMenu {\n  key: keyof ConfiguracionMensajes;\n  label: string;\n  icon: React.ComponentType<{ className?: string }>;\n  color: string;\n}\n\ninterface PlantillasMessages {\n  [key: string]: {\n    [tipo: string]: string;\n  };\n}\n\ninterface WhatsAppConfigProps {\n  onBack?: () => void;\n}\n\nexport default function WhatsAppConfig({ onBack }: WhatsAppConfigProps) {\n  // Fetch WhatsApp config from backend\n  const { data: whatsappConfig, isLoading: isLoadingConfig } = useQuery({\n    queryKey: ['/api/whatsapp-config'],\n    enabled: true\n  });\n  \n  const [isHydrated, setIsHydrated] = useState(false);\n\n  // Mutation to save WhatsApp config\n  const saveConfigMutation = useMutation({\n    mutationFn: (config: any) => apiRequest('PUT', '/api/whatsapp-config', config),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/whatsapp-config'] });\n      toast({\n        title: \"Configuraci√≥n guardada\",\n        description: \"Configuraci√≥n de WhatsApp guardada exitosamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo guardar la configuraci√≥n\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const [configuracion, setConfiguracion] = useState<ConfiguracionMensajes>({\n    pedidoListo: {\n      activo: true,\n      titulo: \"üéâ ¬°Tu pedido est√° listo!\",\n      mensaje: `Hola {cliente_nombre}! üëã\n\n¬°Excelentes noticias! Tu pedido #{factura_numero} est√° listo para recoger.\n\nüìã *Detalles del pedido:*\n‚Ä¢ Fecha de entrega: {fecha_entrega}\n‚Ä¢ Total de prendas: {total_prendas}\n‚Ä¢ Total a pagar: RD$ {total_pagar}\n\nüè™ *Informaci√≥n de recogida:*\n‚Ä¢ Direcci√≥n: {empresa_direccion}\n‚Ä¢ Horario: {empresa_horario}\n‚Ä¢ Tel√©fono: {empresa_telefono}\n\n¬°Gracias por confiar en nosotros! ‚ú®\n\n_{empresa_nombre}_`,\n      envioAutomatico: true,\n      horaEnvio: \"09:00\"\n    },\n    facturaWhatsApp: {\n      activo: true,\n      titulo: \"üìÑ Factura de tu pedido\",\n      mensaje: `Hola {cliente_nombre}! üëã\n\nAqu√≠ tienes la factura de tu pedido #{factura_numero}\n\nüìã *Resumen del pedido:*\n‚Ä¢ Fecha: {fecha_factura}\n‚Ä¢ Prendas: {total_prendas}\n‚Ä¢ Subtotal: RD$ {subtotal}\n‚Ä¢ ITBIS (18%): RD$ {itbis}\n‚Ä¢ *Total: RD$ {total}*\n\nüí≥ *Estado del pago:* {estado_pago}\nüìÖ *Fecha de entrega:* {fecha_entrega}\n\n{detalles_articulos}\n\n¬°Gracias por elegirnos! üôè\n\n_{empresa_nombre}_\nüìç {empresa_direccion}\nüìû {empresa_telefono}`,\n      incluirDetalles: true,\n      formatoDetalles: \"‚Ä¢ {cantidad}x {prenda} - {servicio} - RD$ {precio}\"\n    },\n    recordatorios: {\n      activo: true,\n      diasAntes: 1,\n      titulo: \"‚è∞ Recordatorio de entrega\",\n      mensaje: `Hola {cliente_nombre}! üëã\n\nTe recordamos que ma√±ana {fecha_entrega} es la fecha de entrega de tu pedido #{factura_numero}\n\nüìã *Detalles:*\n‚Ä¢ Total de prendas: {total_prendas}\n‚Ä¢ Total: RD$ {total_pagar}\n‚Ä¢ Estado: {estado_pedido}\n\nüè™ *Horario de atenci√≥n:*\n{empresa_horario}\n\n¬°Te esperamos! üòä\n\n_{empresa_nombre}_`\n    },\n    pagosPendientes: {\n      activo: false,\n      diasRecordatorio: 3,\n      titulo: \"üí∞ Recordatorio de pago pendiente\",\n      mensaje: `Hola {cliente_nombre}! üëã\n\nTienes un pago pendiente por tu pedido #{factura_numero}\n\nüí≥ *Detalles del pago:*\n‚Ä¢ Monto pendiente: RD$ {monto_pendiente}\n‚Ä¢ Fecha del pedido: {fecha_factura}\n‚Ä¢ D√≠as pendiente: {dias_pendiente}\n\nüè™ Puedes realizar el pago en:\nüìç {empresa_direccion}\nüìû {empresa_telefono}\n\n¬°Gracias por tu comprensi√≥n! üôè\n\n_{empresa_nombre}_`\n    }\n  });\n\n  const [tipoMensaje, setTipoMensaje] = useState<keyof ConfiguracionMensajes>('pedidoListo');\n  const [vistaPrevia, setVistaPrevia] = useState<boolean>(false);\n  const [mensajePreview, setMensajePreview] = useState<string>('');\n  const [canalPreview, setCanalPreview] = useState<'whatsapp' | 'email'>('whatsapp');\n  const { toast } = useToast();\n\n  // Sync backend data with local state when loaded (only once to avoid overwriting user edits)\n  useEffect(() => {\n    if (whatsappConfig && typeof whatsappConfig === 'object' && !isHydrated) {\n      setConfiguracion(prev => ({\n        ...prev,\n        pedidoListo: {\n          ...prev.pedidoListo,\n          activo: (whatsappConfig as any).enabled || false,\n          envioAutomatico: (whatsappConfig as any).autoSendOnReady || false\n        }\n      }));\n      setIsHydrated(true);\n    }\n  }, [whatsappConfig, isHydrated]);\n\n  const variables: Variables = {\n    cliente_nombre: \"Mar√≠a Gonz√°lez\",\n    factura_numero: \"FAC-2024-001234\",\n    fecha_entrega: \"15 de Enero, 2024\",\n    fecha_factura: \"12 de Enero, 2024\",\n    total_prendas: \"8\",\n    total_pagar: \"850.00\",\n    total: \"850.00\",\n    subtotal: \"720.34\",\n    itbis: \"129.66\",\n    estado_pago: \"Pagado ‚úÖ\",\n    estado_pedido: \"Listo para entrega\",\n    monto_pendiente: \"425.00\",\n    dias_pendiente: \"3\",\n    empresa_nombre: \"CleanWash Lavander√≠a\",\n    empresa_direccion: \"Av. 27 de Febrero #123, Santo Domingo\",\n    empresa_telefono: \"(809) 555-0123\",\n    empresa_horario: \"Lun-Vie: 8:00 AM - 6:00 PM\\nS√°b: 8:00 AM - 2:00 PM\",\n    detalles_articulos: \"‚Ä¢ 2x Camisa - Lavado y Planchado - RD$ 120.00\\n‚Ä¢ 1x Pantal√≥n - Lavado y Planchado - RD$ 80.00\\n‚Ä¢ 3x Camiseta - Solo Lavado - RD$ 150.00\\n‚Ä¢ 2x Vestido - Completo - RD$ 500.00\"\n  };\n\n  const plantillasMessages: PlantillasMessages = {\n    pedidoListo: {\n      simple: `Hola {cliente_nombre}! Tu pedido #{factura_numero} est√° listo para recoger. Total: RD$ {total_pagar}. {empresa_nombre}`,\n      profesional: `Estimado/a {cliente_nombre}, le informamos que su pedido #{factura_numero} est√° listo para ser retirado. Monto total: RD$ {total_pagar}. Horario: {empresa_horario}. {empresa_nombre}`,\n      amigable: `¬°Hola {cliente_nombre}! üéâ ¬°Tu ropa est√° lista y te qued√≥ incre√≠ble! Pedido #{factura_numero} - Total: RD$ {total_pagar}. ¬°Te esperamos! ‚ú® {empresa_nombre}`\n    },\n    facturaWhatsApp: {\n      simple: `Factura #{factura_numero} - {cliente_nombre}. Total: RD$ {total} - {estado_pago}. {empresa_nombre}`,\n      profesional: `Estimado/a {cliente_nombre}, adjuntamos la factura #{factura_numero} por un monto de RD$ {total}. Estado: {estado_pago}. {empresa_nombre}`,\n      detallado: `Factura #{factura_numero}\\nCliente: {cliente_nombre}\\nPrendas: {total_prendas}\\nSubtotal: RD$ {subtotal}\\nITBIS: RD$ {itbis}\\nTotal: RD$ {total}\\nEstado: {estado_pago}\\n{empresa_nombre}`\n    }\n  };\n\n  const tiposMenu: TipoMenu[] = [\n    { key: 'pedidoListo', label: 'Pedido Listo', icon: CheckCircle, color: 'text-green-600' },\n    { key: 'facturaWhatsApp', label: 'Factura WhatsApp', icon: FileText, color: 'text-blue-600' },\n    { key: 'recordatorios', label: 'Recordatorios', icon: Clock, color: 'text-orange-600' },\n    { key: 'pagosPendientes', label: 'Pagos Pendientes', icon: DollarSign, color: 'text-red-600' }\n  ];\n\n  const reemplazarVariables = (mensaje: string): string => {\n    let resultado = mensaje;\n    Object.keys(variables).forEach(variable => {\n      const regex = new RegExp(`{${variable}}`, 'g');\n      resultado = resultado.replace(regex, variables[variable]);\n    });\n    return resultado;\n  };\n\n  const mostrarVistaPrevia = (): void => {\n    const mensaje = configuracion[tipoMensaje].mensaje;\n    setMensajePreview(reemplazarVariables(mensaje));\n    setVistaPrevia(true);\n  };\n\n  const aplicarPlantilla = (plantilla: string): void => {\n    setConfiguracion({\n      ...configuracion,\n      [tipoMensaje]: {\n        ...configuracion[tipoMensaje],\n        mensaje: plantilla\n      }\n    });\n  };\n\n  const copiarMensaje = (): void => {\n    navigator.clipboard.writeText(mensajePreview);\n    toast({\n      title: \"Copiado\",\n      description: \"Mensaje copiado al portapapeles\",\n    });\n  };\n\n  const enviarPruebaWhatsApp = (): void => {\n    const numeroEjemplo = \"18091234567\";\n    const mensaje = encodeURIComponent(mensajePreview);\n    const url = `https://wa.me/${numeroEjemplo}?text=${mensaje}`;\n    window.open(url, '_blank');\n  };\n\n  const restaurarDefecto = (): void => {\n    toast({\n      title: \"Mensaje restaurado\",\n      description: \"Se ha restaurado el mensaje por defecto\",\n    });\n  };\n\n  const guardarConfiguracion = (): void => {\n    // Map local state to backend schema\n    const backendConfig = {\n      enabled: configuracion.pedidoListo.activo,\n      provider: 'twilio', // Default provider\n      autoSendOnReady: configuracion.pedidoListo.envioAutomatico,\n      retryAttempts: 3,\n      retryDelay: 5,\n    };\n\n    saveConfigMutation.mutate(backendConfig);\n  };\n\n  const updateConfiguracion = (campo: string, valor: any): void => {\n    setConfiguracion({\n      ...configuracion,\n      [tipoMensaje]: {\n        ...configuracion[tipoMensaje],\n        [campo]: valor\n      }\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        {/* Header con dise√±o tech-3D */}\n        <div className=\"tech-button-3d bg-gradient-to-br from-white to-slate-50 dark:from-slate-800 dark:to-slate-900 border-2 border-slate-200 dark:border-slate-600 rounded-xl shadow-2xl backdrop-blur-sm p-6 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              {onBack && (\n                <Button\n                  onClick={onBack}\n                  className=\"tech3d-button-secondary p-3 mr-3\"\n                  data-testid=\"button-back-whatsapp-config\"\n                >\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Volver\n                </Button>\n              )}\n              <div className=\"w-16 h-16 bg-gradient-to-br from-green-500 via-emerald-600 to-teal-600 rounded-xl flex items-center justify-center tech-glow shadow-xl transform hover:scale-105 transition-all duration-300\">\n                <MessageCircle className=\"w-8 h-8 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-black bg-gradient-to-r from-green-600 via-emerald-600 to-teal-600 bg-clip-text text-transparent\">üì± Configuraci√≥n de Mensajes</h1>\n                <p className=\"text-slate-600 dark:text-slate-300 font-semibold\">WhatsApp y notificaciones autom√°ticas</p>\n              </div>\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={guardarConfiguracion}\n                className=\"tech3d-button p-3\"\n                data-testid=\"button-save-whatsapp-config\"\n              >\n                <Save className=\"w-4 h-4 mr-2\" />\n                Guardar Cambios\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Loading State */}\n        {isLoadingConfig ? (\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-32 bg-muted rounded-lg\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n              <div className=\"h-96 bg-muted rounded-lg\"></div>\n              <div className=\"lg:col-span-3 h-96 bg-muted rounded-lg\"></div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            {/* Menu Lateral */}\n          <Card className=\"tech3d-card\">\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Tipos de Mensaje</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              {tiposMenu.map((tipo) => {\n                const IconoTipo = tipo.icon;\n                const getGradientClass = (key: string, isActive: boolean) => {\n                  if (isActive) {\n                    switch (key) {\n                      case 'pedidoListo': return 'bg-gradient-to-r from-green-500 to-emerald-600 text-white border-2 border-green-300 shadow-lg tech-glow';\n                      case 'facturaWhatsApp': return 'bg-gradient-to-r from-blue-500 to-cyan-600 text-white border-2 border-blue-300 shadow-lg tech-glow';\n                      case 'recordatorios': return 'bg-gradient-to-r from-orange-500 to-yellow-600 text-white border-2 border-orange-300 shadow-lg tech-glow';\n                      case 'pagosPendientes': return 'bg-gradient-to-r from-red-500 to-pink-600 text-white border-2 border-red-300 shadow-lg tech-glow';\n                      default: return 'bg-gradient-to-r from-slate-500 to-slate-600 text-white';\n                    }\n                  } else {\n                    switch (key) {\n                      case 'pedidoListo': return 'bg-white border-2 border-slate-300 text-slate-700 dark:from-green-500/20 dark:to-emerald-600/20 dark:text-white dark:border-green-500/30 hover:bg-green-50 hover:border-green-300 dark:hover:from-green-400/30 dark:hover:to-emerald-500/30';\n                      case 'facturaWhatsApp': return 'bg-white border-2 border-slate-300 text-slate-700 dark:from-blue-500/20 dark:to-cyan-600/20 dark:text-white dark:border-blue-500/30 hover:bg-blue-50 hover:border-blue-300 dark:hover:from-blue-400/30 dark:hover:to-cyan-500/30';\n                      case 'recordatorios': return 'bg-white border-2 border-slate-300 text-slate-700 dark:from-orange-500/20 dark:to-yellow-600/20 dark:text-white dark:border-orange-500/30 hover:bg-orange-50 hover:border-orange-300 dark:hover:from-orange-400/30 dark:hover:to-yellow-500/30';\n                      case 'pagosPendientes': return 'bg-white border-2 border-slate-300 text-slate-700 dark:from-red-500/20 dark:to-pink-600/20 dark:text-white dark:border-red-500/30 hover:bg-red-50 hover:border-red-300 dark:hover:from-red-400/30 dark:hover:to-pink-500/30';\n                      default: return 'bg-white border-2 border-slate-300 text-slate-700 hover:bg-slate-50';\n                    }\n                  }\n                };\n                const getEmojiForType = (key: string) => {\n                  switch (key) {\n                    case 'pedidoListo': return '‚úÖ';\n                    case 'facturaWhatsApp': return 'üìÑ';\n                    case 'recordatorios': return '‚è∞';\n                    case 'pagosPendientes': return 'üí∞';\n                    default: return 'üí¨';\n                  }\n                };\n                return (\n                  <button\n                    key={tipo.key}\n                    onClick={() => setTipoMensaje(tipo.key)}\n                    className={`w-full px-4 py-3 flex items-center space-x-3 justify-start ${\n                      tipoMensaje === tipo.key ? 'tech3d-button' : 'tech3d-button-secondary'\n                    }`}\n                    data-testid={`tab-message-${tipo.key}`}\n                  >\n                    <IconoTipo className=\"w-5 h-5\" />\n                    <span className=\"flex-1 text-left\">{getEmojiForType(tipo.key)} {tipo.label}</span>\n                    {configuracion[tipo.key].activo && (\n                      <div className=\"w-3 h-3 rounded-full bg-white animate-pulse shadow-lg\" />\n                    )}\n                  </button>\n                );\n              })}\n\n              {/* Variables Disponibles */}\n              <div className=\"mt-8\">\n                <h4 className=\"tech3d-text text-sm font-semibold mb-3\">Variables Disponibles</h4>\n                <div className=\"space-y-1 max-h-60 overflow-y-auto\">\n                  {Object.keys(variables).map((variable) => (\n                    <button\n                      key={variable}\n                      className=\"tech3d-button-secondary block w-full text-xs px-2 py-1 text-left\"\n                      onClick={() => {\n                        navigator.clipboard.writeText(`{${variable}}`);\n                        toast({\n                          title: \"Variable copiada\",\n                          description: `Variable {${variable}} copiada al portapapeles`,\n                        });\n                      }}\n                      data-testid={`variable-${variable}`}\n                    >\n                      <code>{`{${variable}}`}</code>\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Contenido Principal */}\n          <div className=\"lg:col-span-3 space-y-6\">\n            {/* Configuraci√≥n del Mensaje Actual */}\n            <Card className=\"tech3d-card\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>\n                    {tiposMenu.find(t => t.key === tipoMensaje)?.label}\n                  </CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      checked={configuracion[tipoMensaje].activo}\n                      onCheckedChange={(checked) => updateConfiguracion('activo', checked)}\n                      data-testid={`checkbox-active-${tipoMensaje}`}\n                    />\n                    <Label className=\"text-sm\">Activo</Label>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* T√≠tulo del mensaje */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"titulo\">T√≠tulo del mensaje</Label>\n                  <Input\n                    id=\"titulo\"\n                    value={configuracion[tipoMensaje].titulo}\n                    onChange={(e) => updateConfiguracion('titulo', e.target.value)}\n                    className=\"tech3d-input\"\n                    data-testid=\"input-message-title\"\n                  />\n                </div>\n\n                {/* Configuraciones espec√≠ficas por tipo */}\n                {tipoMensaje === 'pedidoListo' && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        checked={configuracion.pedidoListo.envioAutomatico}\n                        onCheckedChange={(checked) => updateConfiguracion('envioAutomatico', checked)}\n                        data-testid=\"checkbox-auto-send\"\n                      />\n                      <Label className=\"text-sm\">Env√≠o autom√°tico</Label>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"horaEnvio\">Hora de env√≠o</Label>\n                      <Input\n                        id=\"horaEnvio\"\n                        type=\"time\"\n                        value={configuracion.pedidoListo.horaEnvio}\n                        onChange={(e) => updateConfiguracion('horaEnvio', e.target.value)}\n                        className=\"tech3d-input\"\n                        data-testid=\"input-send-time\"\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {tipoMensaje === 'facturaWhatsApp' && (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        checked={configuracion.facturaWhatsApp.incluirDetalles}\n                        onCheckedChange={(checked) => updateConfiguracion('incluirDetalles', checked)}\n                        data-testid=\"checkbox-include-details\"\n                      />\n                      <Label className=\"text-sm\">Incluir detalles de art√≠culos</Label>\n                    </div>\n                    {configuracion.facturaWhatsApp.incluirDetalles && (\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"formatoDetalles\">Formato de detalles</Label>\n                        <Input\n                          id=\"formatoDetalles\"\n                          value={configuracion.facturaWhatsApp.formatoDetalles}\n                          onChange={(e) => updateConfiguracion('formatoDetalles', e.target.value)}\n                          placeholder=\"‚Ä¢ {cantidad}x {prenda} - {servicio} - RD$ {precio}\"\n                          data-testid=\"input-details-format\"\n                        />\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {tipoMensaje === 'recordatorios' && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"diasAntes\">D√≠as antes de la entrega</Label>\n                    <Input\n                      id=\"diasAntes\"\n                      type=\"number\"\n                      value={configuracion.recordatorios.diasAntes}\n                      onChange={(e) => updateConfiguracion('diasAntes', parseInt(e.target.value) || 1)}\n                      min=\"1\"\n                      max=\"7\"\n                      data-testid=\"input-days-before\"\n                    />\n                  </div>\n                )}\n\n                {tipoMensaje === 'pagosPendientes' && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"diasRecordatorio\">D√≠as para recordatorio de pago</Label>\n                    <Input\n                      id=\"diasRecordatorio\"\n                      type=\"number\"\n                      value={configuracion.pagosPendientes.diasRecordatorio}\n                      onChange={(e) => updateConfiguracion('diasRecordatorio', parseInt(e.target.value) || 3)}\n                      min=\"1\"\n                      max=\"30\"\n                      data-testid=\"input-payment-reminder-days\"\n                    />\n                  </div>\n                )}\n\n                {/* Plantillas R√°pidas */}\n                {plantillasMessages[tipoMensaje] && (\n                  <div className=\"space-y-2\">\n                    <Label>Plantillas r√°pidas</Label>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n                      {Object.entries(plantillasMessages[tipoMensaje]).map(([tipo, plantilla]) => (\n                        <Button\n                          key={tipo}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => aplicarPlantilla(plantilla)}\n                          className=\"capitalize\"\n                          data-testid={`template-${tipo}`}\n                        >\n                          {tipo}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Editor de Mensaje */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>Mensaje</Label>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={restaurarDefecto}\n                      data-testid=\"button-restore-default\"\n                    >\n                      <RotateCcw className=\"w-4 h-4 mr-2\" />\n                      Restaurar\n                    </Button>\n                  </div>\n                  <Textarea\n                    value={configuracion[tipoMensaje].mensaje}\n                    onChange={(e) => updateConfiguracion('mensaje', e.target.value)}\n                    rows={12}\n                    className=\"tech3d-input font-mono text-sm\"\n                    placeholder=\"Escribe tu mensaje aqu√≠...\"\n                    data-testid=\"textarea-message-content\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Usa variables como cliente_nombre, factura_numero, total_pagar para personalizar el mensaje\n                  </p>\n                </div>\n\n                {/* Botones de Acci√≥n */}\n                <div className=\"flex flex-wrap gap-3\">\n                  <Button\n                    onClick={mostrarVistaPrevia}\n                    data-testid=\"button-preview-message\"\n                  >\n                    <Eye className=\"w-4 h-4 mr-2\" />\n                    Vista Previa\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          </div>\n        )}\n\n        {/* Modal de Vista Previa */}\n        <Dialog open={vistaPrevia} onOpenChange={setVistaPrevia}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Vista Previa del Mensaje</DialogTitle>\n            </DialogHeader>\n\n            {/* Selector de canal */}\n            <div className=\"flex space-x-2 mb-4\">\n              <Button\n                variant={canalPreview === 'whatsapp' ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setCanalPreview('whatsapp')}\n                data-testid=\"preview-whatsapp\"\n              >\n                <Smartphone className=\"w-4 h-4 mr-2\" />\n                WhatsApp\n              </Button>\n            </div>\n\n            {/* Vista previa WhatsApp */}\n            <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700/30 rounded-lg p-4 mb-4\">\n              <div className=\"flex items-center space-x-2 mb-3\">\n                <MessageCircle className=\"w-5 h-5 text-green-600 dark:text-green-400\" />\n                <span className=\"text-sm font-medium text-green-800 dark:text-green-300\">WhatsApp Preview</span>\n              </div>\n              <div className=\"bg-white dark:bg-gray-800/70 rounded-lg p-3 dark:shadow-sm border border-gray-200 dark:border-cyan-500/30 tech-glow\">\n                <pre className=\"whitespace-pre-wrap text-sm text-foreground font-sans\">\n                  {mensajePreview}\n                </pre>\n                <div className=\"flex justify-end mt-2\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    {new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-3\">\n              <Button\n                variant=\"outline\"\n                onClick={copiarMensaje}\n                data-testid=\"button-copy-message\"\n              >\n                <Copy className=\"w-4 h-4 mr-2\" />\n                Copiar\n              </Button>\n              <Button\n                onClick={enviarPruebaWhatsApp}\n                className=\"bg-green-600 hover:bg-green-700\"\n                data-testid=\"button-test-whatsapp\"\n              >\n                <Send className=\"w-4 h-4 mr-2\" />\n                Enviar Prueba\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":28016},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"billtracky-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => \n    (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1610},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun, Monitor } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function ThemeToggle() {\n  const { setTheme, theme } = useTheme();\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"tech-button-3d\"\n          data-testid=\"theme-toggle\"\n        >\n          <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"bg-card border-border\">\n        <DropdownMenuItem \n          onClick={() => setTheme(\"light\")}\n          className={theme === \"light\" ? \"bg-accent\" : \"\"}\n          data-testid=\"theme-light\"\n        >\n          <Sun className=\"mr-2 h-4 w-4\" />\n          <span>Claro</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"dark\")}\n          className={theme === \"dark\" ? \"bg-accent\" : \"\"}\n          data-testid=\"theme-dark\"\n        >\n          <Moon className=\"mr-2 h-4 w-4\" />\n          <span>Oscuro</span>\n        </DropdownMenuItem>\n        <DropdownMenuItem \n          onClick={() => setTheme(\"system\")}\n          className={theme === \"system\" ? \"bg-accent\" : \"\"}\n          data-testid=\"theme-system\"\n        >\n          <Monitor className=\"mr-2 h-4 w-4\" />\n          <span>Sistema</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1856},"client/src/pages/customers-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Users, UserCheck, UserX, TrendingUp, Crown, Award, Calendar, Send, Eye, DollarSign, ShoppingCart, Clock } from \"lucide-react\";\n\ninterface CustomerOverview {\n  totalCustomers: number;\n  activeCustomers: number;\n  inactiveCustomers: number;\n  avgOrderValue: string;\n}\n\ninterface TopCustomer {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n  totalSpent: string;\n  ordersCount: number;\n}\n\ninterface InactiveCustomer {\n  id: string;\n  name: string;\n  phone: string;\n  email?: string;\n  lastOrderDate: string;\n  daysSinceLastOrder: number;\n}\n\ninterface CustomerStats {\n  customer: {\n    id: string;\n    name: string;\n    phone: string;\n    email?: string;\n  };\n  totalSpent: string;\n  ordersCount: number;\n  avgOrderValue: string;\n  lastOrderAt: string | null;\n  orderDates: string[];\n}\n\nexport default function CustomersDashboard() {\n  const [inactiveDays, setInactiveDays] = useState<number>(30);\n  const [selectedCustomerId, setSelectedCustomerId] = useState<string | null>(null);\n  const [isStatsModalOpen, setIsStatsModalOpen] = useState(false);\n  const { toast } = useToast();\n  \n  // Fetch customer overview metrics\n  const { data: overview, isLoading: overviewLoading } = useQuery<CustomerOverview>({\n    queryKey: [\"/api/customers/overview\"],\n  });\n\n  // Fetch top spending customers  \n  const { data: topSpenders = [], isLoading: spendersLoading, error: spendersError } = useQuery<TopCustomer[]>({\n    queryKey: [\"/api/customers/top-spent\", { limit: 3 }],\n  });\n\n  // Fetch top frequent customers\n  const { data: topFrequent = [], isLoading: frequentLoading, error: frequentError } = useQuery<TopCustomer[]>({\n    queryKey: [\"/api/customers/top-orders\", { limit: 3 }],\n  });\n\n  // Fetch inactive customers based on selected days\n  const { data: inactiveCustomers = [], isLoading: inactiveLoading, error: inactiveError } = useQuery<InactiveCustomer[]>({\n    queryKey: [\"/api/customers/inactive\", { days: inactiveDays }],\n  });\n\n  // Fetch customer stats when modal is opened\n  const { data: customerStats, isLoading: statsLoading, error: statsError } = useQuery<CustomerStats>({\n    queryKey: [`/api/customers/${selectedCustomerId}/stats`],\n    enabled: !!selectedCustomerId && isStatsModalOpen,\n  });\n\n  // Send reminders mutation\n  const sendRemindersMutation = useMutation({\n    mutationFn: async (days: number) => {\n      return apiRequest('/api/messages/send-inactive', {\n        method: 'POST',\n        body: { days }\n      });\n    },\n    onSuccess: (result: any) => {\n      const { summary } = result;\n      toast({\n        title: \"Recordatorios enviados\",\n        description: `Se enviaron ${summary.sent} recordatorios de ${summary.attempted} clientes`,\n      });\n      // Invalidate the inactive customers query to refresh the list\n      queryClient.invalidateQueries({ queryKey: ['/api/customers/inactive', { days: inactiveDays }] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudieron enviar los recordatorios\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const openStatsModal = (customerId: string) => {\n    setSelectedCustomerId(customerId);\n    setIsStatsModalOpen(true);\n  };\n\n  const closeStatsModal = () => {\n    setIsStatsModalOpen(false);\n    setSelectedCustomerId(null);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6 space-y-8\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-cyan-600 to-blue-600 dark:from-cyan-800 dark:to-blue-800 rounded-xl p-6 text-white\">\n        <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-dashboard-title\">\n          Centro de Inteligencia de Clientes\n        </h1>\n        <p className=\"text-cyan-100 dark:text-cyan-200\">\n          M√©tricas empresariales y an√°lisis de clientes para optimizar tu negocio\n        </p>\n      </div>\n\n      {/* KPIs Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {/* Total Customers */}\n        <Card className=\"tech-button-3d bg-gradient-to-br from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 border-2 border-blue-300 dark:border-blue-500/30 rounded-xl\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\" data-testid=\"header-total-customers\">\n            <CardTitle className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">\n              Total de Clientes\n            </CardTitle>\n            <Users className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            {overviewLoading ? (\n              <div className=\"animate-pulse\">\n                <div className=\"h-8 bg-blue-200 rounded w-16\"></div>\n              </div>\n            ) : (\n              <div className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\" data-testid=\"text-total-customers\">\n                {overview?.totalCustomers || 0}\n              </div>\n            )}\n            <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n              Base total de clientes\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Active Customers */}\n        <Card className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border-2 border-green-300 dark:border-green-500/30 rounded-xl\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\" data-testid=\"header-active-customers\">\n            <CardTitle className=\"text-sm font-medium text-green-700 dark:text-green-300\">\n              Clientes Activos\n            </CardTitle>\n            <UserCheck className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            {overviewLoading ? (\n              <div className=\"animate-pulse\">\n                <div className=\"h-8 bg-green-200 rounded w-16\"></div>\n              </div>\n            ) : (\n              <div className=\"text-2xl font-bold text-green-700 dark:text-green-300\" data-testid=\"text-active-customers\">\n                {overview?.activeCustomers || 0}\n              </div>\n            )}\n            <p className=\"text-xs text-green-600 dark:text-green-400\">\n              √öltimos 30 d√≠as\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Inactive Customers */}\n        <Card className=\"tech-button-3d bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20 border-2 border-orange-300 dark:border-orange-500/30 rounded-xl\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\" data-testid=\"header-inactive-customers\">\n            <CardTitle className=\"text-sm font-medium text-orange-700 dark:text-orange-300\">\n              Clientes Inactivos\n            </CardTitle>\n            <UserX className=\"h-4 w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent>\n            {overviewLoading ? (\n              <div className=\"animate-pulse\">\n                <div className=\"h-8 bg-orange-200 rounded w-16\"></div>\n              </div>\n            ) : (\n              <div className=\"text-2xl font-bold text-orange-700 dark:text-orange-300\" data-testid=\"text-inactive-customers\">\n                {overview?.inactiveCustomers || 0}\n              </div>\n            )}\n            <p className=\"text-xs text-orange-600 dark:text-orange-400\">\n              M√°s de 30 d√≠as sin √≥rdenes\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Average Order Value */}\n        <Card className=\"tech-button-3d bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border-2 border-purple-300 dark:border-purple-500/30 rounded-xl\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\" data-testid=\"header-avg-order-value\">\n            <CardTitle className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">\n              Valor Promedio\n            </CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n          </CardHeader>\n          <CardContent>\n            {overviewLoading ? (\n              <div className=\"animate-pulse\">\n                <div className=\"h-8 bg-purple-200 rounded w-20\"></div>\n              </div>\n            ) : (\n              <div className=\"text-2xl font-bold text-purple-700 dark:text-purple-300\" data-testid=\"text-avg-order-value\">\n                ${overview?.avgOrderValue || \"0.00\"}\n              </div>\n            )}\n            <p className=\"text-xs text-purple-600 dark:text-purple-400\">\n              Por orden pagada\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Top Rankings */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n        {/* Top Spenders */}\n        <Card className=\"tech-button-3d bg-gradient-to-br from-yellow-50 to-amber-50 dark:from-yellow-900/20 dark:to-amber-900/20 border-2 border-yellow-300 dark:border-yellow-500/30 rounded-xl\">\n          <CardHeader data-testid=\"header-top-spenders\">\n            <CardTitle className=\"flex items-center text-yellow-700 dark:text-yellow-300\">\n              <Crown className=\"w-5 h-5 mr-2\" />\n              Top 3 - Clientes que M√°s Gastan\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {spendersLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"animate-pulse flex items-center space-x-4\">\n                    <div className=\"w-8 h-8 bg-yellow-200 rounded-full\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-yellow-200 rounded w-3/4\"></div>\n                      <div className=\"h-3 bg-yellow-200 rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {topSpenders.map((customer, index) => (\n                  <div key={customer.id} className=\"flex items-center justify-between p-3 bg-yellow-100 dark:bg-yellow-900/20 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge \n                        variant={index === 0 ? \"default\" : \"secondary\"} \n                        className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${\n                          index === 0 ? \"bg-yellow-500 text-white\" : \n                          index === 1 ? \"bg-gray-400 text-white\" : \n                          \"bg-amber-600 text-white\"\n                        }`}\n                        data-testid={`badge-top-spender-${index + 1}`}\n                      >\n                        {index + 1}\n                      </Badge>\n                      <div>\n                        <p className=\"font-medium text-yellow-700 dark:text-yellow-300\" data-testid={`text-spender-name-${index + 1}`}>\n                          {customer.name}\n                        </p>\n                        <p className=\"text-sm text-yellow-600 dark:text-yellow-400\">\n                          {customer.ordersCount} √≥rdenes\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-yellow-700 dark:text-yellow-300\" data-testid={`text-spender-amount-${index + 1}`}>\n                          ${customer.totalSpent}\n                        </p>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => openStatsModal(customer.id)}\n                        className=\"border-yellow-300 text-yellow-700 hover:bg-yellow-50 dark:border-yellow-500 dark:text-yellow-300 dark:hover:bg-yellow-900/20\"\n                        data-testid={`button-stats-spender-${index + 1}`}\n                      >\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n                {spendersError && (\n                  <p className=\"text-center text-red-600 dark:text-red-400 py-4\" data-testid=\"error-top-spenders\">\n                    Error al cargar datos de clientes\n                  </p>\n                )}\n                {!spendersLoading && !spendersError && topSpenders.length === 0 && (\n                  <p className=\"text-center text-yellow-600 dark:text-yellow-400 py-4\" data-testid=\"empty-top-spenders\">\n                    No hay datos de clientes disponibles\n                  </p>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Top Frequent */}\n        <Card className=\"tech-button-3d bg-gradient-to-br from-indigo-50 to-blue-50 dark:from-indigo-900/20 dark:to-blue-900/20 border-2 border-indigo-300 dark:border-indigo-500/30 rounded-xl\">\n          <CardHeader data-testid=\"header-top-frequent\">\n            <CardTitle className=\"flex items-center text-indigo-700 dark:text-indigo-300\">\n              <Award className=\"w-5 h-5 mr-2\" />\n              Top 3 - Clientes M√°s Frecuentes\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {frequentLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3].map((i) => (\n                  <div key={i} className=\"animate-pulse flex items-center space-x-4\">\n                    <div className=\"w-8 h-8 bg-indigo-200 rounded-full\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-indigo-200 rounded w-3/4\"></div>\n                      <div className=\"h-3 bg-indigo-200 rounded w-1/2\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {topFrequent.map((customer, index) => (\n                  <div key={customer.id} className=\"flex items-center justify-between p-3 bg-indigo-100 dark:bg-indigo-900/20 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge \n                        variant={index === 0 ? \"default\" : \"secondary\"} \n                        className={`w-6 h-6 rounded-full flex items-center justify-center text-xs font-bold ${\n                          index === 0 ? \"bg-indigo-500 text-white\" : \n                          index === 1 ? \"bg-gray-400 text-white\" : \n                          \"bg-blue-600 text-white\"\n                        }`}\n                        data-testid={`badge-top-frequent-${index + 1}`}\n                      >\n                        {index + 1}\n                      </Badge>\n                      <div>\n                        <p className=\"font-medium text-indigo-700 dark:text-indigo-300\" data-testid={`text-frequent-name-${index + 1}`}>\n                          {customer.name}\n                        </p>\n                        <p className=\"text-sm text-indigo-600 dark:text-indigo-400\">\n                          ${customer.totalSpent} gastado\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-indigo-700 dark:text-indigo-300\" data-testid={`text-frequent-orders-${index + 1}`}>\n                          {customer.ordersCount} √≥rdenes\n                        </p>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => openStatsModal(customer.id)}\n                        className=\"border-indigo-300 text-indigo-700 hover:bg-indigo-50 dark:border-indigo-500 dark:text-indigo-300 dark:hover:bg-indigo-900/20\"\n                        data-testid={`button-stats-frequent-${index + 1}`}\n                      >\n                        <Eye className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n                {frequentError && (\n                  <p className=\"text-center text-red-600 dark:text-red-400 py-4\" data-testid=\"error-top-frequent\">\n                    Error al cargar datos de clientes\n                  </p>\n                )}\n                {!frequentLoading && !frequentError && topFrequent.length === 0 && (\n                  <p className=\"text-center text-indigo-600 dark:text-indigo-400 py-4\" data-testid=\"empty-top-frequent\">\n                    No hay datos de clientes disponibles\n                  </p>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Inactive Customers Management */}\n      <Card className=\"tech-button-3d bg-gradient-to-br from-red-50 to-orange-50 dark:from-red-900/20 dark:to-orange-900/20 border-2 border-red-300 dark:border-red-500/30 rounded-xl\">\n        <CardHeader data-testid=\"header-inactive-management\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\n            <CardTitle className=\"flex items-center text-red-700 dark:text-red-300\">\n              <Calendar className=\"w-5 h-5 mr-2\" />\n              Gesti√≥n de Clientes Inactivos\n            </CardTitle>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-red-600 dark:text-red-400\">\n                  Inactivos por m√°s de:\n                </span>\n                <Select value={inactiveDays.toString()} onValueChange={(value) => setInactiveDays(Number(value))}>\n                  <SelectTrigger className=\"w-24\" data-testid=\"select-inactive-days\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"30\">30 d√≠as</SelectItem>\n                    <SelectItem value=\"60\">60 d√≠as</SelectItem>\n                    <SelectItem value=\"90\">90 d√≠as</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Button\n                onClick={() => sendRemindersMutation.mutate(inactiveDays)}\n                disabled={inactiveCustomers.length === 0 || sendRemindersMutation.isPending}\n                className=\"bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 text-white\"\n                data-testid=\"button-send-reminders\"\n              >\n                <Send className=\"w-4 h-4 mr-2\" />\n                {sendRemindersMutation.isPending ? 'Enviando...' : 'Enviar Recordatorios'}\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {inactiveLoading ? (\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"animate-pulse flex items-center space-x-4 p-4 bg-red-100 dark:bg-red-900/20 rounded-lg\">\n                  <div className=\"w-12 h-12 bg-red-300 rounded-full\"></div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"h-4 bg-red-300 rounded w-1/3\"></div>\n                    <div className=\"h-3 bg-red-200 rounded w-1/2\"></div>\n                  </div>\n                  <div className=\"h-6 bg-red-300 rounded w-16\"></div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {inactiveCustomers.map((customer, index) => (\n                <div \n                  key={customer.id} \n                  className=\"flex items-center justify-between p-4 bg-gradient-to-r from-red-50 to-orange-50 dark:from-red-900/30 dark:to-orange-900/30 rounded-lg border border-red-200 dark:border-red-500/30\"\n                  data-testid={`row-inactive-${customer.id}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-red-400 to-orange-400 rounded-full flex items-center justify-center text-white font-bold text-lg\">\n                      {customer.name.charAt(0).toUpperCase()}\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-red-700 dark:text-red-300\" data-testid={`text-inactive-name-${customer.id}`}>\n                        {customer.name}\n                      </h3>\n                      <p className=\"text-sm text-red-600 dark:text-red-400\" data-testid={`text-inactive-phone-${customer.id}`}>\n                        {customer.phone} ‚Ä¢ √öltima orden: {new Date(customer.lastOrderDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-3\">\n                    <Badge variant=\"destructive\" className=\"bg-red-500 dark:bg-red-600\" data-testid={`text-inactive-days-${customer.id}`}>\n                      {customer.daysSinceLastOrder} d√≠as\n                    </Badge>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => openStatsModal(customer.id)}\n                      className=\"border-red-300 text-red-700 hover:bg-red-50 dark:border-red-500 dark:text-red-300 dark:hover:bg-red-900/20\"\n                      data-testid={`button-stats-inactive-${customer.id}`}\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n              \n              {inactiveError && (\n                <p className=\"text-center text-red-600 dark:text-red-400 py-4\" data-testid=\"error-inactive-customers\">\n                  Error al cargar clientes inactivos\n                </p>\n              )}\n              \n              {!inactiveLoading && !inactiveError && inactiveCustomers.length === 0 && (\n                <div className=\"text-center py-8\" data-testid=\"empty-inactive-customers\">\n                  <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <UserCheck className=\"w-8 h-8 text-green-600\" />\n                  </div>\n                  <p className=\"text-green-600 dark:text-green-400 font-medium\">\n                    ¬°Excelente! No hay clientes inactivos en los √∫ltimos {inactiveDays} d√≠as\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Customer Stats Modal */}\n      <Dialog open={isStatsModalOpen} onOpenChange={(open) => { setIsStatsModalOpen(open); if (!open) setSelectedCustomerId(null); }}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center text-xl font-bold text-cyan-700 dark:text-cyan-300\">\n              <Users className=\"w-6 h-6 mr-2\" />\n              Estad√≠sticas Detalladas del Cliente\n            </DialogTitle>\n          </DialogHeader>\n          \n          {statsLoading ? (\n            <div className=\"space-y-6 p-4\">\n              <div className=\"animate-pulse space-y-4\">\n                <div className=\"h-6 bg-gray-200 rounded w-1/2\"></div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"h-20 bg-gray-200 rounded\"></div>\n                  <div className=\"h-20 bg-gray-200 rounded\"></div>\n                </div>\n                <div className=\"h-32 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          ) : statsError ? (\n            <div className=\"text-center py-8\">\n              <p className=\"text-red-600 dark:text-red-400\" data-testid=\"error-customer-stats\">\n                Error al cargar estad√≠sticas del cliente\n              </p>\n            </div>\n          ) : customerStats ? (\n            <div className=\"space-y-6 p-4\">\n              {/* Customer Info */}\n              <div className=\"bg-gradient-to-r from-cyan-50 to-blue-50 dark:from-cyan-900/20 dark:to-blue-900/20 rounded-lg p-4 border border-cyan-200 dark:border-cyan-500/30\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-400 to-blue-400 rounded-full flex items-center justify-center text-white font-bold text-2xl\">\n                    {customerStats.customer.name.charAt(0).toUpperCase()}\n                  </div>\n                  <div>\n                    <h3 className=\"text-xl font-bold text-cyan-700 dark:text-cyan-300\" data-testid=\"text-modal-customer-name\">\n                      {customerStats.customer.name}\n                    </h3>\n                    <p className=\"text-cyan-600 dark:text-cyan-400\" data-testid=\"text-modal-customer-phone\">\n                      {customerStats.customer.phone}\n                    </p>\n                    {customerStats.customer.email && (\n                      <p className=\"text-sm text-cyan-500 dark:text-cyan-500\" data-testid=\"text-modal-customer-email\">\n                        {customerStats.customer.email}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Key Metrics */}\n              <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n                <Card className=\"bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border-green-200 dark:border-green-500/30\">\n                  <CardContent className=\"p-4 text-center\">\n                    <DollarSign className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\" data-testid=\"text-modal-total-spent\">\n                      ${customerStats.totalSpent}\n                    </p>\n                    <p className=\"text-xs text-green-600 dark:text-green-400\">Total Gastado</p>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border-blue-200 dark:border-blue-500/30\">\n                  <CardContent className=\"p-4 text-center\">\n                    <ShoppingCart className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\" data-testid=\"text-modal-orders-count\">\n                      {customerStats.ordersCount}\n                    </p>\n                    <p className=\"text-xs text-blue-600 dark:text-blue-400\">√ìrdenes Totales</p>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 border-purple-200 dark:border-purple-500/30\">\n                  <CardContent className=\"p-4 text-center\">\n                    <TrendingUp className=\"w-8 h-8 text-purple-600 mx-auto mb-2\" />\n                    <p className=\"text-2xl font-bold text-purple-700 dark:text-purple-300\" data-testid=\"text-modal-avg-order\">\n                      ${customerStats.avgOrderValue}\n                    </p>\n                    <p className=\"text-xs text-purple-600 dark:text-purple-400\">Promedio por Orden</p>\n                  </CardContent>\n                </Card>\n                \n                <Card className=\"bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-900/20 dark:to-red-900/20 border-orange-200 dark:border-orange-500/30\">\n                  <CardContent className=\"p-4 text-center\">\n                    <Clock className=\"w-8 h-8 text-orange-600 mx-auto mb-2\" />\n                    <p className=\"text-lg font-bold text-orange-700 dark:text-orange-300\" data-testid=\"text-modal-last-order\">\n                      {customerStats.lastOrderAt \n                        ? new Date(customerStats.lastOrderAt).toLocaleDateString()\n                        : 'Nunca'\n                      }\n                    </p>\n                    <p className=\"text-xs text-orange-600 dark:text-orange-400\">√öltima Orden</p>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Order History */}\n              <Card className=\"bg-gradient-to-br from-gray-50 to-slate-50 dark:from-gray-900/20 dark:to-slate-900/20 border-gray-200 dark:border-gray-500/30\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-gray-700 dark:text-gray-300\">\n                    <Calendar className=\"w-5 h-5 mr-2\" />\n                    Historial de √ìrdenes ({customerStats.orderDates.length} √≥rdenes)\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {customerStats.orderDates.length > 0 ? (\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2 max-h-40 overflow-y-auto\">\n                      {customerStats.orderDates.slice(0, 20).map((date, index) => (\n                        <Badge \n                          key={index} \n                          variant=\"secondary\" \n                          className=\"text-xs justify-center\"\n                          data-testid={`badge-order-date-${index}`}\n                        >\n                          {new Date(date).toLocaleDateString()}\n                        </Badge>\n                      ))}\n                      {customerStats.orderDates.length > 20 && (\n                        <Badge variant=\"outline\" className=\"text-xs justify-center\">\n                          +{customerStats.orderDates.length - 20} m√°s\n                        </Badge>\n                      )}\n                    </div>\n                  ) : (\n                    <p className=\"text-center text-gray-500 dark:text-gray-400 py-4\" data-testid=\"empty-order-history\">\n                      No hay historial de √≥rdenes disponible\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          ) : null}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":31086},"server/airtable-service.ts":{"content":"import { AirtableConfig, Invoice, InvoiceItem } from \"../shared/schema\";\n\ninterface AirtableField {\n  [key: string]: any;\n}\n\ninterface AirtableRecord {\n  id?: string;\n  fields: AirtableField;\n}\n\ninterface AirtableResponse {\n  records: AirtableRecord[];\n}\n\ninterface AirtableCreateResponse {\n  records: {\n    id: string;\n    fields: AirtableField;\n  }[];\n}\n\nexport class AirtableService {\n  private config: AirtableConfig;\n  private baseUrl: string;\n\n  constructor(config: AirtableConfig) {\n    if (!config.apiToken || !config.baseId) {\n      throw new Error(\"Configuraci√≥n de Airtable incompleta\");\n    }\n    this.config = config;\n    this.baseUrl = `https://api.airtable.com/v0/${config.baseId}`;\n  }\n\n  private async makeRequest(\n    method: string,\n    endpoint: string,\n    data?: any\n  ): Promise<any> {\n    const url = `${this.baseUrl}/${endpoint}`;\n    \n    const headers: Record<string, string> = {\n      'Authorization': `Bearer ${this.config.apiToken}`,\n      'Content-Type': 'application/json'\n    };\n\n    const options: RequestInit = {\n      method,\n      headers\n    };\n\n    if (data) {\n      options.body = JSON.stringify(data);\n    }\n\n    const response = await fetch(url, options);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`Error de Airtable (${response.status}): ${errorText}`);\n    }\n\n    return response.json();\n  }\n\n  async syncInvoice(invoice: Invoice): Promise<string> {\n    try {\n      const invoiceFields = {\n        'Invoice ID': invoice.id,\n        'Number': invoice.number,\n        'Date': invoice.date?.toISOString() || new Date().toISOString(),\n        'Customer Name': invoice.customerName || 'Cliente',\n        'Customer Phone': invoice.customerPhone,\n        'Subtotal': parseFloat(invoice.subtotal || '0'),\n        'Tax': parseFloat(invoice.tax || '0'),\n        'Total': parseFloat(invoice.total || '0'),\n        'Payment Method': invoice.paymentMethod || 'pending',\n        'Status': invoice.status || 'received'\n      };\n\n      const createData = {\n        records: [{\n          fields: invoiceFields\n        }]\n      };\n\n      const response: AirtableCreateResponse = await this.makeRequest(\n        'POST',\n        this.config.tableInvoices || 'Invoices',\n        createData\n      );\n\n      if (response.records && response.records.length > 0) {\n        return response.records[0].id;\n      }\n\n      throw new Error('No se recibi√≥ ID de registro de Airtable');\n    } catch (error) {\n      console.error('Error sincronizando factura en Airtable:', error);\n      throw error;\n    }\n  }\n\n  async syncInvoiceItem(item: InvoiceItem, airtableInvoiceId?: string): Promise<string> {\n    try {\n      const itemFields: Record<string, any> = {\n        'Item ID': item.id,\n        'Invoice ID': item.invoiceId,\n        'Service Name': item.serviceName || 'Servicio',\n        'Service Type': item.serviceType || 'wash',\n        'Quantity': item.quantity || 1,\n        'Unit Price': parseFloat(item.unitPrice || '0'),\n        'Total': parseFloat(item.total || '0')\n      };\n\n      // Si tenemos el ID de Airtable de la factura, lo relacionamos\n      if (airtableInvoiceId) {\n        itemFields['Invoice'] = [airtableInvoiceId];\n      }\n\n      const createData = {\n        records: [{\n          fields: itemFields\n        }]\n      };\n\n      const response: AirtableCreateResponse = await this.makeRequest(\n        'POST',\n        this.config.tableInvoiceItems || 'Invoice Items',\n        createData\n      );\n\n      if (response.records && response.records.length > 0) {\n        return response.records[0].id;\n      }\n\n      throw new Error('No se recibi√≥ ID de registro de Airtable');\n    } catch (error) {\n      console.error('Error sincronizando item en Airtable:', error);\n      throw error;\n    }\n  }\n\n  async updateInvoice(airtableId: string, invoice: Invoice): Promise<void> {\n    try {\n      const invoiceFields = {\n        'Invoice ID': invoice.id,\n        'Number': invoice.number,\n        'Date': invoice.date?.toISOString() || new Date().toISOString(),\n        'Customer Name': invoice.customerName || 'Cliente',\n        'Customer Phone': invoice.customerPhone,\n        'Subtotal': parseFloat(invoice.subtotal || '0'),\n        'Tax': parseFloat(invoice.tax || '0'),\n        'Total': parseFloat(invoice.total || '0'),\n        'Payment Method': invoice.paymentMethod || 'pending',\n        'Status': invoice.status || 'received'\n      };\n\n      const updateData = {\n        records: [{\n          id: airtableId,\n          fields: invoiceFields\n        }]\n      };\n\n      await this.makeRequest(\n        'PATCH',\n        this.config.tableInvoices || 'Invoices',\n        updateData\n      );\n    } catch (error) {\n      console.error('Error actualizando factura en Airtable:', error);\n      throw error;\n    }\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      // Hacemos una consulta simple para probar la conexi√≥n\n      await this.makeRequest('GET', `${this.config.tableInvoices || 'Invoices'}?maxRecords=1`);\n      return true;\n    } catch (error) {\n      console.error('Error probando conexi√≥n con Airtable:', error);\n      return false;\n    }\n  }\n}","size_bytes":5157},"server/airtable-sync-worker.ts":{"content":"import { AirtableService } from './airtable-service';\nimport { IStorage } from './storage';\nimport { AirtableSyncQueue, Invoice, InvoiceItem } from '../shared/schema';\n\nexport class AirtableSyncWorker {\n  private storage: IStorage;\n  private isProcessing = false;\n  private processingInterval: NodeJS.Timeout | null = null;\n\n  constructor(storage: IStorage) {\n    this.storage = storage;\n  }\n\n  /**\n   * Inicia el worker de sincronizaci√≥n que procesa la cola cada 30 segundos\n   */\n  start(): void {\n    if (this.processingInterval) {\n      return; // Ya est√° corriendo\n    }\n\n    console.log('üöÄ Iniciando worker de sincronizaci√≥n con Airtable...');\n    \n    // Procesar inmediatamente al iniciar\n    this.processQueue().catch(error => {\n      console.error('Error en procesamiento inicial:', error);\n    });\n\n    // Luego procesar cada 30 segundos\n    this.processingInterval = setInterval(() => {\n      this.processQueue().catch(error => {\n        console.error('Error en procesamiento peri√≥dico:', error);\n      });\n    }, 30000);\n  }\n\n  /**\n   * Detiene el worker de sincronizaci√≥n\n   */\n  stop(): void {\n    if (this.processingInterval) {\n      clearInterval(this.processingInterval);\n      this.processingInterval = null;\n      console.log('‚èπÔ∏è Worker de sincronizaci√≥n detenido');\n    }\n  }\n\n  /**\n   * Procesa manualmente la cola de sincronizaci√≥n\n   */\n  async processQueue(): Promise<void> {\n    if (this.isProcessing) {\n      console.log('‚è≥ Sincronizaci√≥n ya en proceso, saltando...');\n      return;\n    }\n\n    try {\n      this.isProcessing = true;\n      \n      // Verificar si la integraci√≥n est√° habilitada\n      const config = await this.storage.getAirtableConfig();\n      if (!config || !config.enabled || !config.apiToken || !config.baseId) {\n        // Sincronizaci√≥n no configurada, no hacer nada\n        return;\n      }\n\n      // Actualizar estado de configuraci√≥n a 'syncing'\n      await this.storage.updateAirtableConfig({\n        ...config,\n        syncStatus: 'syncing'\n      });\n\n      const airtableService = new AirtableService(config);\n      \n      // Obtener elementos pendientes de la cola\n      const pendingItems = await this.storage.getAirtableSyncQueueItems('pending');\n      \n      if (pendingItems.length === 0) {\n        await this.storage.updateAirtableConfig({\n          ...config,\n          syncStatus: 'idle',\n          lastError: null\n        });\n        return;\n      }\n\n      console.log(`üìã Procesando ${pendingItems.length} elementos en la cola de Airtable...`);\n\n      let processedCount = 0;\n      let errorCount = 0;\n\n      for (const item of pendingItems) {\n        try {\n          await this.processSyncItem(item, airtableService);\n          processedCount++;\n        } catch (error) {\n          errorCount++;\n          console.error(`‚ùå Error procesando item ${item.id}:`, error);\n        }\n      }\n\n      // Actualizar estado final de la configuraci√≥n\n      const finalStatus = errorCount > 0 ? 'error' : 'idle';\n      const lastError = errorCount > 0 ? `Errores en ${errorCount} de ${pendingItems.length} items` : null;\n\n      await this.storage.updateAirtableConfig({\n        ...config,\n        syncStatus: finalStatus,\n        lastSyncDate: new Date(),\n        lastError: lastError\n      });\n\n      console.log(`‚úÖ Sincronizaci√≥n completada: ${processedCount} exitosos, ${errorCount} errores`);\n\n    } catch (error) {\n      console.error('üí• Error cr√≠tico en worker de sincronizaci√≥n:', error);\n      \n      // Intentar actualizar el estado de error en la configuraci√≥n\n      try {\n        const config = await this.storage.getAirtableConfig();\n        if (config) {\n          await this.storage.updateAirtableConfig({\n            ...config,\n            syncStatus: 'error',\n            lastError: error instanceof Error ? error.message : 'Error desconocido'\n          });\n        }\n      } catch (updateError) {\n        console.error('No se pudo actualizar estado de error:', updateError);\n      }\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  /**\n   * Procesa un elemento individual de la cola\n   */\n  private async processSyncItem(item: AirtableSyncQueue, airtableService: AirtableService): Promise<void> {\n    try {\n      let externalId: string;\n\n      if (item.entityType === 'invoice') {\n        // Obtener la factura del almacenamiento\n        const invoice = await this.getInvoiceById(item.entityId);\n        if (!invoice) {\n          throw new Error(`Factura ${item.entityId} no encontrada`);\n        }\n\n        if (item.externalId) {\n          // Ya existe en Airtable, actualizar\n          await airtableService.updateInvoice(item.externalId, invoice);\n          externalId = item.externalId;\n        } else {\n          // Crear nueva en Airtable\n          externalId = await airtableService.syncInvoice(invoice);\n        }\n\n      } else if (item.entityType === 'invoice_item') {\n        // Obtener el item de factura del almacenamiento\n        const invoiceItem = await this.getInvoiceItemById(item.entityId);\n        if (!invoiceItem) {\n          throw new Error(`Item de factura ${item.entityId} no encontrado`);\n        }\n\n        // Buscar si la factura padre ya est√° sincronizada\n        const parentInvoiceSyncItem = await this.storage.getAirtableSyncQueueItems('synced', 'invoice');\n        const parentSync = parentInvoiceSyncItem.find(sync => sync.entityId === invoiceItem.invoiceId);\n        const airtableInvoiceId = parentSync?.externalId || undefined;\n\n        externalId = await airtableService.syncInvoiceItem(invoiceItem, airtableInvoiceId);\n\n      } else {\n        throw new Error(`Tipo de entidad no soportado: ${item.entityType}`);\n      }\n\n      // Marcar como sincronizado exitosamente\n      await this.storage.updateAirtableSyncQueueItem(item.id, {\n        status: 'synced',\n        externalId: externalId,\n        lastSyncedAt: new Date(),\n        lastError: null\n      });\n\n      console.log(`‚úÖ Sincronizado ${item.entityType} ${item.entityId} -> ${externalId}`);\n\n    } catch (error) {\n      // Incrementar el contador de reintentos\n      const newRetries = (item.retries || 0) + 1;\n      const maxRetries = item.maxRetries || 3;\n\n      if (newRetries >= maxRetries) {\n        // Marcar como error permanente\n        await this.storage.updateAirtableSyncQueueItem(item.id, {\n          status: 'error',\n          retries: newRetries,\n          lastError: error instanceof Error ? error.message : 'Error desconocido'\n        });\n        console.error(`‚ùå Item ${item.id} fall√≥ permanentemente despu√©s de ${newRetries} intentos`);\n      } else {\n        // Marcar para reintento\n        await this.storage.updateAirtableSyncQueueItem(item.id, {\n          retries: newRetries,\n          lastError: error instanceof Error ? error.message : 'Error desconocido'\n        });\n        console.warn(`‚ö†Ô∏è Item ${item.id} fall√≥ (intento ${newRetries}/${maxRetries}), reintentando...`);\n      }\n\n      throw error; // Re-lanzar para que se cuente en las estad√≠sticas\n    }\n  }\n\n  /**\n   * Obtiene una factura por ID desde el almacenamiento\n   */\n  private async getInvoiceById(id: string): Promise<Invoice | undefined> {\n    return await this.storage.getInvoice(id);\n  }\n\n  /**\n   * Obtiene un item de factura por ID desde el almacenamiento\n   */\n  private async getInvoiceItemById(id: string): Promise<InvoiceItem | undefined> {\n    // Buscar en todas las facturas hasta encontrar el item por ID\n    const allInvoices = await this.storage.getInvoices();\n    \n    for (const invoice of allInvoices) {\n      const items = await this.storage.getInvoiceItems(invoice.id);\n      const foundItem = items.find(item => item.id === id);\n      if (foundItem) {\n        return foundItem;\n      }\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * A√±ade una factura a la cola de sincronizaci√≥n\n   */\n  async queueInvoiceSync(invoiceId: string): Promise<void> {\n    await this.storage.createAirtableSyncQueueItem({\n      entityType: 'invoice',\n      entityId: invoiceId,\n      status: 'pending'\n    });\n    console.log(`üì• Factura ${invoiceId} a√±adida a la cola de sincronizaci√≥n`);\n  }\n\n  /**\n   * A√±ade un item de factura a la cola de sincronizaci√≥n\n   */\n  async queueInvoiceItemSync(itemId: string): Promise<void> {\n    await this.storage.createAirtableSyncQueueItem({\n      entityType: 'invoice_item',\n      entityId: itemId,\n      status: 'pending'\n    });\n    console.log(`üì• Item ${itemId} a√±adido a la cola de sincronizaci√≥n`);\n  }\n}","size_bytes":8476},"client/src/components/cash-closures-history.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { format, subDays, subMonths } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\nimport {\n  Calendar,\n  Download,\n  Filter,\n  TrendingUp,\n  TrendingDown,\n  AlertTriangle,\n  CheckCircle,\n  ArrowLeft,\n  Search,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CashClosure {\n  id: string;\n  date: string;\n  openingCash: string;\n  countedCash: string;\n  systemCash: string;\n  variance: string;\n  notes?: string;\n  createdAt: string;\n  employeeName?: string;\n}\n\ninterface CashClosuresHistoryProps {\n  onBack: () => void;\n}\n\nconst formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat('es-ES', {\n    style: 'currency',\n    currency: 'EUR'\n  }).format(amount);\n};\n\nconst getVarianceStatus = (variance: number) => {\n  if (Math.abs(variance) < 10) return { status: 'perfect', label: '‚úÖ Cuadrado', color: 'green' };\n  if (Math.abs(variance) < 50) return { status: 'minor', label: '‚ö†Ô∏è Diferencia Menor', color: 'yellow' };\n  return { status: 'major', label: '‚ùå Diferencia Mayor', color: 'red' };\n};\n\nexport default function CashClosuresHistory({ onBack }: CashClosuresHistoryProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedDateRange, setSelectedDateRange] = useState(\"last-30\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"date-desc\");\n  \n  const { toast } = useToast();\n\n  // Calculate date range\n  const getDateRange = () => {\n    const today = new Date();\n    switch (selectedDateRange) {\n      case \"today\":\n        return { startDate: format(today, \"yyyy-MM-dd\"), endDate: format(today, \"yyyy-MM-dd\") };\n      case \"last-7\":\n        return { startDate: format(subDays(today, 7), \"yyyy-MM-dd\"), endDate: format(today, \"yyyy-MM-dd\") };\n      case \"last-30\":\n        return { startDate: format(subDays(today, 30), \"yyyy-MM-dd\"), endDate: format(today, \"yyyy-MM-dd\") };\n      case \"last-90\":\n        return { startDate: format(subDays(today, 90), \"yyyy-MM-dd\"), endDate: format(today, \"yyyy-MM-dd\") };\n      default:\n        return { startDate: format(subMonths(today, 3), \"yyyy-MM-dd\"), endDate: format(today, \"yyyy-MM-dd\") };\n    }\n  };\n\n  const dateRange = getDateRange();\n\n  // Fetch cash closures history\n  const {\n    data: closures = [],\n    isLoading: closuresLoading,\n    error: closuresError\n  } = useQuery<CashClosure[]>({\n    queryKey: ['/api/cash-closures/history', dateRange.startDate, dateRange.endDate],\n    queryFn: async () => {\n      const url = `/api/cash-closures/history?startDate=${dateRange.startDate}&endDate=${dateRange.endDate}`;\n      const response = await fetch(url, {\n        headers: {\n          'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n        },\n      });\n      \n      // Si no hay datos (404), devolver array vac√≠o en lugar de error\n      if (response.status === 404) {\n        return [];\n      }\n      \n      // Para otros errores (401, 500, etc.), mostrar error real\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Error al cargar historial de cierres');\n      }\n      \n      const data = await response.json();\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: true,\n  });\n\n  // Filter and sort closures\n  const filteredClosures = useMemo(() => {\n    let filtered = closures.filter((closure: CashClosure) => {\n      // Search filter\n      if (searchTerm) {\n        const searchLower = searchTerm.toLowerCase();\n        const matchesNotes = closure.notes?.toLowerCase().includes(searchLower);\n        const matchesEmployee = closure.employeeName?.toLowerCase().includes(searchLower);\n        const matchesDate = closure.date ? format(new Date(closure.date), \"dd/MM/yyyy\", { locale: es }).includes(searchLower) : false;\n        \n        if (!matchesNotes && !matchesEmployee && !matchesDate) {\n          return false;\n        }\n      }\n\n      // Status filter\n      if (selectedStatus !== \"all\") {\n        const variance = parseFloat(closure.variance);\n        const status = getVarianceStatus(variance).status;\n        if (status !== selectedStatus) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n\n    // Sort closures\n    filtered.sort((a: CashClosure, b: CashClosure) => {\n      switch (sortBy) {\n        case \"date-asc\":\n          return new Date(a.date).getTime() - new Date(b.date).getTime();\n        case \"date-desc\":\n          return new Date(b.date).getTime() - new Date(a.date).getTime();\n        case \"variance-asc\":\n          return parseFloat(a.variance) - parseFloat(b.variance);\n        case \"variance-desc\":\n          return parseFloat(b.variance) - parseFloat(a.variance);\n        default:\n          return 0;\n      }\n    });\n\n    return filtered;\n  }, [closures, searchTerm, selectedStatus, sortBy]);\n\n  // Calculate summary statistics\n  const summaryStats = useMemo(() => {\n    if (!filteredClosures.length) return { perfect: 0, minor: 0, major: 0, totalVariance: 0 };\n\n    const stats = filteredClosures.reduce((acc: any, closure: CashClosure) => {\n      const variance = parseFloat(closure.variance);\n      const status = getVarianceStatus(variance).status;\n      \n      acc[status]++;\n      acc.totalVariance += variance;\n      \n      return acc;\n    }, { perfect: 0, minor: 0, major: 0, totalVariance: 0 });\n\n    return stats;\n  }, [filteredClosures]);\n\n  const sanitizeCSVValue = (value: string) => {\n    // Prevent CSV injection by prefixing dangerous characters with single quote\n    if (value && (value.startsWith('=') || value.startsWith('+') || value.startsWith('-') || value.startsWith('@'))) {\n      return \"'\" + value;\n    }\n    return value;\n  };\n\n  const handleExportData = () => {\n    if (!filteredClosures.length) {\n      toast({\n        title: \"Error\",\n        description: \"No hay datos para exportar\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create CSV content\n    const headers = [\"Fecha\", \"Empleado\", \"Dinero Apertura\", \"Dinero Contado\", \"Dinero Sistema\", \"Varianza\", \"Estado\", \"Observaciones\"];\n    const csvContent = [\n      headers.join(\",\"),\n      ...filteredClosures.map((closure: CashClosure) => {\n        const variance = parseFloat(closure.variance);\n        const status = getVarianceStatus(variance).label;\n        return [\n          format(new Date(closure.date), \"dd/MM/yyyy\"),\n          `\"${sanitizeCSVValue(closure.employeeName || 'N/A')}\"`,\n          parseFloat(closure.openingCash).toFixed(2),\n          parseFloat(closure.countedCash).toFixed(2),\n          parseFloat(closure.systemCash).toFixed(2),\n          variance.toFixed(2),\n          `\"${sanitizeCSVValue(status)}\"`,\n          `\"${sanitizeCSVValue(closure.notes || '')}\"`,\n        ].join(\",\");\n      }),\n    ].join(\"\\n\");\n\n    // Download CSV\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    link.href = URL.createObjectURL(blob);\n    link.download = `historial-cierres-${format(new Date(), \"yyyy-MM-dd\")}.csv`;\n    link.click();\n\n    toast({\n      title: \"Exportaci√≥n completada\",\n      description: \"El archivo se ha descargado correctamente\",\n    });\n  };\n\n  if (closuresLoading) {\n    return (\n      <div className=\"min-h-screen tech3d-bg p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <div className=\"tech-button-3d h-10 w-10 rounded-lg\"></div>\n            <div className=\"tech-glow h-8 w-64 rounded-lg\"></div>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n            {[1, 2, 3, 4].map((i) => (\n              <div key={i} className=\"tech-button-3d h-32 w-full rounded-xl animate-pulse\"></div>\n            ))}\n          </div>\n          <div className=\"tech-glow h-96 w-full rounded-xl animate-pulse\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (closuresError) {\n    return (\n      <div className=\"min-h-screen tech3d-bg p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Button\n              onClick={onBack}\n              className=\"tech3d-button-secondary\"\n              data-testid=\"button-back-to-dashboard\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              üîô Volver\n            </Button>\n          </div>\n          <div className=\"tech3d-error-card p-8 text-center rounded-xl\">\n            <AlertTriangle className=\"h-16 w-16 text-red-400 mx-auto mb-4 animate-bounce\" />\n            <h3 className=\"text-2xl font-bold tech-text-glow mb-4\">‚ùå Error al cargar datos</h3>\n            <p className=\"tech3d-text-muted text-lg\">No se pudieron cargar los cierres de caja. Int√©ntelo de nuevo.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen tech3d-bg p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header Tech-3D */}\n        <div className=\"flex items-center gap-6 mb-8\">\n          <Button\n            onClick={onBack}\n            className=\"tech3d-button-secondary px-6 py-3\"\n            data-testid=\"button-back-to-dashboard\"\n          >\n            <ArrowLeft className=\"h-5 w-5 mr-2\" />\n            üîô Volver al Dashboard\n          </Button>\n          <div className=\"tech-glow border-2 border-cyan-500/30 rounded-xl p-6\">\n            <h1 className=\"text-4xl font-bold tech-text-glow mb-2\">\n              üìä Historial de Cierres de Caja\n            </h1>\n            <p className=\"tech3d-text-muted text-lg\">Consulta y analiza el historial completo de cierres de caja</p>\n          </div>\n        </div>\n\n        {/* Summary Cards Tech-3D */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"tech3d-success-card\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center gap-3\">\n                <CheckCircle className=\"h-8 w-8 text-green-400 animate-pulse\" />\n                <CardTitle className=\"text-lg font-bold tech-text-glow\">‚úÖ Cierres Cuadrados</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-4xl font-bold tech-text-glow\" data-testid=\"perfect-closures-count\">\n                {summaryStats.perfect}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"tech3d-warning-card\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center gap-3\">\n                <AlertTriangle className=\"h-8 w-8 text-yellow-400 animate-bounce\" />\n                <CardTitle className=\"text-lg font-bold tech-text-glow\">‚ö†Ô∏è Diferencias Menores</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-4xl font-bold tech-text-glow\" data-testid=\"minor-closures-count\">\n                {summaryStats.minor}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"tech3d-error-card\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center gap-3\">\n                <TrendingDown className=\"h-8 w-8 text-red-400 animate-pulse\" />\n                <CardTitle className=\"text-lg font-bold tech-text-glow\">‚ùå Diferencias Mayores</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-4xl font-bold tech-text-glow\" data-testid=\"major-closures-count\">\n                {summaryStats.major}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"tech3d-info-card\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center gap-3\">\n                {summaryStats.totalVariance >= 0 ? (\n                  <TrendingUp className=\"h-8 w-8 text-cyan-400 animate-bounce\" />\n                ) : (\n                  <TrendingDown className=\"h-8 w-8 text-cyan-400 animate-bounce\" />\n                )}\n                <CardTitle className=\"text-lg font-bold tech-text-glow\">üìä Varianza Total</CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <p className={`text-4xl font-bold tech-text-glow ${\n                summaryStats.totalVariance >= 0 \n                  ? 'text-green-400' \n                  : 'text-red-400'\n              }`} data-testid=\"total-variance\">\n                {formatCurrency(summaryStats.totalVariance)}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters and Actions Tech-3D */}\n        <Card className=\"tech3d-primary-card mb-8\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-3 text-2xl\">\n                  <Filter className=\"h-8 w-8 text-cyan-400\" />\n                  üîç Filtros y Acciones\n                </CardTitle>\n                <CardDescription className=\"tech3d-text-muted text-lg\">Filtra y exporta los datos seg√∫n tus necesidades</CardDescription>\n              </div>\n              <Button\n                onClick={handleExportData}\n                className=\"tech3d-button px-8 py-4 text-lg\"\n                data-testid=\"button-export-data\"\n              >\n                <Download className=\"h-5 w-5 mr-3\" />\n                üì• Exportar CSV\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              {/* Search */}\n              <div>\n                <Label htmlFor=\"search\">Buscar</Label>\n                <div className=\"relative\">\n                  <Search className=\"h-4 w-4 absolute left-3 top-3 text-gray-400\" />\n                  <Input\n                    id=\"search\"\n                    placeholder=\"Fecha, empleado, observaciones...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search\"\n                  />\n                </div>\n              </div>\n\n              {/* Date Range */}\n              <div>\n                <Label htmlFor=\"date-range\">Per√≠odo</Label>\n                <Select value={selectedDateRange} onValueChange={setSelectedDateRange}>\n                  <SelectTrigger data-testid=\"select-date-range\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"today\">Hoy</SelectItem>\n                    <SelectItem value=\"last-7\">√öltimos 7 d√≠as</SelectItem>\n                    <SelectItem value=\"last-30\">√öltimos 30 d√≠as</SelectItem>\n                    <SelectItem value=\"last-90\">√öltimos 90 d√≠as</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Status Filter */}\n              <div>\n                <Label htmlFor=\"status\">Estado</Label>\n                <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n                  <SelectTrigger data-testid=\"select-status\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todos</SelectItem>\n                    <SelectItem value=\"perfect\">Cuadrados</SelectItem>\n                    <SelectItem value=\"minor\">Diferencias Menores</SelectItem>\n                    <SelectItem value=\"major\">Diferencias Mayores</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Sort */}\n              <div>\n                <Label htmlFor=\"sort\">Ordenar por</Label>\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger data-testid=\"select-sort\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"date-desc\">Fecha (M√°s reciente)</SelectItem>\n                    <SelectItem value=\"date-asc\">Fecha (M√°s antigua)</SelectItem>\n                    <SelectItem value=\"variance-desc\">Varianza (Mayor)</SelectItem>\n                    <SelectItem value=\"variance-asc\">Varianza (Menor)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Closures Table Tech-3D */}\n        <Card className=\"tech3d-primary-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-3 text-2xl\">\n              <Calendar className=\"h-8 w-8 text-cyan-400 animate-pulse\" />\n              üìã Historial de Cierres ({filteredClosures.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {filteredClosures.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-600 dark:text-gray-400 mb-2\">\n                  No se encontraron cierres\n                </h3>\n                <p className=\"text-gray-500 dark:text-gray-500\">\n                  Ajusta los filtros para ver m√°s resultados\n                </p>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Fecha</TableHead>\n                      <TableHead>Empleado</TableHead>\n                      <TableHead>Apertura</TableHead>\n                      <TableHead>Contado</TableHead>\n                      <TableHead>Sistema</TableHead>\n                      <TableHead>Varianza</TableHead>\n                      <TableHead>Estado</TableHead>\n                      <TableHead>Observaciones</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredClosures.map((closure: CashClosure) => {\n                      const variance = parseFloat(closure.variance);\n                      const status = getVarianceStatus(variance);\n                      \n                      return (\n                        <TableRow key={closure.id} data-testid={`closure-row-${closure.id}`}>\n                          <TableCell className=\"font-medium\">\n                            {format(new Date(closure.date), \"dd/MM/yyyy\", { locale: es })}\n                          </TableCell>\n                          <TableCell>{closure.employeeName || 'N/A'}</TableCell>\n                          <TableCell>{formatCurrency(parseFloat(closure.openingCash))}</TableCell>\n                          <TableCell>{formatCurrency(parseFloat(closure.countedCash))}</TableCell>\n                          <TableCell>{formatCurrency(parseFloat(closure.systemCash))}</TableCell>\n                          <TableCell className={variance >= 0 ? 'text-green-600' : 'text-red-600'}>\n                            {formatCurrency(variance)}\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              className={\n                                status.color === 'green' \n                                  ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' :\n                                status.color === 'yellow'\n                                  ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400'\n                                  : 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400'\n                              }\n                            >\n                              {status.label}\n                            </Badge>\n                          </TableCell>\n                          <TableCell className=\"max-w-xs truncate\" title={closure.notes}>\n                            {closure.notes || '-'}\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":21022},"attached_assets/sistema_roles-3_1757890307819.tsx":{"content":"import React, { useState } from 'react';\nimport { \n  Users, \n  Plus, \n  Edit3, \n  Trash2, \n  Shield, \n  Key, \n  User, \n  Crown, \n  UserCheck,\n  Eye,\n  EyeOff,\n  Save,\n  X,\n  Check,\n  AlertCircle,\n  Settings,\n  Lock,\n  Unlock\n} from 'lucide-react';\n\nconst SistemaRoles = () => {\n  const [employees, setEmployees] = useState([\n    { \n      id: 1, \n      nombre: 'Juan Carlos', \n      puesto: 'Gerente General', \n      codigoAcceso: '1234', \n      rol: 'gerente',\n      activo: true,\n      fechaCreacion: '2024-01-15',\n      ultimoAcceso: '2024-09-04'\n    },\n    { \n      id: 2, \n      nombre: 'Mar√≠a Fern√°ndez', \n      puesto: 'Operadora Principal', \n      codigoAcceso: '5678', \n      rol: 'empleado',\n      activo: true,\n      fechaCreacion: '2024-02-20',\n      ultimoAcceso: '2024-09-03'\n    },\n    { \n      id: 3, \n      nombre: 'Pedro Gonz√°lez', \n      puesto: 'Supervisor de Turno', \n      codigoAcceso: '9999', \n      rol: 'supervisor',\n      activo: true,\n      fechaCreacion: '2024-03-10',\n      ultimoAcceso: '2024-09-02'\n    },\n    { \n      id: 4, \n      nombre: 'Ana L√≥pez', \n      puesto: 'Cajera', \n      codigoAcceso: '4567', \n      rol: 'empleado',\n      activo: false,\n      fechaCreacion: '2024-01-20',\n      ultimoAcceso: '2024-08-28'\n    }\n  ]);\n\n  const [showEmployeeModal, setShowEmployeeModal] = useState(false);\n  const [showRolePermissionsModal, setShowRolePermissionsModal] = useState(false);\n  const [showDeleteConfirmModal, setShowDeleteConfirmModal] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const [employeeToDelete, setEmployeeToDelete] = useState(null);\n  const [modalMessage, setModalMessage] = useState('');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterRole, setFilterRole] = useState('all');\n  const [showPassword, setShowPassword] = useState({});\n\n  const [empleadoForm, setEmpleadoForm] = useState({\n    nombre: '',\n    puesto: '',\n    codigoAcceso: '',\n    rol: 'empleado'\n  });\n\n  const roles = {\n    gerente: {\n      nombre: 'Gerente',\n      color: 'blue',\n      icon: Crown,\n      permisos: [\n        'Crear y editar facturas',\n        'Cancelar √≥rdenes',\n        'Ver cierre de caja',\n        'Gestionar empleados',\n        'Configurar servicios',\n        'Acceso a reportes completos',\n        'Gestionar m√©todos de pago',\n        'Configuraci√≥n del sistema'\n      ]\n    },\n    supervisor: {\n      nombre: 'Supervisor',\n      color: 'purple',\n      icon: Shield,\n      permisos: [\n        'Crear y editar facturas',\n        'Cambiar estados de √≥rdenes',\n        'Ver cierre de caja',\n        'Gestionar servicios b√°sicos',\n        'Acceso a reportes b√°sicos',\n        'Cobrar pagos pendientes'\n      ]\n    },\n    empleado: {\n      nombre: 'Empleado',\n      color: 'green',\n      icon: User,\n      permisos: [\n        'Crear facturas b√°sicas',\n        'Ver √≥rdenes asignadas',\n        'Cambiar estados b√°sicos',\n        'Cobrar pagos'\n      ]\n    }\n  };\n\n  const empleadoLogueado = {\n    nombre: 'Juan Carlos',\n    rol: 'gerente'\n  };\n\n  const openModal = (message) => {\n    setModalMessage(message);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setModalMessage('');\n  };\n\n  const generateRandomCode = () => {\n    return Math.floor(1000 + Math.random() * 9000).toString();\n  };\n\n  const openEmployeeModal = (employee = null) => {\n    if (employee) {\n      setSelectedEmployee(employee);\n      setEmpleadoForm({\n        nombre: employee.nombre,\n        puesto: employee.puesto,\n        codigoAcceso: employee.codigoAcceso,\n        rol: employee.rol\n      });\n    } else {\n      setSelectedEmployee(null);\n      setEmpleadoForm({\n        nombre: '',\n        puesto: '',\n        codigoAcceso: generateRandomCode(),\n        rol: 'empleado'\n      });\n    }\n    setShowEmployeeModal(true);\n  };\n\n  const saveEmployee = () => {\n    if (!empleadoForm.nombre || !empleadoForm.puesto || !empleadoForm.codigoAcceso) {\n      openModal(\"Complete todos los campos obligatorios.\");\n      return;\n    }\n\n    const existingEmployee = employees.find(emp => \n      emp.codigoAcceso === empleadoForm.codigoAcceso && \n      emp.id !== selectedEmployee?.id\n    );\n\n    if (existingEmployee) {\n      openModal(\"El c√≥digo de acceso ya est√° en uso. Genere uno nuevo.\");\n      return;\n    }\n\n    if (selectedEmployee) {\n      setEmployees(employees.map(emp => \n        emp.id === selectedEmployee.id \n          ? { ...emp, ...empleadoForm }\n          : emp\n      ));\n      openModal(\"Empleado actualizado exitosamente.\");\n    } else {\n      const newEmployee = {\n        id: employees.length + 1,\n        ...empleadoForm,\n        activo: true,\n        fechaCreacion: new Date().toISOString().split('T')[0],\n        ultimoAcceso: 'Nunca'\n      };\n      setEmployees([...employees, newEmployee]);\n      openModal(\"Empleado creado exitosamente.\");\n    }\n\n    setShowEmployeeModal(false);\n    setSelectedEmployee(null);\n  };\n\n  const toggleEmployeeStatus = (employeeId) => {\n    setEmployees(employees.map(emp => \n      emp.id === employeeId \n        ? { ...emp, activo: !emp.activo }\n        : emp\n    ));\n    \n    const employee = employees.find(emp => emp.id === employeeId);\n    openModal(`Empleado ${employee.activo ? 'desactivado' : 'activado'} exitosamente.`);\n  };\n\n  const deleteEmployee = () => {\n    if (!employeeToDelete) return;\n    \n    setEmployees(employees.filter(emp => emp.id !== employeeToDelete.id));\n    openModal(\"Empleado eliminado exitosamente.\");\n    setShowDeleteConfirmModal(false);\n    setEmployeeToDelete(null);\n  };\n\n  const togglePasswordVisibility = (employeeId) => {\n    setShowPassword(prev => ({\n      ...prev,\n      [employeeId]: !prev[employeeId]\n    }));\n  };\n\n  const filteredEmployees = employees.filter(employee => {\n    const matchesSearch = employee.nombre.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         employee.puesto.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = filterRole === 'all' || employee.rol === filterRole;\n    return matchesSearch && matchesRole;\n  });\n\n  const Modal = () => {\n    if (!isModalOpen) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Check className=\"w-8 h-8 text-blue-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Sistema de Roles</h3>\n            <p className=\"text-gray-600 mb-6\">{modalMessage}</p>\n            <button\n              onClick={closeModal}\n              className=\"w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 font-medium transition-colors\"\n            >\n              Aceptar\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const EmployeeModal = () => {\n    if (!showEmployeeModal) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">\n              {selectedEmployee ? 'Editar Empleado' : 'Nuevo Empleado'}\n            </h3>\n            <button\n              onClick={() => setShowEmployeeModal(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Nombre Completo *</label>\n              <input\n                type=\"text\"\n                value={empleadoForm.nombre}\n                onChange={(e) => setEmpleadoForm({...empleadoForm, nombre: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Ej: Juan P√©rez\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Puesto de Trabajo *</label>\n              <input\n                type=\"text\"\n                value={empleadoForm.puesto}\n                onChange={(e) => setEmpleadoForm({...empleadoForm, puesto: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Ej: Cajero Principal\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">C√≥digo de Acceso *</label>\n              <div className=\"flex space-x-2\">\n                <input\n                  type=\"text\"\n                  value={empleadoForm.codigoAcceso}\n                  onChange={(e) => setEmpleadoForm({...empleadoForm, codigoAcceso: e.target.value})}\n                  className=\"flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                  placeholder=\"C√≥digo de 4 d√≠gitos\"\n                  maxLength={4}\n                />\n                <button\n                  onClick={() => setEmpleadoForm({...empleadoForm, codigoAcceso: generateRandomCode()})}\n                  className=\"px-4 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 flex items-center\"\n                  title=\"Generar c√≥digo aleatorio\"\n                >\n                  <Key className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Rol del Sistema *</label>\n              <select\n                value={empleadoForm.rol}\n                onChange={(e) => setEmpleadoForm({...empleadoForm, rol: e.target.value})}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                {Object.entries(roles).map(([key, role]) => (\n                  <option key={key} value={key}>\n                    {role.nombre}\n                  </option>\n                ))}\n              </select>\n            </div>\n            \n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-semibold text-gray-900 mb-2\">Permisos del Rol:</h4>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                {roles[empleadoForm.rol]?.permisos.map((permiso, index) => (\n                  <li key={index} className=\"flex items-center\">\n                    <Check className=\"w-3 h-3 text-green-600 mr-2\" />\n                    {permiso}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 mt-6\">\n            <button\n              onClick={() => setShowEmployeeModal(false)}\n              className=\"flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium\"\n            >\n              Cancelar\n            </button>\n            <button\n              onClick={saveEmployee}\n              className=\"flex-1 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium\"\n            >\n              {selectedEmployee ? 'Actualizar' : 'Crear'} Empleado\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const DeleteConfirmModal = () => {\n    if (!showDeleteConfirmModal) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-md w-full p-6 shadow-2xl\">\n          <div className=\"text-center\">\n            <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <AlertCircle className=\"w-8 h-8 text-red-600\" />\n            </div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Eliminar Empleado</h3>\n            <p className=\"text-gray-600 mb-6\">\n              ¬øEst√° seguro que desea eliminar a <strong>{employeeToDelete?.nombre}</strong>? \n              Esta acci√≥n no se puede deshacer.\n            </p>\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowDeleteConfirmModal(false)}\n                className=\"flex-1 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 font-medium\"\n              >\n                Cancelar\n              </button>\n              <button\n                onClick={deleteEmployee}\n                className=\"flex-1 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium\"\n              >\n                Eliminar\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const RolePermissionsModal = () => {\n    if (!showRolePermissionsModal) return null;\n    \n    return (\n      <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n        <div className=\"bg-white rounded-2xl max-w-2xl w-full p-6 shadow-2xl\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-xl font-bold text-gray-900\">Permisos por Rol</h3>\n            <button\n              onClick={() => setShowRolePermissionsModal(false)}\n              className=\"text-gray-400 hover:text-gray-600\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-6\">\n            {Object.entries(roles).map(([key, role]) => {\n              const IconComponent = role.icon;\n              return (\n                <div key={key} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center mb-3\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                      <IconComponent className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <h4 className=\"text-lg font-semibold text-gray-900\">{role.nombre}</h4>\n                  </div>\n                  \n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {role.permisos.map((permiso, index) => (\n                      <div key={index} className=\"flex items-center text-sm text-gray-600\">\n                        <Check className=\"w-3 h-3 text-green-600 mr-2\" />\n                        {permiso}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">Gesti√≥n de Empleados</h1>\n                <p className=\"text-gray-600\">Sistema de roles y permisos</p>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => setShowRolePermissionsModal(true)}\n                className=\"px-4 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 font-medium flex items-center space-x-2\"\n              >\n                <Shield className=\"w-4 h-4\" />\n                <span>Ver Permisos</span>\n              </button>\n              <button\n                onClick={() => openEmployeeModal()}\n                className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium flex items-center space-x-2\"\n              >\n                <Plus className=\"w-5 h-5\" />\n                <span>Nuevo Empleado</span>\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm border p-6 mb-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div className=\"md:col-span-2\">\n              <div className=\"relative\">\n                <Users className=\"w-5 h-5 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Buscar empleado por nombre o puesto...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <select\n                value={filterRole}\n                onChange={(e) => setFilterRole(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"all\">Todos los roles</option>\n                {Object.entries(roles).map(([key, role]) => (\n                  <option key={key} value={key}>{role.nombre}</option>\n                ))}\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-xl shadow-sm border overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Empleado</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Rol</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">C√≥digo</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Estado</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">√öltimo Acceso</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Acciones</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredEmployees.map((employee) => {\n                  const role = roles[employee.rol];\n                  const IconComponent = role?.icon || User;\n                  \n                  return (\n                    <tr key={employee.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\n                            <IconComponent className=\"w-5 h-5 text-blue-600\" />\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-900\">{employee.nombre}</p>\n                            <p className=\"text-sm text-gray-500\">{employee.puesto}</p>\n                          </div>\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <span className=\"px-3 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\">\n                          {role?.nombre}\n                        </span>\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <code className=\"px-2 py-1 bg-gray-100 rounded text-sm font-mono\">\n                            {showPassword[employee.id] ? employee.codigoAcceso : '‚Ä¢‚Ä¢‚Ä¢‚Ä¢'}\n                          </code>\n                          <button\n                            onClick={() => togglePasswordVisibility(employee.id)}\n                            className=\"text-gray-400 hover:text-gray-600\"\n                          >\n                            {showPassword[employee.id] ? (\n                              <EyeOff className=\"w-4 h-4\" />\n                            ) : (\n                              <Eye className=\"w-4 h-4\" />\n                            )}\n                          </button>\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center\">\n                          {employee.activo ? (\n                            <div className=\"flex items-center\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                              <span className=\"text-green-700 text-sm font-medium\">Activo</span>\n                            </div>\n                          ) : (\n                            <div className=\"flex items-center\">\n                              <div className=\"w-2 h-2 bg-red-500 rounded-full mr-2\"></div>\n                              <span className=\"text-red-700 text-sm font-medium\">Inactivo</span>\n                            </div>\n                          )}\n                        </div>\n                      </td>\n                      \n                      <td className=\"px-6 py-4 text-sm text-gray-500\">\n                        {employee.ultimoAcceso === 'Nunca' ? 'Nunca' : new Date(employee.ultimoAcceso).toLocaleDateString()}\n                      </td>\n                      \n                      <td className=\"px-6 py-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <button\n                            onClick={() => openEmployeeModal(employee)}\n                            className=\"text-blue-600 hover:text-blue-900\"\n                            title=\"Editar empleado\"\n                          >\n                            <Edit3 className=\"w-4 h-4\" />\n                          </button>\n                          \n                          <button\n                            onClick={() => toggleEmployeeStatus(employee.id)}\n                            className={`${employee.activo ? 'text-red-600 hover:text-red-900' : 'text-green-600 hover:text-green-900'}`}\n                            title={employee.activo ? 'Desactivar' : 'Activar'}\n                          >\n                            {employee.activo ? <Lock className=\"w-4 h-4\" /> : <Unlock className=\"w-4 h-4\" />}\n                          </button>\n                          \n                          {empleadoLogueado.rol === 'gerente' && employee.id !== 1 && (\n                            <button\n                              onClick={() => {\n                                setEmployeeToDelete(employee);\n                                setShowDeleteConfirmModal(true);\n                              }}\n                              className=\"text-red-600 hover:text-red-900\"\n                              title=\"Eliminar empleado\"\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </button>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mt-6\">\n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Total Empleados</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{employees.length}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <UserCheck className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Activos</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{employees.filter(e => e.activo).length}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                <Crown className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Gerentes</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{employees.filter(e => e.rol === 'gerente').length}</p>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-xl shadow-sm border p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                <Shield className=\"w-6 h-6 text-orange-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-500\">Supervisores</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{employees.filter(e => e.rol === 'supervisor').length}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Modal />\n      <EmployeeModal />\n      <DeleteConfirmModal />\n      <RolePermissionsModal />\n    </div>\n  );\n};\n\nexport default SistemaRoles;","size_bytes":26589},"client/src/components/employees-management.tsx":{"content":"import { useState } from \"react\";\nimport { \n  Users, \n  Plus, \n  Edit3, \n  Trash2, \n  Shield, \n  Key, \n  User, \n  Crown, \n  UserCheck,\n  Eye,\n  EyeOff,\n  Save,\n  X,\n  Check,\n  AlertCircle,\n  Settings,\n  Lock,\n  Unlock,\n  Search,\n  Filter\n} from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type Employee, insertEmployeeSchema } from \"@shared/schema\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface EmployeesManagementProps {\n  onNotification: (message: string) => void;\n}\n\ntype EmployeeRole = 'manager' | 'supervisor' | 'employee';\n\nconst roles = {\n  manager: {\n    nombre: 'Gerente',\n    color: 'blue',\n    icon: Crown,\n    permisos: [\n      'Crear y editar facturas',\n      'Cancelar √≥rdenes',\n      'Ver cierre de caja',\n      'Gestionar empleados',\n      'Configurar servicios',\n      'Acceso a reportes completos',\n      'Gestionar m√©todos de pago',\n      'Configuraci√≥n del sistema'\n    ]\n  },\n  supervisor: {\n    nombre: 'Supervisor',\n    color: 'purple',\n    icon: Shield,\n    permisos: [\n      'Crear y editar facturas',\n      'Cambiar estados de √≥rdenes',\n      'Ver cierre de caja',\n      'Gestionar servicios b√°sicos',\n      'Acceso a reportes b√°sicos',\n      'Cobrar pagos pendientes'\n    ]\n  },\n  employee: {\n    nombre: 'Empleado',\n    color: 'green',\n    icon: User,\n    permisos: [\n      'Crear facturas b√°sicas',\n      'Ver √≥rdenes asignadas',\n      'Cambiar estados b√°sicos',\n      'Cobrar pagos'\n    ]\n  }\n};\n\nexport default function EmployeesManagement({ onNotification }: EmployeesManagementProps) {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterRole, setFilterRole] = useState<'all' | EmployeeRole>('all');\n  const [showRolePermissionsModal, setShowRolePermissionsModal] = useState(false);\n  const [selectedRole, setSelectedRole] = useState<EmployeeRole | null>(null);\n  const [showLoginForm, setShowLoginForm] = useState(false);\n  const [needsAuth, setNeedsAuth] = useState(false);\n  const [loginCode, setLoginCode] = useState('');\n\n  const { data: employees = [], isLoading } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch('/api/employees', {\n          headers: {\n            'x-access-code': localStorage.getItem('employeeAccessCode') || '',\n          }\n        });\n        \n        if (response.status === 401) {\n          // User needs authentication - show login form\n          setNeedsAuth(true);\n          setShowLoginForm(true);\n          return [];\n        }\n        \n        // Successfully authenticated - hide login form  \n        setNeedsAuth(false);\n        setShowLoginForm(false);\n        \n        if (!response.ok) {\n          throw new Error(`${response.status}: ${response.statusText}`);\n        }\n        \n        return await response.json();\n      } catch (error) {\n        console.log('[Employees] Query failed, returning empty array:', error);\n        return [];\n      }\n    }\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertEmployeeSchema.extend({\n      accessCode: z.string().min(4, \"El c√≥digo debe tener al menos 4 d√≠gitos\").max(6, \"El c√≥digo no puede exceder 6 d√≠gitos\"),\n    })),\n    defaultValues: {\n      name: \"\",\n      position: \"\",\n      accessCode: \"\",\n      role: \"employee\" as EmployeeRole,\n    },\n  });\n\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (editingEmployee) {\n        // Editing existing employee - use normal authenticated endpoint\n        const response = await apiRequest(\"PUT\", `/api/employees/${editingEmployee.id}`, data);\n        return response.json();\n      } else {\n        // Creating new employee - try first employee endpoint first, fallback to normal\n        try {\n          // Try the special first employee endpoint (no auth required)\n          const response = await fetch('/api/employees/first', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data)\n          });\n          \n          if (response.status === 403) {\n            // Employees already exist - use normal authenticated endpoint\n            const authResponse = await apiRequest(\"POST\", \"/api/employees\", data);\n            return authResponse.json();\n          }\n          \n          if (!response.ok) {\n            const error = await response.text();\n            throw new Error(`${response.status}: ${error}`);\n          }\n          \n          return response.json();\n        } catch (error) {\n          // If first endpoint fails for other reasons, try the normal endpoint\n          console.log('[Employee Creation] First endpoint failed, trying authenticated endpoint:', error);\n          const response = await apiRequest(\"POST\", \"/api/employees\", data);\n          return response.json();\n        }\n      }\n    },\n    onSuccess: (data) => {\n      // If creating first employee, automatically log them in\n      if (!editingEmployee && employees.length === 0) {\n        const accessCode = form.getValues('accessCode');\n        if (accessCode) {\n          localStorage.setItem('employeeAccessCode', accessCode);\n          localStorage.setItem('employeeId', data.id);\n          onNotification(`Primer empleado creado exitosamente. ¬°Ya est√°s conectado como ${data.name}!`);\n        }\n      }\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      const message = editingEmployee ? \"Empleado actualizado exitosamente\" : \"Empleado creado exitosamente\";\n      if (editingEmployee || employees.length > 0) {\n        onNotification(message);\n      }\n      setIsDialogOpen(false);\n      setEditingEmployee(null);\n      form.reset();\n    },\n    onError: () => {\n      const message = editingEmployee ? \"Error al actualizar el empleado\" : \"Error al crear el empleado\";\n      onNotification(message);\n    },\n  });\n\n  const toggleEmployeeStatusMutation = useMutation({\n    mutationFn: async ({ id, active }: { id: string; active: boolean }) => {\n      const response = await apiRequest(\"PATCH\", `/api/employees/${id}`, { active });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      onNotification(\"Estado del empleado actualizado exitosamente\");\n    },\n    onError: () => {\n      onNotification(\"Error al actualizar el estado del empleado\");\n    },\n  });\n\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/employees/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      onNotification(\"Empleado eliminado exitosamente\");\n    },\n    onError: () => {\n      onNotification(\"Error al eliminar el empleado\");\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (accessCode: string) => {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ accessCode })\n      });\n      \n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem('employeeAccessCode', loginCode);\n      localStorage.setItem('employeeId', data.employee.id);\n      setShowLoginForm(false);\n      setNeedsAuth(false);\n      setLoginCode('');\n      queryClient.invalidateQueries({ queryKey: [\"/api/employees\"] });\n      onNotification(`¬°Bienvenido ${data.employee.name}! Has iniciado sesi√≥n correctamente.`);\n    },\n    onError: (error: any) => {\n      onNotification(`Error de login: ${error.message || 'C√≥digo de acceso incorrecto'}`);\n    },\n  });\n\n  const handleLogin = () => {\n    if (loginCode.length >= 4) {\n      loginMutation.mutate(loginCode);\n    } else {\n      onNotification('El c√≥digo debe tener al menos 4 d√≠gitos');\n    }\n  };\n\n  const generateRandomCode = () => {\n    return Math.floor(1000 + Math.random() * 9000).toString();\n  };\n\n  const handleEdit = (employee: Employee) => {\n    setEditingEmployee(employee);\n    form.setValue(\"name\", employee.name);\n    form.setValue(\"position\", employee.position);\n    // Don't set access code when editing - it's now hashed and hidden\n    form.setValue(\"accessCode\", \"\");\n    form.setValue(\"role\", employee.role as EmployeeRole);\n    setIsDialogOpen(true);\n  };\n\n  const handleSubmit = (data: any) => {\n    createEmployeeMutation.mutate(data);\n  };\n\n  const handleDialogClose = () => {\n    setIsDialogOpen(false);\n    setEditingEmployee(null);\n    form.reset();\n  };\n\n  const handleNewEmployee = () => {\n    form.setValue(\"accessCode\", generateRandomCode());\n    setIsDialogOpen(true);\n  };\n\n  const toggleEmployeeStatus = (employee: Employee) => {\n    toggleEmployeeStatusMutation.mutate({\n      id: employee.id,\n      active: !employee.active\n    });\n  };\n\n  const handleDeleteEmployee = (employee: Employee) => {\n    if (window.confirm(`¬øEst√°s seguro de que deseas eliminar a ${employee.name}?`)) {\n      deleteEmployeeMutation.mutate(employee.id);\n    }\n  };\n\n  const filteredEmployees = employees.filter(employee => {\n    const matchesSearch = employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         employee.position.toLowerCase().includes(searchTerm.toLowerCase());\n                         // Removed access code from search since it's now hashed and hidden\n    \n    const matchesRole = filterRole === 'all' || employee.role === filterRole;\n    \n    return matchesSearch && matchesRole;\n  });\n\n  const getRoleColor = (role: string): string => {\n    switch (role) {\n      case 'manager': return 'bg-gradient-to-r from-yellow-400 to-orange-500 text-white';\n      case 'supervisor': return 'bg-gradient-to-r from-purple-400 to-pink-500 text-white';\n      case 'employee': return 'bg-gradient-to-r from-green-400 to-emerald-500 text-white';\n      default: return 'bg-gradient-to-r from-slate-400 to-slate-500 text-white';\n    }\n  };\n\n  const getRoleName = (role: string): string => {\n    switch (role) {\n      case 'manager': return 'Gerente';\n      case 'supervisor': return 'Supervisor';\n      case 'employee': return 'Empleado';\n      default: return role;\n    }\n  };\n\n  // Calculate statistics\n  const stats = {\n    total: employees.length,\n    active: employees.filter(e => e.active).length,\n    managers: employees.filter(e => e.role === 'manager').length,\n    supervisors: employees.filter(e => e.role === 'supervisor').length,\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"tech-glow border-2 border-slate-300/50 dark:border-cyan-500/30\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"w-12 h-12 bg-slate-200 dark:bg-slate-700 rounded-lg animate-pulse\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-slate-200 dark:bg-slate-700 rounded animate-pulse\"></div>\n                  <div className=\"h-6 bg-slate-200 dark:bg-slate-700 rounded animate-pulse\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <Card className=\"tech-glow border-2 border-slate-300/50 dark:border-cyan-500/30\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-cyan-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-muted-foreground dark:text-gray-300\">üë• Cargando empleados...</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Login Form Modal for Authentication */}\n      {showLoginForm && (\n        <Card className=\"tech-glow border-2 border-yellow-400/50 bg-gradient-to-br from-yellow-50/50 to-orange-50/50 dark:from-yellow-900/20 dark:to-orange-900/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2 text-yellow-700 dark:text-yellow-300\">\n              <Shield className=\"w-5 h-5\" />\n              <span>üîê Inicia Sesi√≥n</span>\n            </CardTitle>\n            <CardDescription>\n              Ya existen empleados en el sistema. Ingresa tu c√≥digo de acceso para gestionar empleados.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"loginCode\" className=\"text-sm font-semibold\">C√≥digo de Acceso</Label>\n              <div className=\"flex space-x-2\">\n                <Input\n                  id=\"loginCode\"\n                  type=\"password\"\n                  value={loginCode}\n                  onChange={(e) => setLoginCode(e.target.value)}\n                  placeholder=\"Ingresa tu c√≥digo de 4-6 d√≠gitos\"\n                  className=\"tech-glow border-2 border-yellow-400/30 focus:border-yellow-400\"\n                  onKeyPress={(e) => e.key === 'Enter' && handleLogin()}\n                  data-testid=\"input-login-code\"\n                />\n                <Button\n                  onClick={handleLogin}\n                  disabled={loginMutation.isPending}\n                  className=\"tech3d-button bg-gradient-to-r from-green-500 to-green-600 text-white px-6\"\n                  data-testid=\"button-login-submit\"\n                >\n                  {loginMutation.isPending ? 'Verificando...' : 'Entrar'}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Header with Tech-3D Styling */}\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n        <div className=\"space-y-1\">\n          <h1 className=\"text-3xl font-bold tech-text-glow bg-gradient-to-r from-purple-400 to-pink-600 bg-clip-text text-transparent\">\n            üë• Gesti√≥n de Empleados\n          </h1>\n          <p className=\"tech3d-text-muted\">Administra roles, permisos y accesos del personal</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <button\n            onClick={() => {\n              setSelectedRole('manager');\n              setShowRolePermissionsModal(true);\n            }}\n            className=\"tech3d-button px-4 py-2 text-sm flex items-center space-x-2\"\n            data-testid=\"button-view-permissions\"\n          >\n            <Settings className=\"w-4 h-4\" />\n            <span>üîê Ver Permisos</span>\n          </button>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <button \n                onClick={handleNewEmployee}\n                className=\"tech3d-button px-6 py-3 text-sm flex items-center space-x-2\"\n                data-testid=\"button-add-employee\"\n              >\n                <Plus className=\"w-5 h-5\" />\n                <span>Nuevo Empleado</span>\n              </button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md tech3d-primary-card border-2 border-cyan-500/30\">\n              <DialogHeader className=\"pb-6\">\n                <DialogTitle className=\"text-2xl tech-text-glow text-center\">\n                  {editingEmployee ? \"‚úèÔ∏è Editar Empleado\" : \"‚ûï Nuevo Empleado\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\" className=\"text-sm font-semibold tech3d-text-muted\">üßë‚Äçüíº Nombre Completo</Label>\n                  <Input\n                    id=\"name\"\n                    {...form.register(\"name\")}\n                    placeholder=\"Ej: Juan P√©rez Rodr√≠guez\"\n                    className=\"tech-glow border-2 border-cyan-500/30 focus:border-cyan-400 py-3\"\n                    data-testid=\"input-employee-name\"\n                  />\n                  {form.formState.errors.name && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.name.message}\n                    </p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"position\" className=\"text-sm font-semibold tech3d-text-muted\">üíº Puesto de Trabajo</Label>\n                  <Input\n                    id=\"position\"\n                    {...form.register(\"position\")}\n                    placeholder=\"Ej: Operador, Cajero, Supervisor\"\n                    className=\"tech-glow border-2 border-cyan-500/30 focus:border-cyan-400 py-3\"\n                    data-testid=\"input-employee-position\"\n                  />\n                  {form.formState.errors.position && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.position.message}\n                    </p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"accessCode\" className=\"text-sm font-semibold tech3d-text-muted\">\n                    {editingEmployee ? \"üîê Nuevo C√≥digo de Acceso (opcional)\" : \"üîê C√≥digo de Acceso\"}\n                  </Label>\n                  {editingEmployee ? (\n                    <div className=\"space-y-2\">\n                      <div className=\"p-3 bg-gray-100 dark:bg-gray-800 rounded-lg border\">\n                        <p className=\"text-sm text-muted-foreground\">\n                          üîí C√≥digo actual: <span className=\"font-mono\">***PROTEGIDO***</span>\n                        </p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Por seguridad, los c√≥digos est√°n encriptados. Deja vac√≠o para mantener el actual o genera uno nuevo.\n                        </p>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Input\n                          id=\"accessCode\"\n                          {...form.register(\"accessCode\")}\n                          placeholder=\"Dejar vac√≠o para mantener actual\"\n                          type=\"number\"\n                          className=\"tech-glow border-2 border-cyan-500/30 focus:border-cyan-400 py-3\"\n                          data-testid=\"input-employee-access-code\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => form.setValue(\"accessCode\", generateRandomCode())}\n                          className=\"tech-button-3d border-2 border-slate-300 hover:border-cyan-400\"\n                          title=\"Generar nuevo c√≥digo\"\n                        >\n                          üé≤\n                        </Button>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"flex space-x-2\">\n                      <Input\n                        id=\"accessCode\"\n                        {...form.register(\"accessCode\")}\n                        placeholder=\"1234\"\n                        type=\"number\"\n                        className=\"tech-glow border-2 border-cyan-500/30 focus:border-cyan-400 py-3\"\n                        data-testid=\"input-employee-access-code\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => form.setValue(\"accessCode\", generateRandomCode())}\n                        className=\"tech-button-3d border-2 border-slate-300 hover:border-cyan-400\"\n                        title=\"Generar c√≥digo aleatorio\"\n                      >\n                        üé≤\n                      </Button>\n                    </div>\n                  )}\n                  {form.formState.errors.accessCode && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.accessCode.message}\n                    </p>\n                  )}\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"role\" className=\"text-sm font-semibold tech3d-text-muted\">üëë Rol del Empleado</Label>\n                  <Select \n                    value={form.watch(\"role\")} \n                    onValueChange={(value: EmployeeRole) => form.setValue(\"role\", value)}\n                  >\n                    <SelectTrigger className=\"tech-glow border-2 border-cyan-500/30 focus:border-cyan-400 py-3\" data-testid=\"select-role\">\n                      <SelectValue placeholder=\"Selecciona un rol\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"employee\">üë§ Empleado</SelectItem>\n                      <SelectItem value=\"supervisor\">üõ°Ô∏è Supervisor</SelectItem>\n                      <SelectItem value=\"manager\">üëë Gerente</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  {form.formState.errors.role && (\n                    <p className=\"text-sm text-destructive mt-1\">\n                      {form.formState.errors.role.message}\n                    </p>\n                  )}\n                </div>\n                <div className=\"flex gap-3\">\n                  <Button\n                    type=\"submit\"\n                    disabled={createEmployeeMutation.isPending}\n                    className=\"tech-button-3d bg-gradient-to-r from-cyan-500 to-blue-600 text-white hover:from-cyan-600 hover:to-blue-700 border-2 border-cyan-300 shadow-lg tech-glow flex-1\"\n                    data-testid=\"button-save-employee\"\n                  >\n                    {createEmployeeMutation.isPending ? \"üíæ Guardando...\" : \"üíæ Guardar\"}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleDialogClose}\n                    className=\"tech-button-3d border-2 border-gray-300 text-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-700\"\n                    data-testid=\"button-cancel\"\n                  >\n                    ‚ùå Cancelar\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Statistics Panel - Payment Methods Style */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"tech-button-3d bg-gradient-to-br from-blue-50 to-cyan-50 border-2 border-blue-300 dark:border-blue-500/30 rounded-xl p-4 text-center\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n            <Users className=\"w-4 h-4 text-white\" />\n          </div>\n          <p className=\"text-2xl font-bold text-blue-700 dark:text-blue-300\">{stats.total}</p>\n          <p className=\"text-sm text-blue-600 dark:text-blue-400\">Total Empleados</p>\n        </div>\n\n        <div className=\"tech-button-3d bg-gradient-to-br from-green-50 to-emerald-50 border-2 border-green-300 dark:border-green-500/30 rounded-xl p-4 text-center\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-green-500 to-emerald-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n            <UserCheck className=\"w-4 h-4 text-white\" />\n          </div>\n          <p className=\"text-2xl font-bold text-green-700 dark:text-green-300\">{stats.active}</p>\n          <p className=\"text-sm text-green-600 dark:text-green-400\">Empleados Activos</p>\n        </div>\n\n        <div className=\"tech-button-3d bg-gradient-to-br from-orange-50 to-amber-50 border-2 border-orange-300 dark:border-orange-500/30 rounded-xl p-4 text-center\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-orange-500 to-amber-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n            <Crown className=\"w-4 h-4 text-white\" />\n          </div>\n          <p className=\"text-2xl font-bold text-orange-700 dark:text-orange-300\">{stats.managers}</p>\n          <p className=\"text-sm text-orange-600 dark:text-orange-400\">Gerentes</p>\n        </div>\n\n        <div className=\"tech-button-3d bg-gradient-to-br from-purple-50 to-pink-50 border-2 border-purple-300 dark:border-purple-500/30 rounded-xl p-4 text-center\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-600 rounded-lg flex items-center justify-center mx-auto mb-2\">\n            <Shield className=\"w-4 h-4 text-white\" />\n          </div>\n          <p className=\"text-2xl font-bold text-purple-700 dark:text-purple-300\">{stats.supervisors}</p>\n          <p className=\"text-sm text-purple-600 dark:text-purple-400\">Supervisores</p>\n        </div>\n      </div>\n\n      {/* Search and Filters */}\n      <Card className=\"tech-glow border-2 border-slate-300/50 dark:border-cyan-500/30\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center space-y-4 lg:space-y-0 lg:space-x-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n              <Input\n                placeholder=\"üîç Buscar por nombre o puesto...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 tech-glow border-2 border-slate-300/50 focus:border-cyan-500/50\"\n                data-testid=\"input-search-employees\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Select value={filterRole} onValueChange={(value: 'all' | EmployeeRole) => setFilterRole(value)}>\n                <SelectTrigger className=\"w-48 tech-glow border-2 border-slate-300/50\" data-testid=\"select-role-filter\">\n                  <SelectValue placeholder=\"Filtrar por rol\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">üåü Todos los Roles</SelectItem>\n                  <SelectItem value=\"manager\">üëë Gerentes</SelectItem>\n                  <SelectItem value=\"supervisor\">üõ°Ô∏è Supervisores</SelectItem>\n                  <SelectItem value=\"employee\">üë§ Empleados</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Employees Table */}\n      <Card className=\"tech-glow border-2 border-slate-300/50 dark:border-cyan-500/30\">\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full min-w-[700px]\">\n              <thead className=\"bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-800 dark:to-slate-700\">\n                <tr>\n                  <th className=\"px-6 py-4 text-left font-semibold text-slate-700 dark:text-slate-300\">üë§ Empleado</th>\n                  <th className=\"px-6 py-4 text-left font-semibold text-slate-700 dark:text-slate-300\">üè∑Ô∏è Rol</th>\n                  <th className=\"px-6 py-4 text-left font-semibold text-slate-700 dark:text-slate-300 hidden sm:table-cell\">üîë C√≥digo</th>\n                  <th className=\"px-6 py-4 text-left font-semibold text-slate-700 dark:text-slate-300\">üìä Estado</th>\n                  <th className=\"px-6 py-4 text-left font-semibold text-slate-700 dark:text-slate-300 hidden md:table-cell\">üìÖ √öltimo Acceso</th>\n                  <th className=\"px-6 py-4 text-center font-semibold text-slate-700 dark:text-slate-300\">‚öôÔ∏è Acciones</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-slate-200 dark:divide-slate-700\">\n                {filteredEmployees.map((employee) => (\n                  <tr key={employee.id} className=\"hover:bg-slate-50 dark:hover:bg-slate-800/50 transition-all duration-300\" data-testid={`employee-row-${employee.id}`}>\n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-gradient-to-br from-cyan-400/20 to-purple-500/20 rounded-full flex items-center justify-center border-2 border-cyan-400/30\">\n                          <User className=\"w-5 h-5 text-cyan-400\" />\n                        </div>\n                        <div>\n                          <div className=\"font-semibold text-foreground\" data-testid={`employee-name-${employee.id}`}>\n                            {employee.name}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\" data-testid={`employee-position-${employee.id}`}>\n                            {employee.position}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <Badge className={`${getRoleColor(employee.role)} text-xs px-3 py-1`}>\n                        {getRoleName(employee.role)}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 hidden sm:table-cell\">\n                      <div className=\"flex items-center space-x-2\">\n                        <code className=\"px-2 py-1 rounded text-sm font-mono bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400 border border-green-300 dark:border-green-700\">\n                          üîí PROTEGIDO\n                        </code>\n                        <div className=\"text-xs text-muted-foreground\" title=\"Los c√≥digos est√°n encriptados por seguridad\">\n                          <Lock className=\"w-3 h-3\" />\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex items-center\">\n                        <div className={`w-2 h-2 rounded-full mr-2 ${employee.active ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                        <span className={`text-sm font-medium ${employee.active ? 'text-green-700 dark:text-green-400' : 'text-red-700 dark:text-red-400'}`}>\n                          {employee.active ? 'Activo' : 'Inactivo'}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-muted-foreground hidden md:table-cell\">\n                      {employee.lastAccess ? new Date(employee.lastAccess).toLocaleDateString('es-DO') : 'Nunca'}\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex items-center justify-center space-x-1 sm:space-x-2\">\n                        <button\n                          onClick={() => handleEdit(employee)}\n                          className=\"tech-button-3d p-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800 rounded-lg border-2 border-blue-400 shadow-lg transition-all duration-300 hover:scale-110 min-h-11 min-w-11 flex items-center justify-center\"\n                          title=\"Editar empleado\"\n                          data-testid={`button-edit-employee-${employee.id}`}\n                        >\n                          <Edit3 className=\"w-4 h-4\" />\n                        </button>\n                        <button\n                          onClick={() => toggleEmployeeStatus(employee)}\n                          className={`tech-button-3d p-3 rounded-lg border-2 shadow-lg transition-all duration-300 hover:scale-110 min-h-11 min-w-11 flex items-center justify-center ${\n                            employee.active \n                              ? 'bg-gradient-to-r from-red-600 to-red-700 text-white hover:from-red-700 hover:to-red-800 border-red-400' \n                              : 'bg-gradient-to-r from-green-600 to-green-700 text-white hover:from-green-700 hover:to-green-800 border-green-400'\n                          }`}\n                          title={employee.active ? 'Desactivar' : 'Activar'}\n                          data-testid={`button-toggle-employee-${employee.id}`}\n                        >\n                          {employee.active ? <Lock className=\"w-4 h-4\" /> : <Unlock className=\"w-4 h-4\" />}\n                        </button>\n                        <button\n                          onClick={() => handleDeleteEmployee(employee)}\n                          className=\"tech-button-3d p-3 bg-gradient-to-r from-red-600 to-red-700 text-white hover:from-red-700 hover:to-red-800 rounded-lg border-2 border-red-400 shadow-lg transition-all duration-300 hover:scale-110 min-h-11 min-w-11 flex items-center justify-center\"\n                          title=\"Eliminar empleado\"\n                          data-testid={`button-delete-employee-${employee.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {filteredEmployees.length === 0 && (\n        <Card className=\"tech-glow border-2 border-slate-300/50 dark:border-cyan-500/30\">\n          <CardContent className=\"p-12\">\n            <div className=\"text-center space-y-4\">\n              <div className=\"w-24 h-24 bg-gradient-to-br from-slate-200 to-slate-300 dark:from-slate-700 dark:to-slate-600 rounded-full flex items-center justify-center mx-auto\">\n                <Users className=\"w-12 h-12 text-slate-500 dark:text-slate-400\" />\n              </div>\n              <div className=\"space-y-2\">\n                <h3 className=\"text-xl font-semibold text-foreground\">\n                  {searchTerm || filterRole !== 'all' ? 'üîç No se encontraron empleados' : 'üë• No hay empleados registrados'}\n                </h3>\n                <p className=\"text-muted-foreground\">\n                  {searchTerm || filterRole !== 'all' \n                    ? 'Intenta ajustar tu b√∫squeda o filtros.' \n                    : 'Comienza agregando tu primer empleado al sistema.'\n                  }\n                </p>\n              </div>\n              {!searchTerm && filterRole === 'all' && (\n                <Button \n                  onClick={handleNewEmployee}\n                  className=\"tech-button-3d bg-gradient-to-r from-green-500 to-emerald-600 text-white px-6 py-3 rounded-lg font-bold border-2 border-green-300 shadow-lg tech-glow\"\n                  data-testid=\"button-add-first-employee\"\n                >\n                  <Plus className=\"w-5 h-5 mr-2\" />\n                  Agregar Primer Empleado\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Role Permissions Modal */}\n      <Dialog open={showRolePermissionsModal} onOpenChange={setShowRolePermissionsModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center space-x-2\">\n              <Settings className=\"w-5 h-5\" />\n              <span>üîê Permisos por Rol</span>\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            {Object.entries(roles).map(([roleKey, roleData]) => {\n              const IconComponent = roleData.icon;\n              return (\n                <div key={roleKey} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <div className={`w-10 h-10 ${roleData.color === 'blue' ? 'bg-blue-100' : roleData.color === 'purple' ? 'bg-purple-100' : 'bg-green-100'} rounded-lg flex items-center justify-center`}>\n                      <IconComponent className={`w-5 h-5 ${roleData.color === 'blue' ? 'text-blue-600' : roleData.color === 'purple' ? 'text-purple-600' : 'text-green-600'}`} />\n                    </div>\n                    <h3 className=\"font-semibold text-lg\">{roleData.nombre}</h3>\n                  </div>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                    {roleData.permisos.map((permiso, index) => (\n                      <div key={index} className=\"flex items-center space-x-2 text-sm\">\n                        <Check className=\"w-4 h-4 text-green-500\" />\n                        <span>{permiso}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":37760},"client/src/pages/employees.tsx":{"content":"import EmployeesManagement from \"@/components/employees-management\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Employees() {\n  const { toast } = useToast();\n\n  const showNotification = (message: string) => {\n    toast({\n      description: message,\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800\">\n      <EmployeesManagement onNotification={showNotification} />\n    </div>\n  );\n}","size_bytes":533}},"version":1}